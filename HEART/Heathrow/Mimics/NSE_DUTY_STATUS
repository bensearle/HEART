load mimic_libutil

load nse_plc

TYPE b_db_row_type 	= db_elements(db_addr,b_value)

TYPE b_bool_type 	= db_elements(b_value)

TYPE alarm_row_type 	= db_elements(alarm_status)


!-----------------------------------------------------------------------------!
!  READ BOOLEAN VALUE                                                         !
!-----------------------------------------------------------------------------!

object set_b_value(db_addr=db_address,src=source,val=onoff)
var op = output  b_db_row_type
begin
if not get busy op then
   begin
   set source op = src
   set default op
   set old_default op
   set value op.db_addr = db_addr
   set old_value op.db_addr = db_addr
   set value op.b_value = val
   set old_off op.b_value
   request op
   end
end


!-----------------------------------------------------------------------------!
!  OUTSTATION SYMBOL                                                          !
!-----------------------------------------------------------------------------!


OBJECT nse_symbol(plc_offset=INT,src=Source)

VAR plc_a_duty_status		= input		b_bool_type
VAR plc_b_duty_status		= input		b_bool_type
VAR plc_a_unavailable		= input		b_bool_type
VAR plc_b_unavailable		= input		b_bool_type
VAR plc_a_hardware		= input		b_bool_type
VAR plc_b_hardware		= input		b_bool_type
VAR plc_a_scope_comms		= input		b_bool_type
VAR plc_b_scope_comms		= input		b_bool_type
VAR scope_plc_a_comms		= input		b_bool_type
VAR scope_plc_b_comms		= input		b_bool_type
VAR scope_plc_a_wdog		= input		b_bool_type
VAR scope_plc_b_wdog		= input		b_bool_type
VAR a_dh485_comms		= input		b_bool_type
VAR b_dh485_comms		= input		b_bool_type
VAR a_plc_plc_wdog		= input		b_bool_type
VAR b_plc_plc_wdog		= input		b_bool_type
VAR a_plc_plc_wdog_hw		= input		b_bool_type
VAR b_plc_plc_wdog_hw		= input		b_bool_type
VAR a_plc_plc_duty_valid	= input		b_bool_type
VAR b_plc_plc_duty_valid	= input		b_bool_type
VAR plc_a_battery		= input		b_bool_type
VAR plc_b_battery		= input		b_bool_type
VAR plc_a_forces		= input		b_bool_type
VAR plc_b_forces		= input		b_bool_type
VAR psu_1			= input		b_bool_type
VAR psu_2			= input		b_bool_type

VAR a_foreground		= loopback	colour
VAR b_foreground		= loopback	colour
VAR a_text_foreground		= loopback	colour
VAR b_text_foreground		= loopback	colour

VAR a_status_text		= string(15)
VAR b_status_text		= string(15)

VAR a_confirm			= yesno
VAR b_confirm			= yesno

VAR plc_popup		= popup		os_object

BEGIN

! DATA RETRIEVAL !

SET SOURCE plc_a_duty_status = src
SET FILTER plc_a_duty_status.db_addr = lim_eq
SET LIMIT plc_a_duty_status.db_addr = db_address(int(b1) + plc_offset + 3 )
SET PERSIST plc_a_duty_status
REQUEST plc_a_duty_status

SET SOURCE plc_b_duty_status = src
SET FILTER plc_b_duty_status.db_addr = lim_eq
SET LIMIT plc_b_duty_status.db_addr = db_address(int(b1) + plc_offset + 4 )
SET PERSIST plc_b_duty_status
REQUEST plc_b_duty_status

SET SOURCE plc_a_unavailable = src
SET FILTER plc_a_unavailable.db_addr = lim_eq
SET LIMIT plc_a_unavailable.db_addr = db_address(int(b1) + plc_offset + 19 )
SET PERSIST plc_a_unavailable
REQUEST plc_a_unavailable

SET SOURCE plc_b_unavailable = src
SET FILTER plc_b_unavailable.db_addr = lim_eq
SET LIMIT plc_b_unavailable.db_addr = db_address(int(b1) + plc_offset + 20 )
SET PERSIST plc_b_unavailable
REQUEST plc_b_unavailable

SET SOURCE plc_a_hardware = src
SET FILTER plc_a_hardware.db_addr = lim_eq
SET LIMIT plc_a_hardware.db_addr = db_address(int(b1) + plc_offset + 21 )
SET PERSIST plc_a_hardware
REQUEST plc_a_hardware

SET SOURCE plc_b_hardware = src
SET FILTER plc_b_hardware.db_addr = lim_eq
SET LIMIT plc_b_hardware.db_addr = db_address(int(b1) + plc_offset + 22 )
SET PERSIST plc_b_hardware

SET SOURCE plc_a_scope_comms = src
SET FILTER plc_a_scope_comms.db_addr = lim_eq
SET LIMIT plc_a_scope_comms.db_addr = db_address(int(b1) + plc_offset + 23 )
SET PERSIST plc_a_scope_comms
REQUEST plc_a_scope_comms

SET SOURCE plc_b_scope_comms = src
SET FILTER plc_b_scope_comms.db_addr = lim_eq
SET LIMIT plc_b_scope_comms.db_addr = db_address(int(b1) + plc_offset + 24 )
SET PERSIST plc_b_scope_comms
REQUEST plc_b_scope_comms

SET SOURCE scope_plc_a_comms = src
SET FILTER scope_plc_a_comms.db_addr = lim_eq
SET LIMIT scope_plc_a_comms.db_addr = db_address(int(b1) + plc_offset + 9 )
SET PERSIST scope_plc_a_comms
REQUEST scope_plc_a_comms

SET SOURCE scope_plc_b_comms = src
SET FILTER scope_plc_b_comms.db_addr = lim_eq
SET LIMIT scope_plc_b_comms.db_addr = db_address(int(b1) + plc_offset + 10 )
SET PERSIST scope_plc_b_comms
REQUEST scope_plc_b_comms

SET SOURCE a_dh485_comms = src
SET FILTER a_dh485_comms.db_addr = lim_eq
SET LIMIT a_dh485_comms.db_addr = db_address(int(b1) + plc_offset + 14 )
SET PERSIST a_dh485_comms
REQUEST a_dh485_comms

SET SOURCE b_dh485_comms = src
SET FILTER b_dh485_comms.db_addr = lim_eq
SET LIMIT b_dh485_comms.db_addr = db_address(int(b1) + plc_offset + 25 )
SET PERSIST b_dh485_comms
REQUEST b_dh485_comms

SET SOURCE scope_plc_a_wdog = src
SET FILTER scope_plc_a_wdog.db_addr = lim_eq
SET LIMIT scope_plc_a_wdog.db_addr = db_address(int(b1) + plc_offset - 1 )
SET PERSIST scope_plc_a_wdog
REQUEST scope_plc_a_wdog

SET SOURCE scope_plc_b_wdog = src
SET FILTER scope_plc_b_wdog.db_addr = lim_eq
SET LIMIT scope_plc_b_wdog.db_addr = db_address(int(b1) + plc_offset )
SET PERSIST scope_plc_b_wdog
REQUEST scope_plc_b_wdog

SET SOURCE a_plc_plc_wdog = src
SET FILTER a_plc_plc_wdog.db_addr = lim_eq
SET LIMIT a_plc_plc_wdog.db_addr = db_address(int(b1) + plc_offset + 15 )
SET PERSIST a_plc_plc_wdog
REQUEST a_plc_plc_wdog

SET SOURCE b_plc_plc_wdog = src
SET FILTER b_plc_plc_wdog.db_addr = lim_eq
SET LIMIT b_plc_plc_wdog.db_addr = db_address(int(b1) + plc_offset + 26 )
SET PERSIST b_plc_plc_wdog
REQUEST b_plc_plc_wdog

SET SOURCE a_plc_plc_wdog_hw = src
SET FILTER a_plc_plc_wdog_hw.db_addr = lim_eq
SET LIMIT a_plc_plc_wdog_hw.db_addr = db_address(int(b1) + plc_offset + 17 )
SET PERSIST a_plc_plc_wdog_hw
REQUEST a_plc_plc_wdog_hw

SET SOURCE b_plc_plc_wdog_hw = src
SET FILTER b_plc_plc_wdog_hw.db_addr = lim_eq
SET LIMIT b_plc_plc_wdog_hw.db_addr = db_address(int(b1) + plc_offset + 18 )
SET PERSIST b_plc_plc_wdog_hw
REQUEST b_plc_plc_wdog_hw

SET SOURCE a_plc_plc_duty_valid = src
SET FILTER a_plc_plc_duty_valid.db_addr = lim_eq
SET LIMIT a_plc_plc_duty_valid.db_addr = db_address(int(b1) + plc_offset + 16 )
SET PERSIST a_plc_plc_duty_valid
REQUEST a_plc_plc_duty_valid

SET SOURCE b_plc_plc_duty_valid = src
SET FILTER b_plc_plc_duty_valid.db_addr = lim_eq
SET LIMIT b_plc_plc_duty_valid.db_addr = db_address(int(b1) + plc_offset + 27 )
SET PERSIST b_plc_plc_duty_valid
REQUEST b_plc_plc_duty_valid

SET SOURCE plc_a_battery = src
SET FILTER plc_a_battery.db_addr = lim_eq
SET LIMIT plc_a_battery.db_addr = db_address(int(b1) + plc_offset + 5 )
SET PERSIST plc_a_battery
REQUEST plc_a_battery

SET SOURCE plc_b_battery = src
SET FILTER plc_b_battery.db_addr = lim_eq
SET LIMIT plc_b_battery.db_addr = db_address(int(b1) + plc_offset + 6 )
SET PERSIST plc_b_battery
REQUEST plc_b_battery

SET SOURCE plc_a_forces = src
SET FILTER plc_a_forces.db_addr = lim_eq
SET LIMIT plc_a_forces.db_addr = db_address(int(b1) + plc_offset + 7 )
SET PERSIST plc_a_forces
REQUEST plc_a_forces

SET SOURCE plc_b_forces = src
SET FILTER plc_b_forces.db_addr = lim_eq
SET LIMIT plc_b_forces.db_addr = db_address(int(b1) + plc_offset + 8 )
SET PERSIST plc_b_forces
REQUEST plc_b_forces

SET SOURCE psu_1 = src
SET FILTER psu_1.db_addr = lim_eq
SET LIMIT psu_1.db_addr = db_address(int(b1) + plc_offset + 11 )
SET PERSIST psu_1
REQUEST psu_1

SET SOURCE psu_2 = src
SET FILTER psu_2.db_addr = lim_eq
SET LIMIT psu_2.db_addr = db_address(int(b1) + plc_offset + 12 )
SET PERSIST psu_2
REQUEST psu_2


IF scope_plc_a_comms.b_value == 1 OR scope_plc_a_wdog.b_value == 1 THEN
  IF scope_plc_b_comms.b_value == 1 OR scope_plc_b_wdog.b_value == 1 THEN
  BEGIN
    a_foreground = MAGENTA
    a_status_text = "FAILED"
    a_text_foreground = FLASHRED
  END
  ELSE IF plc_a_unavailable.b_value == 1 AND
  b_plc_plc_wdog.b_value == 1 AND
  b_plc_plc_duty_valid.b_value == 1 THEN
  BEGIN        
    a_foreground = MAGENTA
    a_status_text = "FAILED"
    a_text_foreground = FLASHRED
  END
  ELSE 
  BEGIN
    a_foreground = RED
    a_status_text = "FAILED"
    a_text_foreground = FLASHRED
  END
ELSE IF a_dh485_comms.b_value == 1 OR
!   a_plc_plc_wdog.b_value == 1 OR
   a_plc_plc_wdog_hw.b_value == 1 OR
   a_plc_plc_duty_valid.b_value == 1 OR!
   plc_a_battery.b_value == 1 OR
   psu_1.b_value == 0 OR
   psu_2.b_value == 0 THEN
   BEGIN
   IF plc_a_duty_status.b_value == 1 THEN
   BEGIN
     a_foreground = RED
     a_status_text = "DUTY"
     a_text_foreground = BLACK
   END
   ELSE
   BEGIN
     a_foreground = RED
     a_status_text = "STANDBY"
     a_text_foreground = BLACK
   END
   END
ELSE IF plc_a_duty_status.b_value == 1 THEN
BEGIN
  a_foreground = GREEN
  a_status_text = "DUTY"
  a_text_foreground = BLACK
END
ELSE IF plc_a_duty_status.b_value == 0 THEN
BEGIN
  a_foreground = YELLOW
  a_status_text = "STANDBY"
  a_text_foreground = BLACK
END
ELSE
  a_foreground = blue

IF scope_plc_b_comms.b_value == 1 OR scope_plc_b_wdog.b_value == 1 THEN
  IF scope_plc_a_comms.b_value == 1 OR scope_plc_a_wdog.b_value == 1 THEN
  BEGIN
    b_foreground = MAGENTA
    b_status_text = "FAILED"
    b_text_foreground = FLASHRED
  END
  ELSE IF plc_b_unavailable.b_value == 1 AND
    a_plc_plc_wdog.b_value == 1 AND
    a_plc_plc_duty_valid.b_value == 1 THEN
  BEGIN        
    b_foreground = MAGENTA
    b_status_text = "FAILED"
    b_text_foreground = FLASHRED
  END
  ELSE 
  BEGIN
    b_foreground = RED
    b_status_text = "FAILED"
    b_text_foreground = FLASHRED
  END
ELSE IF b_dh485_comms.b_value == 1 OR
!   b_plc_plc_wdog.b_value == 1 OR
   b_plc_plc_wdog_hw.b_value == 1 OR
   b_plc_plc_duty_valid.b_value == 1 OR!
   plc_b_battery.b_value == 1 OR
   psu_1.b_value == 0 OR
   psu_2.b_value == 0 THEN
   BEGIN
   IF plc_b_duty_status.b_value == 1 THEN
   BEGIN
     b_foreground = RED
     b_status_text = "DUTY"
     b_text_foreground = BLACK
   END
   ELSE
   BEGIN
     b_foreground = RED
     b_status_text = "STANDBY"
     b_text_foreground = BLACK
   END
   END
ELSE IF plc_b_duty_status.b_value == 1 THEN
BEGIN
  b_foreground = GREEN
  b_status_text = "DUTY"
  b_text_foreground = BLACK
END
ELSE IF plc_b_duty_status.b_value == 0 THEN
BEGIN
  b_foreground = YELLOW
  b_status_text = "STANDBY"
  b_text_foreground = BLACK
END
ELSE
  b_foreground = blue


!-----------------------------------------------------------------------------!
!  DRAW MAIN SYMBOL                                                           !
!-----------------------------------------------------------------------------!

JUST=CENTRECENTRE
FG = decoroff
RECT(H=150,W=250) CLEAR
x += 125 y -= 75 add
y += 150 add
x -= 250 add line(fg=grey40) clear
y -= 1 add
y -= 149 add
x += 250 add line (fg = white) clear

X = -105 Y = 60 ADD
X += 100 ADD
Y -= 25 ADD
LINE(FG=WHITE) CLEAR
ADD
X -= 100 ADD
Y += 25 ADD
LINE(FG=grey40) CLEAR

X = 5 Y = 60 ADD
X += 100 ADD
Y -= 25 ADD
LINE(FG=WHITE) CLEAR
ADD
X -= 100 ADD
Y += 25 ADD
LINE(FG=grey40) CLEAR


TFG = BLACK

x = -55 y = 0 ADD RECT(FG=a_foreground,H=60,W=100)
ADD TEXT(CH=17,"PLC A") CLEAR
Y += 50
ADD TEXT(CH=17,TFG=a_text_foreground,a_status_text) CLEAR

x = 55 y = 0 ADD RECT(FG=b_foreground,H=60,W=100) 
ADD TEXT(CH=17,"PLC B") CLEAR
Y += 50
ADD TEXT(CH=17,TFG=b_text_foreground,b_status_text) CLEAR

X = 5 Y = 30 ADD
X += 100 ADD
Y -= 60 ADD
LINE(FG=grey40) CLEAR
ADD
X -= 100 ADD
Y += 60 ADD
LINE(FG=WHITE) CLEAR

X = -105 Y = 30 ADD
X += 100 ADD
Y -= 60 ADD
LINE(FG=grey40) CLEAR
ADD
X -= 100 ADD
Y += 60 ADD
LINE(FG=WHITE) CLEAR

X = -115 Y = -40 ADD
X += 230 ADD
LINE(FG=WHITE) CLEAR

X = -115 Y = -39 ADD
X += 230 ADD
LINE(FG=grey40) CLEAR

X = 0 Y = -55 TEXT(CH=17,TFG=BLACK,"OS 32 : 33KV NORTH INTAKE") CLEAR

SET TITLE plc_popup = " "

X = -55 Y = 0
H = 60 W = 100
IF SELB THEN 
  request plc_popup(20000,heathro2,"A")


X = 55 Y = 0
H = 60 W = 100
IF SELB THEN 
  request plc_popup(20000,heathro2,"B")


END

object main_object (bg,fg,w,h,tbg,tfg)
begin
scale = 175
nse_symbol(20000,heathro2)
clear

end

mimic = main_object w=300,h=200,just=centrecentre,fg=white,bg=black,resizable
