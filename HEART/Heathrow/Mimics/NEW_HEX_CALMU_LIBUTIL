load gadgets_libutil
load std_trend_libutil

type calmu_out_type = db_elements(e_value)
type str_tab = table(db_addr=int,str=string(8),failure=onoff)
type op_element_type = db_elements(db_addr,b_value)
type ip_element_type = db_elements(db_addr,e_value)
type bool_element_type = db_elements(db_addr,b_value)
type time_req_type = db_elements(db_addr,time)

object convert_to_sno(val1=int,val2=int,val3=int,val4=int)=string
   begin
   if (val1 == 0) or (val2 == 0) or (val3 == 0) or (val4 == 0) then
      convert_to_sno = ""
   else
      begin
      convert_to_sno = toascii(val1/(2**8))+toascii(val1&((2**8)-1))
      convert_to_sno += toascii(val2/(2**8))+toascii(val2&((2**8)-1))
      convert_to_sno += toascii(val3/(2**8))+toascii(val3&((2**8)-1))
      convert_to_sno += toascii(val4/(2**8))+toascii(val4&((2**8)-1)) 
      end
   end

object convert_to_time(val1=int,val2=int)=string
var days =int
var months = int
var hours = int 
var mins=int
var secs=int
   begin
   convert_to_time = ""
   days = (val1&((2**10)-1))/(2**5)
   if days < 10 then 
      convert_to_time += "0"
   convert_to_time += days+"/"
   months = (val1&((2**14)-1))/(2**10)
   if months < 10 then 
      convert_to_time += "0"
   convert_to_time += months+"  "
   hours = val1&((2**5)-1)
   mins = val2/(2**10)
   secs = (val2&((2**10)-1))/(2**4)
   if hours < 10 then 
      convert_to_time += "0"
   convert_to_time += hours+":"
   if mins < 10 then
      convert_to_time += "0"
   convert_to_time += mins+":"
   if secs < 10 then
      convert_to_time += "0"
   convert_to_time += secs
   end

object convert_from_sno(str=string, val1=loopback int,val2=loopback int,val3= loopback int,val4=loopback int)
   begin
   val1 = (fromascii(getchar(1,str))*(2**8))+fromascii(getchar(2,str))
   if invalid val1 then val1=0
   if val1 == 12336 then val1=0
   val2 = (fromascii(getchar(3,str))*(2**8))+fromascii(getchar(4,str))
   if invalid val2 then val2=0
   if val2 == 12336 then val2=0
   val3 = (fromascii(getchar(5,str))*(2**8))+fromascii(getchar(6,str))
   if invalid val3 then val3=0
   if val3 == 12336 then val3=0
   val4 = (fromascii(getchar(7,str))*(2**8))+fromascii(getchar(8,str))
   if invalid val4 then val4=0
   if val4 == 12336 then val4=0
   end
 
object request_calmu_sno(src = source, db_addr = int,b_db_loc=int) = str_tab
var sno_inp1 = input ip_element_type
var sno_inp2 = input ip_element_type
var sno_inp3 = input ip_element_type
var sno_inp4 = input ip_element_type
var sno_valid = input bool_element_type
var ret_value = loopback str_tab
var local_src = loopback source
begin
if invalid local_src then
   begin
   local_src = src
   set source sno_inp1 = local_src
   set filter sno_inp1.db_addr = lim_eq
   set limit sno_inp1.db_addr = db_address("E"+db_addr)
   set persist sno_inp1
   set source sno_inp2 = local_src
   set filter sno_inp2.db_addr = lim_eq
   set limit sno_inp2.db_addr = db_address("E"+(db_addr+1))
   set persist sno_inp2
   set source sno_inp3 = local_src
   set filter sno_inp3.db_addr = lim_eq
   set limit sno_inp3.db_addr = db_address("E"+(db_addr+2))
   set persist sno_inp3
   set source sno_inp4 = local_src
   set filter sno_inp4.db_addr = lim_eq
   set limit sno_inp4.db_addr = db_address("E"+(db_addr+3))
   set persist sno_inp4
   set source sno_valid = local_src
   set filter sno_valid.db_addr = lim_eq
   set limit sno_valid.db_addr = db_address("B"+b_db_loc)
   set persist sno_valid
   end
request sno_inp1
request sno_inp2
request sno_inp3
request sno_inp4
request sno_valid
set default ret_value
if (valid sno_inp1) and (valid sno_inp2) and valid (sno_inp3) and (valid sno_inp4) and (valid sno_valid) then
   begin
   realf = fixed0
   ret_value.db_addr = db_addr     ret_value.str=convert_to_sno(int(sno_inp1.e_value),int(sno_inp2.e_value),int(sno_inp3.e_value),int(sno_inp4.e_value))
   ret_value.failure = sno_valid.b_value 
   end
if (get busy sno_inp1) or (get busy sno_inp2) or (get busy sno_inp3) or (get busy sno_inp4) then
   ret_value.str = "BUSY" 
request_calmu_sno = ret_value
end

object write_calmu_sn(src = source,new_sn = str_tab)
var op_sno1 = output calmu_out_type
var op_sno2 = output calmu_out_type
var op_sno3 = output calmu_out_type 
var op_sno4 = output calmu_out_type   
var val1 = loopback int
var val2 = loopback int
var val3 = loopback int
var val4 = loopback int
var shared i = loopback int
begin 
convert_from_sno(new_sn.str,val1,val2,val3,val4)
set source op_sno1 = src
set filter op_sno1.db_addr = lim_eq
set limit op_sno1.db_addr = db_address("E"+(new_sn.db_addr+46))
set default op_sno1
set value op_sno1.e_value = val1 
request op_sno1

set source op_sno2 = src
set filter op_sno2.db_addr = lim_eq
set limit op_sno2.db_addr = db_address("E"+(new_sn.db_addr+47))
set default op_sno2
set value op_sno2.e_value = val2 
request op_sno2

set source op_sno3 = src
set filter op_sno3.db_addr = lim_eq
set limit op_sno3.db_addr = db_address("E"+(new_sn.db_addr+48))
set default op_sno3
set value op_sno3.e_value = val3 
request op_sno3

set source op_sno4 = src
set filter op_sno4.db_addr = lim_eq
set limit op_sno4.db_addr = db_address("E"+(new_sn.db_addr+49))
set default op_sno4
set value op_sno4.e_value = val4 
request op_sno4
end


object request_element(src=source,db_addr=int)=real
var ip_element = input ip_element_type
   begin
   set source ip_element=src
   set filter ip_element.db_addr=lim_eq
   set limit ip_element.db_addr=db_address("E"+db_addr)
   set persist ip_element
   request ip_element
   if valid ip_element then
      request_element = ip_element.e_value 
   end

object request_b_element(src=source,db_addr=int)=onoff
var ip_element = input bool_element_type
   begin
   set source ip_element=src
   set filter ip_element.db_addr=lim_eq
   set limit ip_element.db_addr=db_address("B"+db_addr)
   set persist ip_element
   request ip_element
   if valid ip_element then
      request_b_element = ip_element.b_value 
   else
      request_b_element = off
   end

object display_anal(ch,val=string,comms_failed=onoff)
var old_x = int
var old_y = int
   begin
   just = centreright
   w = int(length(val)+10)
   h = ch+2
   if (comms_failed==on) then
      fg=magenta
   else
      fg=decoroff
   rect 
   fg= black
   tfg= black
   old_x=x
   old_y=y
   lw=4
   fg=decorlight
   clear
   y = (y-(h/2)) add
   x = x-w add
   y=y+h add line
   fg=decorshadow
   clear 
   add
   x=x+w+4 add
   add
   y=y-h-4 add line
   x = x+(w-x)
   x = old_x-5
   y = old_y
   text(val)
   end

object change_db(src=source,db_addr=db_address,val=onoff)
var op_db_element = output db_elements(b_value)
begin
set source op_db_element = src
set filter op_db_element.db_addr = lim_eq
set limit op_db_element.db_addr = db_addr
set default op_db_element
set value op_db_element.b_value = val
request op_db_element
end

object convert_to_2w(val1=real,val2=real)=string
   begin
   convert_to_2w = ""
   if (int(val2) & (2**15)) then 
      begin
      convert_to_2w = "-"
      end
   if int(val2)&((2**15)-1) then
      convert_to_2w = convert_to_2w+string(int(val2)&((2**15)-1))+string(val1)
   else
      convert_to_2w = convert_to_2w+string(val1)
   end

object convert_from_hex(val1=real,val2=real)=string
   begin
   convert_from_hex = ((val1*(16**2))+val2)
   end

object request_time(src=source,db_addr=int)=time
var ip_time = input time_req_type
   begin
   set source ip_time=src
   set filter ip_time.db_addr=lim_eq
   set limit ip_time.db_addr=db_address("B"+db_addr)
   set persist ip_time
   request ip_time
   if valid ip_time then
      request_time = ip_time.time 
   end

object calmu_met_basic(bg,fg,w,h,just,src=source,db_offset=int,cal_no=int,comms_addr=int)
var val = real 
var val2 = real
var val3 = real
var val4 = real 
var comms_down = onoff
begin
realf=fixed0
rect(fg=GREY)
comms_down = request_b_element(src,comms_addr)
if comms_down then
   box(lw=5,fg=flashred)
x = 45 y = 15 text(just=centreleft,"CALMU METER "+cal_no,ch=22,tfg=white)
ch=20
x = 20 y = 60 text(just=centreleft,"SERIAL NO",tfg=white)
val = request_element(src,db_offset)
val2 = request_element(src,db_offset+1)
val3 = request_element(src,db_offset+2)
val4 = request_element(src,db_offset+3)
display_anal(x=260,convert_to_sno(int(val),int(val2),int(val3),int(val4)),comms_down)
y += 30 text(just=centreleft, "RED PHASE",tfg=white)
realf=fixed1
val=request_element(src,db_offset+4)
display_anal(x=260,val+" KV",comms_down)
realf=fixed0
y += 30 text(just=centreleft,"RED PHASE",tfg=white)
val=request_element(src,db_offset+5)
display_anal(x=260,val+" A",comms_down)
realf=fixed2
y +=30 text(just=centreleft,"INSTANT. KVA",tfg=white)
val=request_element(src,db_offset+6)
val2=request_element(src,db_offset+7)
display_anal(x=260,convert_to_2w(val,val2),comms_down)
realf=fixed0
end

mimic calmu_mim_basic = calmu_met_basic w=200,h=230,just=centrecentre,fg=white,bg=black,resizable
!*****************!
object cal_met_detailed(bg,fg,w,h,tbg,tfg,src=source,db_offset=int,b_db_offset=int,cal_no=int,sub_no=int,hist_cnt=int,comms_addr=int)
var val=real
var val2=real
var val3=real
var val4=real
var val_pos=int
var val_string=string
var curr = real
var volt = real
var comms_down = onoff
begin
just=centreleft
realf = fixed0
x = 0 y = 0 clear

comms_down = request_b_element(src,comms_addr)
X=-175 Y=-170 Add Y=-35  Add LINE(lw=2,fg=white) clear
X=175 Y=-170 Add Y=-35  Add LINE(lw=2,fg=white) clear
X=-545 Y=-170 Add Y=160  Add LINE(lw=2,fg=white) clear
X=535 Y=-170 Add Y=160  Add LINE(lw=2,fg=white) clear
X=-545 Y=-170 Add X=535  Add LINE(lw=2,fg=white) clear
X=-545 Y=-35 Add X=535  Add LINE(lw=2,fg=white) clear
X=-545 Y=160 Add X=535  Add LINE(lw=2,fg=white) clear
!X=0 Y=-35 Add Y=160  Add LINE(lw=2,fg=white) clear!

scale = 200

x =-2 y =-238text(just=centrecentre,"CALMU METER: "+cal_no + "  SUB NO: " + sub_no,ch=60,tfg=black)
x = 0 y =-240 text(just=centrecentre,"CALMU METER: "+cal_no + "  SUB NO: " + sub_no,ch=60,tfg=white)
!x = 200 text("SUB NO: "+sub_no,ch=60,tfg=white)!
x = -498 y = -198 text("SERIAL NUMBER",ch=25,tfg=black)
x = -500 y = -200 text("SERIAL NUMBER",ch=25,tfg=white)
val=request_element(src,db_offset)
val2=request_element(src,db_offset+1)
val3=request_element(src,db_offset+2)
val4=request_element(src,db_offset+3)
X =-210
display_anal(ch=20,convert_to_sno(int(val),int(val2),int(val3),int(val4)),comms_down)
! PHASE 1 displays !
x = -428 y = -148 text("RED PHASE",ch=25,tfg=black)
x = -430 y = -150 text("RED PHASE",ch=25,tfg=red)
x +=-90
y +=25
ch=20
val_pos=-250
realf=fixed2
text("VOLTAGE (kV)",ch=20,tfg=white)
val=request_element(src,db_offset+4)
display_anal(x=val_pos,string(val),comms_down)
realf=fixed2
volt = val
y +=26 text("CURRENT (A)",ch=20,tfg=white)
val=request_element(src,db_offset+5)
display_anal(x=val_pos,val,comms_down)
curr = val
realf=fixed2
y +=26 text("POWER (kVA)",ch=20,tfg=white)
val=curr*volt
display_anal(x=val_pos,val,comms_down)


! PHASE 2 displays !
x = -80 y = -148 text("YELLOW PHASE",ch=25,tfg=black)
x = -82 y = -150 text("YELLOW PHASE",ch=25,tfg=yellow)
x += -70
y +=25 
val_pos=80
realf=fixed2
text("VOLTAGE (kV)",ch=20,tfg=yellow)
val=request_element(src,db_offset+27)
display_anal(x=val_pos,val,comms_down)
realf=fixed2
volt = val
y +=26 text("CURRENT (A)",ch=20,tfg=yellow)
val=request_element(src,db_offset+28)
display_anal(x=val_pos,val,comms_down)
realf=fixed2
curr = val
y +=26 text("POWER (kVA)",ch=20,tfg=yellow)
val=curr*volt
display_anal(x=val_pos,val,comms_down)
x =-100 y=-50 text("* Yellow Phase not measured",ch = 16, tfg = yellow )

! PHASE 3 displays !
x =  277 y = -149 text("BLUE PHASE",ch=25,tfg=black)
x =  275 y = -150 text("BLUE PHASE",ch=25,tfg=blue)
x += -80
y +=25 
val_pos = 445
realf=fixed2
text("VOLTAGE (kV)",ch=20,tfg=yellow)
val=request_element(src,db_offset+29)
display_anal(x=val_pos,val,comms_down)
realf=fixed2
volt = val
y +=26 text("CURRENT (A)",ch=20,tfg=yellow)
val=request_element(src,db_offset+30)
display_anal(x=val_pos,val,comms_down)
curr = val
y +=26 text("POWER (kVA)",ch=20,tfg=yellow)
val = curr*volt
realf=fixed2
display_anal(x=val_pos,val,comms_down)
X = -525
y = 0
realf=fixed2
text(just=centreleft,"INSTANTANEOUS MVA",tfg=white)
val=request_element(src,db_offset+6)
val2=request_element(src,db_offset+7)
display_anal(x=-40,convert_to_2w(val,val2),comms_down)
realf=fixed0
y+=26 text("ACTIVE POWER (kW)",ch=20,tfg=yellow) !  used to be resitive power!
val=request_element(src,db_offset+10)
val2=request_element(src,db_offset+11)
display_anal(x=-40,convert_to_2w(val,val2),comms_down)
y +=26 text("REACTIVE POWER (kVar) ",ch=20,tfg=yellow) 
val=request_element(src,db_offset+12)
val2=request_element(src,db_offset+13)
display_anal(x=-40,convert_to_2w(val,val2),comms_down)
y +=26 text("UNITS CONSUMED   (x 10K)",ch=20,tfg=yellow)
val=request_element(src,db_offset+14)
val2=request_element(src,db_offset+15)
val_string=val
if val2 > 0 then
   val_string=string(val2)+string(val_string)
display_anal(x=-40,string(int(val_string)/2),comms_down)
y +=26 text("UNITS GENERATED   (x 10K)",ch=20,tfg=yellow)
val=request_element(src,db_offset+16)
val2=request_element(src,db_offset+17)
val_string=val
if val2 > 0 then
   val_string=string(val2)+string(val_string)
display_anal(x=-40,string(int(val_string)/2),comms_down)
y +=26 text("REACTIVE UNITS LAGGING   (x 10K)",ch=20,tfg=yellow)
val=request_element(src,db_offset+18)
val2=request_element(src,db_offset+19)
val_string = val
if val2 > 0 then
   val_string = string(val2)+string(val_string)
display_anal(x=-40,string(int(val_string)/2),comms_down)
x = 10 y= 0
text("REACTIVE UNITS LEADING   (x 10K)",ch=20,tfg=yellow)
val=request_element(src,db_offset+20)
val2=request_element(src,db_offset+21)
val_string = val
if val2 > 0 then
   val_string = string(val2)+string(val_string)
display_anal(x=500,string(int(val_string)/2),comms_down)
y+=26 text("SUPPLY FEQUENCY  (Hz)",ch=20,tfg=yellow)
val=request_element(src,db_offset+26)
realf=fixed3
display_anal(x=500,val/1000,comms_down)
realf=fixed0
y +=26 text("AVERAGE POWER FACTOR",ch=20,tfg=yellow)
val=request_element(src,db_offset+22)
realf=fixed4
display_anal(x=500,val/1000,comms_down)
realf=fixed0
y +=26 text("TIME (GMT)",ch=20,tfg=yellow)
val=request_element(src,db_offset+23)
val2=request_element(src,db_offset+24)
val3=request_element(src,db_offset+25)
val_string = ""
if val<10 then 
   val_string += "0"
val_string += val+":"
if val2<10 then 
    val_string += "0"
val_string += val2+":"
if val3<10 then 
   val_string += "0"
val_string += val3
display_anal(x=500,request_time(src,b_db_offset+128)+"  "+val_string,comms_down)
y +=26 text("LOAD PERIOD TIME (GMT)",ch=20,tfg=yellow)
val=request_element(src,db_offset+!54!40)
val2=request_element(src,db_offset+!55!41)
display_anal(x=500,convert_to_time(int(val),int(val2)),comms_down)
y +=26 text("LOAD PERIOD VALUE",ch=20,tfg=yellow)
val=request_element(src,db_offset+!61!42)
realf=fixed0
display_anal(x=500,val,comms_down)
y = 210
x=-500
text("HIST COUNT",ch=20,tfg=white)
val=request_element(src,!db_offset+33!hist_cnt)!*****************!
display_anal(x=-350,val,comms_down)
x=-225
y = 210
if (request_b_element(src,b_db_offset)==off) then
   fg = decoroff
else
   fg = flashred
if xv_thin_button(ch=18,tfg=black,"Update Meter",195) then
   begin
   change_db(src,db_address("B"+b_db_offset),on)
   change_db(src,db_address("B"+int(b_db_offset+128)),on)

   end
x=105
if (request_b_element(src,b_db_offset+!16!32)==off) then
   fg = decoroff
else
   fg = flashred
if xv_thin_button(ch=18,tfg=black,"Historical Update",195) then
   change_db(src,db_address("B"+(b_db_offset+!16!32)),on) 
x = -60
if (request_b_element(src,b_db_offset+96)==off) then
   fg = decoroff
else
   fg = flashred
if xv_thin_button(ch=18,tfg=black,"Load Survey Update",195) then
   change_db(src,db_address("B"+(b_db_offset+96)),on)   
end


object cal_trend_details(bg,fg,w,h,tbg,tfg,  
               src = source,                  
               e_db_offset=db_address,max_range=int,
               min_range=int,meter_no=int)
var start_end = loopback s_e_time_type
var help_str = string_30
begin

start_end =display_datetime
just=centrecentre

y=-150 text(ch=22,"CALMU METER " + meter_no + " TREND")
trend(x=-200,y=-100,w=400,h=200,src,e_db_offset,p4d,max_range,min_range,yes,yes,yes,start_end,red,no,help_str)
end

object main_object(just,fg,bg)
   begin 
   cal_met_detailed(source(0),1,1,1,1,1,1)!******!
   end

mimic calmu_mim_detailed = cal_met_detailed w=1140,h=550,just=centrecentre,fg=white,bg=GREY,resizable

mimic calmu_trend = cal_trend_details
w=600,h=400,just=centrecentre,fg=white,bg=GREY40,resizable

mimic = main_object  w=1140,h=550,just=centrecentre,fg=white,bg=GREY,resizable

