load mimic_libutil
load gadgets_libutil

type e_db_row_type =  db_elements(db_addr,e_value)

type b_db_row_type =  db_elements(db_addr,b_value)

type c_db_row_type = db_elements(db_addr,c_value)

type b_bool_type =  db_elements(b_value)

type alarm_row_type =  db_elements(old,alarm_status)

type main_menu_row = table (main_menu_items= string(26))

type execute_states = enum(execute = "Execute",
                           cancel = "Cancel")
type panel_item_row = table (str = string(40))

type panel_second = enum(continue="Continue")


!
******************************************************************
* SET B VALUE                                                    *
* This object writes the value of a boolean from a given server. *
******************************************************************
!

object set_b_value(db_addr=db_address,src=source,val=onoff)
var op = output  b_db_row_type
begin
if not get busy op then
   begin
   set source op = src
   set default op
   set old_default op
   set value op.db_addr = db_addr
   set old_value op.db_addr = db_addr
   set value op.b_value = val
   set old_off op.b_value
   request op
   end
end

!
******************************************************************
* SET C VALUE                                                    *
* This object writes the vaLue of a char from a given server.    *
******************************************************************
!

object set_c_value(db_addr=db_address,src=source,val=string)
var op = output c_db_row_type
begin
if not get busy op then
   begin
   set source op = src
   set default op
   set old_default op
   set value op.db_addr = db_addr
   set old_value op.db_addr = db_addr
   set value op.c_value = val
   set old_off op.c_value
   request op
   end
end


!
******************************************************************
* SET E VALUE                                                    *
* This object writes the vaLue of a real from a given server.    *
******************************************************************
!

object set_e_value(db_addr=db_address,src=source,val=real)
var op = output  e_db_row_type
begin
if not get busy op then
   begin
   set source op = src
   set default op
   set old_default op
   set value op.db_addr = db_addr
   set old_value op.db_addr = db_addr
   set value op.e_value = val
   set old_off op.e_value
   request op
   end
end


!
************************************************************
* OCB ALARM TEST                                           *
* this object checks to see if an OCB is in alarm          *
************************************************************
!

object sub_alarm(plc_offset=int,b_offset=int,src=source)=int


var sub_status = int

!PLC TYPE INPUTS !  

var plc_ab_comms_fail_ip = input    b_bool_type[2]

var plc_cancel_ip = input    b_bool_type
 
!ALARMS

ocb_alarms[1] = ocb_closed_alarm 
ocb_alarms[2] = ocb_tripped_alarm 
ocb_alarms[3] = failed_to_trip_alarm 
ocb_alarms[4] = failed_to_close_alarm 
ocb_alarms[5] = ocb_close_in_discr 
ocb_alarms[6] = ocb_trip_in_discr 
ocb_alarms[7] = ocb_close_out_discr 
ocb_alarms[8] = ocb_trip_out_discr 
!

var ocb_alarms = input alarm_row_type[8]

begin

if invalid get source plc_ab_comms_fail_ip then 
   begin

!PLC TYPE REQUESTS!

   set source plc_ab_comms_fail_ip = src
   set filter plc_ab_comms_fail_ip.db_addr = lim_ge
   set limit plc_ab_comms_fail_ip.db_addr = db_address(int(b1) + plc_offset-1 )
   set priority plc_ab_comms_fail_ip.db_addr = 15
   set persist plc_ab_comms_fail_ip 
   set mayexist plc_ab_comms_fail_ip
   request plc_ab_comms_fail_ip

!OCB REQUESTS!

   set source ocb_alarms = src
   set filter ocb_alarms.db_addr = lim_ge
   set limit ocb_alarms.db_addr = db_address(int(b1) + b_offset +1)
   set priority ocb_alarms.db_addr = 15
   set persist ocb_alarms 
   set mayexist ocb_alarms
   request ocb_alarms

end


if plc_ab_comms_fail_ip[1].b_value and plc_ab_comms_fail_ip[2].b_value then

    sub_status = 1

else if ocb_alarms[1].alarm_status == w_note or
        ocb_alarms[2].alarm_status == w_note or
        ocb_alarms[3].alarm_status == w_note or
        ocb_alarms[4].alarm_status == w_note or
        ocb_alarms[5].alarm_status == w_note or
        ocb_alarms[6].alarm_status == w_note or
        ocb_alarms[7].alarm_status == w_note or
        ocb_alarms[8].alarm_status == w_note then

            sub_status = 2

else if ocb_alarms[1].alarm_status == w_clr or
        ocb_alarms[2].alarm_status == w_clr or
        ocb_alarms[3].alarm_status == w_clr or
        ocb_alarms[4].alarm_status == w_clr or
        ocb_alarms[5].alarm_status == w_clr or
        ocb_alarms[6].alarm_status == w_clr or
        ocb_alarms[7].alarm_status == w_clr or
        ocb_alarms[8].alarm_status == w_clr then
        
	    sub_status = 3
   
else
     sub_status = 0


sub_alarm = sub_status

end

!
************************************************************
* BARCIS OCB ALARM TEST                                    *
* this object checks to see if a barcis OCB is in alarm    *
************************************************************
!

object sub_barcis_alarm(b_offset=int,src=source)=int

var sub_status = int

!ALARMS

var ocb_closed_alarm = input  alarm_row_type
var ocb_tripped_alarm = input  alarm_row_type
var failed_to_trip_alarm = input  alarm_row_type
var failed_to_close_alarm = input  alarm_row_type
var ocb_close_in_discr = input  alarm_row_type
var ocb_trip_in_discr = input  alarm_row_type
var ocb_close_out_discr = input  alarm_row_type
var ocb_trip_out_discr = input  alarm_row_type
!

var ocb_alarms = input  alarm_row_type[8]
begin


!OCB REQUESTS!

   set source ocb_alarms = src
   set filter ocb_alarms.db_addr = lim_ge
   set limit ocb_alarms.db_addr = db_address(int(b1) + b_offset +1)
   set priority ocb_alarms.db_addr = 15
   set persist ocb_alarms
   set mayexist ocb_alarms
   request ocb_alarms

if ocb_alarms[1].alarm_status == w_note or
   ocb_alarms[2].alarm_status == w_note or
   ocb_alarms[3].alarm_status == w_note or
   ocb_alarms[4].alarm_status == w_note or
   ocb_alarms[5].alarm_status == w_note or
   ocb_alarms[6].alarm_status == w_note or
   ocb_alarms[7].alarm_status == w_note or
   ocb_alarms[8].alarm_status == w_note then

            sub_status = 2

else if ocb_alarms[1].alarm_status == w_clr or
        ocb_alarms[2].alarm_status == w_clr or
        ocb_alarms[3].alarm_status == w_clr or
        ocb_alarms[4].alarm_status == w_clr or
        ocb_alarms[5].alarm_status == w_clr or
        ocb_alarms[6].alarm_status == w_clr or
        ocb_alarms[7].alarm_status == w_clr or
        ocb_alarms[8].alarm_status == w_clr then
        
	    sub_status = 3
   
else
     sub_status = 0


sub_barcis_alarm = sub_status

end


object main_object (bg,fg,w,h,tbg,tfg)
begin
end

mimic = main_object w=100,h=100,just=centrecentre,fg=white,bg=black,resizable
