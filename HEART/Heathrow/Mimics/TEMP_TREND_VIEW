!@(#)TREND_VIEW 1.53 96/07/24
!
load system_size_constants_libutil
load libutil
load wrkstn_libutil
load gadgets_libutil
load scope_com_libutil

const max_display_points = 421	! Derived from width between vertical axes. !
				! w = 840, so 420 points will display one   !
				! point every 2 pixels of width - it is     !
				! necessary to add 1 to cause a point to be !
				! displayed on BOTH axes.                   !

type keyed_two_a_values = table (
	stream_name = string(30),
	time = time("centiseconds"),
	keynumber = int,
	keyed_two_a_values_1 = real,
	keyed_two_a_values_2 = real)

type keyed_three_a_values = table (
	stream_name = string(30),
	time = time("centiseconds"),
	keynumber = int,
	keyed_three_a_values_1 = real,
	keyed_three_a_values_2 = real,
	keyed_three_a_values_3 = real)

type ta_sb_r_type_array = ta_sb_r_type[8]

type zoom_factor = enum(z2 = "50%", z4 = "25%",
			z5 = "20%", z10 = "10%",
			z20 = "5%", z50 = "2%",
			z100 = "1%")

type scroll_axis = enum(sa1 = "1",sa2 = "2", sa3 = "3",sa4 = "4",
			sa5 = "5",sa6 = "6", sa7 = "7",sa8 = "8")

type xv_scroll_axis = enum(xv_sa_all = "All",
			   xv_sa1 = "1",xv_sa2 = "2", xv_sa3 = "3",xv_sa4 = "4",
			   xv_sa5 = "5",xv_sa6 = "6", xv_sa7 = "7",xv_sa8 = "8")

type graph_style = enum(line_graph = "Line",
			point_graph = "Point",
			stepped_graph = "Stepped",
			histogram_graph = "Histogram",
			bar_graph = "Bar")

type axis_use_type = enum(not_used, axis_1, axis_2, both_axes)

type axis_type_type = enum(second,minute,hour,day,week,year)

type graphint = int(-1000,1000)

type i16 = int(1,16)
type index_type = int(1,45)

type axis_number = int(1,16)

type axis2_offset = enum(o0h = "None",
			 o1h = "60 Minutes",
			 o2h = "2 Hours",
			 o4h = "4 Hours",
			 o6h = "6 Hours",
			 o8h = "8 Hours",
			 o10h = "10 Hours",
			 o12h = "12 Hours",
			 o18h = "18 Hours",
			 o24h = "24 Hours",
			 o36h = "36 Hours",
			 o2d = "2 Days",
			 o3d = "3 Days",
			 o4d = "4 Days",
			 o5d = "5 Days",
			 o6d = "6 Days",
			 o1w = "1 Week",
			 o2w = "2 Weeks",
			 o4w = "4 Weeks",
			 o8w = "8 Weeks",
			 o12w = "12 Weeks",
			 o16w = "16 Weeks",
			 o20w = "20 Weeks",
			 o26w = "26 Weeks",
			 o1yr = "1 Year",
			 o2yr = "2 Years",
			 o3yr = "3 Years")

type axis2_periods = enum(p1h = "60 Minutes",
			 p2h = "2 Hours",
			 p4h = "4 Hours",
			 p6h = "6 Hours",
			 p8h = "8 Hours",
			 p10h = "10 Hours",
			 p12h = "12 Hours",
			 p18h = "18 Hours",
			 p24h = "24 Hours",
			 p36h = "36 Hours",
			 p2d = "2 Days",
			 p3d = "3 Days",
			 p4d = "4 Days",
			 p5d = "5 Days",
			 p6d = "6 Days",
			 p1w = "1 Week",
			 p2w = "2 Weeks",
			 p4w = "4 Weeks",
			 p8w = "8 Weeks",
			 p12w = "12 Weeks",
			 p16w = "16 Weeks",
			 p20w = "20 Weeks",
			 p26w = "26 Weeks",
			 p1yr = "1 Year",
			 p2yr = "2 Years",
			 p3yr = "3 Years")


type max_min_row_type = table (time_max = time("CENTISECONDS"),
			       time_min = time("CENTISECONDS"),
			       value_max = real,
			       value_min = real,
			       interval = int)

type trendrow_type = db_elements (sample_date, sample_value)

type trendtable_type = trendrow_type[max_display_points]

type estatstable_type = keyed_three_a_values[max_display_points]

type bstatstable_type = keyed_two_a_values[max_display_points]

type time_base_details = table(time_min = time("CENTISECONDS"),
			       duration = int)

type time_axis_detail_row = table(time_max = time("CENTISECONDS"),
				  time_min = time("CENTISECONDS"),
				  display = axis_use_type,
				  duration = difftime("CENTISECONDS"),
				  offset   = difftime("CENTISECONDS"),
				  current_mode = onoff)

type time_axis_detail_table_type = time_axis_detail_row[9]

type value_axis_detail_row = table(value_max = real,
				   value_min = real,
				   display = axis_use_type)

type value_axis_detail_table_type = value_axis_detail_row[8]

type value_row_type = table(vv = real,tv = time("CENTISECONDS"),tmax = time("CENTISECONDS"))

type edit_time_axis_details = table(time_min = time("CENTISECONDS"),
				    duration = axis2_periods,
				    current_mode = onoff)


type edit_engineering_axis_details = table(value_min = real,
					   value_max = real)

type trend_detail_row = table(address = db_address,
			      db_name = string (30),
			      source = string (14),
			      stream_name = string(30),
			      text_id = text_number,
			      line_colour = colour,
			      display = yesno,
			      use_time_axis = int,
			      use_value_axis = int,
			      points_yn = yesno,
			      added = yesno,
			      time_value = time("CENTISECONDS"),
			      value_value = real,
			      style = graph_style,
			      values = yesno)

type trend_detail_table_type = trend_detail_row[7]

type table_of_elements_row_type = db_elements(db_addr, db_name, text_code)

type table_of_elements_type = table_of_elements_row_type[15]

type db_info_row = db_elements(db_addr, area_number)

type db_samples_arh = table db_samples(stream_name = string(30),
			 db_addr = db_address,
			 time = time("centiseconds"),
			 e_value = real)

type archivetable_type = db_samples_arh(time, e_value)[max_display_points]

type config_mode_type = enum(config_idle,
			     adding_config,
			     deleting_config,
			     replacing_config)

type trend_config_row = table(name = string (40),
			      left_value = int,
			      right_value = int,
			      bottom_axis = int,
			      top_axis = int,
			      start_time = time("CENTISECONDS"),
			      duration = difftime("CENTISECONDS"),
			      offset_1 = difftime("CENTISECONDS"),
			      offset_2 = difftime("CENTISECONDS"),
			      offset_3 = difftime("CENTISECONDS"),
			      offset_4 = difftime("CENTISECONDS"),
			      offset_5 = difftime("CENTISECONDS"),
			      offset_6 = difftime("CENTISECONDS"),
			      offset_7 = difftime("CENTISECONDS"),
			      offset_8 = difftime("CENTISECONDS"),
			      tv_config = string (4),
			      max_value_1 = real,
			      min_value_1 = real,
			      units_1 = string (5),
			      max_value_2 = real,
			      min_value_2 = real,
			      units_2 = string (5),
			      max_value_3 = real,
			      min_value_3 = real,
			      units_3 = string (5),
			      max_value_4 = real,
			      min_value_4 = real,
			      units_4 = string (5),
			      max_value_5 = real,
			      min_value_5 = real,
			      units_5 = string (5),
			      max_value_6 = real,
			      min_value_6 = real,
			      units_6 = string (5),
			      max_value_7 = real,
			      min_value_7 = real,
			      units_7 = string (5),
			      max_value_8 = real,
			      min_value_8 = real,
			      units_8 = string (5),

			      identity_1 = string (40),
			      config_1 = string (6),
			      name_1 = string (30),
			      identity_2 = string (40),
			      config_2 = string (6),
			      name_2 = string (30),
			      identity_3 = string (40),
			      config_3 = string (6),
			      name_3 = string (30),
			      identity_4 = string (40),
			      config_4 = string (6),
			      name_4 = string (30),
			      identity_5 = string (40),
			      config_5 = string (6),
			      name_5 = string (30),
			      identity_6 = string (40),
			      config_6 = string (6),
			      name_6 = string (30),
			      identity_7 = string (40),
			      config_7 = string (6),
			      name_7 = string (30))

type trend_config_info_type = trend_config_row[max_trend_view_configs]
type single_trend_config_info_type = trend_config_row[2]

type sel_type = table(src = string, db_addr = db_address)

type trend_b_addr_type = enum(tb(1,max_boolean) = "B")
type trend_e_addr_type = enum(te(1,max_real) = "E")
type trend_p_addr_type = enum(tp(1,max_profile) = "P")
type trend_s_addr_type = enum(ts(1,max_schedule) = "S")

type sort_of_data_type = enum(use_eng_units = "Eng. Units",
			      use_profiles  = "Profiles",
			      use_schedules = "Schedules",
			      use_b_value   = "Archive Value (Bool)",
			      use_e_value   = "Archive Value (Real)",
			      use_max       = "Archive Max",
			      use_min       = "Archive Min",
			      use_mean      = "Archive Mean",
			      use_mins_true = "Archive Mins_True",
			      use_f_t       = "Archive F_T_Trans")


type ids = table (stream_name = string(30),
		  db_addr = db_address,
		  time = time("centiseconds"))

type table_of_archive_elements_type = ids(db_addr)[16]

type table_of_archive_keynumbers_type = keyed_three_a_values(keynumber)[16]


object util_button (w, ch, font, bg, tfg,
		label = string, pressable = int,
		repressable = int, pressed = int) = int

var help = help string (20)

begin
just=centrecentre

if not w then
   w = length(label) + ch

h = ch + 2

set text help = label + "_help"

util_button = 0
if selb then
   begin
   if pressed then
      util_button = repressable
   else
      util_button = pressable
   end

if util_button then
   rect(fg=decoron)
else
   rect(fg=bg)

if util_button or pressed then
   begin
   ! Button appears pressed !
   fg = decorshadow
   if not repressable and pressed then
      tfg = decorshadow
   end
else
   begin
   ! Button appears not to be pressed !
   fg = decorlight
   if not pressable then
      tfg = decoron
   end

text(label)

x=w/2 y=-h/2 move x-=w add y+=h add line
fg = decorshadow + decorlight - fg
move x+=w add y-=h add line
end


object l_util_button (w, ch, font, bg, tfg,
		label = string, pressable = int,
		repressable = int, pressed = int) = int

begin
if not w then
   w = length (label) + ch
x += w / 2
l_util_button = util_button (label, pressable, repressable, pressed)
end

! Popups used to display and modify operational parameters used by trend_view !

object get_data_type(row = trend_detail_row) = string
begin
 if row.stream_name <> "" then
    get_data_type = getwords(2,100, row.stream_name)
 else if row.address in SET(e) then
    get_data_type = "Eng. Unit"
 else if row.address in SET(p) then
    get_data_type = "Profile"
 else if row.address in SET(s) then
    get_data_type = "Schedule"
end

object grat_button(x,y,fg,bg, axis = int) = int

var i = int
var temp = int

begin
just = centrecentre
ch = 10
w=30
h=30

fg = decoroff
rect
box(fg=black)
fg = white
x += w/2 - 1
y -= h/2 + 1
x -= w
add
y += h
add
line
x += 1
add
x += w - 1
add
y -= h
add
line

x = 0
y = 0
w = 20
h = 20
temp = 0

if selb > 0 then
   begin
   temp = 1
   fg = decoron
   rect
   fg= black
   x += w/2
   y -= (h+1)/2
   move
   x -=w
   add
   y += h+1
   add
   line
   move
   fg = white
   x += w
   add
   y -= h + 1
   add
   line
   fg =decoroff
   end
else
   begin
   fg = decoroff
   rect
   fg= white
   x += w/2
   y -= (h+1)/2
   move
   x -=w
   add
   y += h+1
   add
   line
   move
   fg = black
   x += w
   add
   y -= h + 1
   add
   line
   fg = black
   end

clear
y = -h/2 + 4
x = -w/2 + 2
for i from 1 to 4 do
   begin
   add
   x += (w - 4)
   add
   if axis == 2 then
      line
   clear
   x = -w/2 + 2
   y += 4
   end

clear
y = -h/2 + 2
x = -w/2 + 4
for i from 1 to 4 do
   begin
   add
   y += (h - 4)
   add
   if axis == 1 then
      line
   clear
   y = -h/2 + 2
   x += 4
   end

grat_button = temp
end

object axis_button(x,y,fg,bg, axis = int) = int

var i = int
var temp = int

begin
just = centrecentre
ch = 10
w=30
h=30

fg = decoroff
rect
box(fg=black)
fg = white
x += w/2 - 1
y -= h/2 + 1
move
x -= w
add
y += h
add
line
move
x += 1
add
x += w - 1
add
y -= h
add
line

x = 0
y = 0
w = 20
h = 20
temp = 0

if selb > 0 then
   begin
   temp = 1
   fg = decoron
   rect
   fg= black
   x += w/2
   y -= (h+1)/2
   move
   x -=w
   add
   y += h+1
   add
   line
   move
   fg = white
   x += w
   add
   y -= h + 1
   add
   line
   fg =decoroff
   end
else
   begin
   fg = decoroff
   rect
   fg= white
   x += w/2
   y -= (h+1)/2
   move
   x -=w
   add
   y += h+1
   add
   line
   move
   fg = black
   x += w
   add
   y -= h + 1
   add
   line
   fg = black
   end

if axis == 1 then ! Y AXIS !
   begin
   clear
   y = -h/2 + 2
   x = 0
   add
   y += (h - 4)
   add
   line(lw = 2)
   clear
   y = -h/2 + 2
   add
   y += 5
   x -= 5
   add
   x += 10
   add
   fill
   clear
   y = h/2 -2
   x = 0
   add
   x -= 4
   y -= 5
   add
   x += 8
   add
   fill
   end
else   ! X AXIS !
   begin
   clear
   y = 0
   x = -w/2 + 2
   add
   x += (w - 4)
   add
   line(lw = 2)
   clear
   x = -w/2 + 2
   add
   y -= 5
   x += 5
   add
   y += 10
   add
   fill
   clear
   x = w/2 -2
   y = 0
   add
   y -= 5
   x -= 5
   add
   y += 10
   add
   fill
   end
clear

axis_button = temp
end

object zoom_button(x,y,fg,bg,num = int) = int

var temp = int
var zoom_panel = panel  zoom_factor
var xx = int
var yy = int
var temp_zoom = zoom_factor
var z_str = string (6)

begin
z_str = ""
temp = num
xx = x
yy = y
just = centrecentre
ch = 10
w=30
h=30

   fg = decoroff
   rect
   box(fg=black)
   fg = white
   x += w/2 - 1
   y -= h/2 + 1
   move
   x -= w
   add
   y += h
   add
   line
   move
   x += 1
   add
   x += w - 1
   add
   y -= h
   add
   line

   x = 0
   y = 0
   w = 20
   h = 20

if selb > 0 then
   begin
   fg = decoron
   rect
   fg= black
   x += w/2
   y -= (h+1)/2
   move
   x -=w
   add
   y += h+1
   add
   line
   move
   fg = white
   x += w
   add
   y -= h + 1
   add
   line
   set unpinned zoom_panel
   case num of
   2 set value zoom_panel = z2
   4 set value zoom_panel = z4
   5 set value zoom_panel = z5
   10 set value zoom_panel = z10
   20 set value zoom_panel = z20
   50 set value zoom_panel = z50
   100 set value zoom_panel = z100
   default
      begin
      end
   request zoom_panel
   end
else
   begin
   fg = decoroff
   rect
   fg= white
   x += w/2
   y -= (h+1)/2
   move
   x -=w
   add
   y += h+1
   add
   line
   move
   fg = black
   x += w
   add
   y -= h + 1
   add
   line
   end

if valid zoom_panel then
   begin
   temp_zoom = zoom_panel
   set invalid zoom_panel
   case temp_zoom of
   z2 temp = 2
   z4 temp = 4
   z5 temp = 5
   z10 temp = 10
   z20 temp = 20
   z50 temp = 50
   z100 temp = 100
   default
      begin
      end
   end

x = xx
y = yy
case temp of
2 z_str = "50%"
4 z_str = "25%"
5 z_str = "20%"
10 z_str = "10%"
20 z_str = "5%"
50 z_str = "2%"
100 z_str = "1%"
default
   begin
   end

zoom_button = temp
text(z_str)
end

object num_button(x,y,fg,bg,num = int) = int

var temp = int
var axis_panel = panel  xv_scroll_axis
var xx = int
var yy = int

begin
xx = x
yy = y
just = centrecentre
temp = num
w=30
h=30
   fg = decoroff
   rect
   box(fg=black)
   fg = white
   x += w/2 - 1
   y -= h/2 + 1
   move
   x -= w
   add
   y += h
   add
   line
   move
   x += 1
   add
   x += w - 1
   add
   y -= h
   add
   line

   x = 0
   y = 0
   w = 20
   h = 20
if selb > 0 then
   begin
   fg = decoron
   rect
   fg= black
   x += w/2
   y -= (h+1)/2
   move
   x -=w
   add
   y += h+1
   add
   line
   move
   fg = white
   x += w
   add
   y -= h + 1
   add
   line
   set unpinned axis_panel
   set title axis_panel = "Axis"
   set value axis_panel = xv_scroll_axis(num)
   request axis_panel
   end
else
   begin
   fg = decoroff
   rect
   fg= white
   x += w/2
   y -= (h+1)/2
   move
   x -=w
   add
   y += h+1
   add
   line
   move
   fg = black
   x += w
   add
   y -= h + 1
   add
   line
   end

if valid axis_panel then
   begin
   temp = int(axis_panel)
   set invalid axis_panel
   end
x = xx
y = yy
if temp > 0 then
   begin
   ch = 12
   text(temp)
   end
else
   begin
   ch = 10
   text("All")
   end
num_button = temp
end

object c_button(fg,b_state = onoff,sel = sel_type) = int
begin

   just=centrecentre x=21 y=11
   w=40 h=20
   c_button = selb

   if c_button then
      begin
      if valid sel or b_state == on then
      rect(fg=decoron)
      end

   w=34 h=14 rect
   box(fg = black)

   if (c_button and valid sel) or
       b_state == on then
      fg=decorshadow
   else
      fg=decorlight

   x=42 y=0 move x=0 add y=22 add line
   fg = decorshadow + decorlight - fg
   move x=42 add y=0 add line

end

object find_selection_from_display(src = string,
				   tt = table_of_elements_type,
				   sel = sel_type) = int
var i = int
begin

   find_selection_from_display = 0

   i = 0
   while i <= lastrow tt do
      begin
      if src == sel.src and tt[i].db_addr == sel.db_addr then
	 begin
	 find_selection_from_display = i
	 i = lastrow tt
	 end
      i ++
      end

end


object get_source_from_ident(id = string_40) = string_40
begin
   get_source_from_ident = getword(1, id)
end

object get_stream_from_ident(id = string_40) = string_40
var i = int
var start = int
var ed = int
begin

   start = 0
   ed = 0

   for i from 1 to nchars(id) do
      begin
      if getchar(i, id) == " " and not start then
	 start = i

      if getchar(i, id) == ":" then
	 ed = i
      end

   if start and ed then
      begin
      get_stream_from_ident = getchars(start+1, ed-start-1, id)
      if not nwords(get_stream_from_ident) then
	 get_stream_from_ident = ""
      end
   else
      get_stream_from_ident = ""
end

object get_address_from_ident(id = string_40) = db_address
var i = int
var colon = int
begin

   colon = 0

   for i from 1 to nchars(id) do
      begin
      if getchar(i,id) == ":" then
	 colon = i
      end
   if colon then
      get_address_from_ident = db_address(getchars(colon + 1,nchars(id),id))
   else
      get_address_from_ident = db_invalid

end


object help_area (x, y, w, h, hstr = string (30))
var helpstr = help string (30)
begin
helpstr = hstr
end


object dv(w,h,fg,trend_details = trend_detail_table_type) = trend_detail_table_type

var i = int
var j = int
var k = int
var nfc = int
var n_added = int
var using_archives = yesno
var stream_name = string(30)

var d_ttbl = loopback table_of_elements_type
var sort_of_data = loopback sort_of_data_type
var old_src = loopback source
var started = loopback byte
var selection = loopback sel_type
var tb_state = yesno

var p_src = panel  source
var display_b_addr = panel  trend_b_addr_type
var display_e_addr = panel  trend_e_addr_type
var display_p_addr = panel  trend_p_addr_type
var display_s_addr = panel  trend_s_addr_type
var data_panel = panel  sort_of_data_type

var teng = input  table_of_elements_type
var tprof = input  table_of_elements_type
var tsched = input  table_of_elements_type
var tarch_b = input  table_of_elements_type
var tarch_e = input  table_of_elements_type
var tstats_b = input  table_of_elements_type
var tstats_e = input  table_of_elements_type
var helpstr = help string(30)
var error_text = string

begin
   error_text = ""

   helpstr = "line_select"

   ! Add window decorations !

   fg = decoroff
   rect(w = 565,h = 30)
   rect(w = 10,h = 425)
   rect(x = 550,w = 10,h = 425)
   rect(y = 320,w = 565,h = 100)
   box(y = 30,x = 10,w = 540,h = 290,fg = black)


   ! Initialise internal data !
   if invalid old_src then
      begin
      old_src = source(0)
      set persist teng
      set mustexist teng.db_addr
      set mayexist teng.db_name
      set mustexist teng.trend_exists
      set max_rows teng = 15
      set persist tprof
      set mustexist tprof.db_addr
      set mayexist tprof.db_name
      set max_rows tprof = 15
      set persist tsched
      set mustexist tsched.db_addr
      set mayexist tsched.db_name
      set max_rows tsched = 15
      set persist tarch_b
      set mustexist tarch_b.db_addr
      set mayexist tarch_b.db_name
      set mustexist tarch_b.archive_exists
      set max_rows tarch_b = 15
      set persist tarch_e
      set mustexist tarch_e.db_addr
      set mayexist tarch_e.db_name
      set mustexist tarch_e.archive_exists
      set max_rows tarch_e = 15
      set persist tstats_b
      set mustexist tstats_b.db_addr
      set mayexist tstats_b.db_name
      set mustexist tstats_b.stats_exists
      set max_rows tstats_b = 15
      set persist tstats_e
      set mustexist tstats_e.db_addr
      set mayexist tstats_e.db_name
      set mustexist tstats_e.stats_exists
      set max_rows tstats_e = 15
      set x display_p_addr = 100
      set y display_p_addr = 100
      set title display_p_addr = "Enter Search Address."
      set unpinned display_p_addr
      set x display_s_addr = 100
      set y display_s_addr = 100
      set title display_s_addr = "Enter Search Address."
      set unpinned display_s_addr
      set x display_e_addr = 100
      set y display_e_addr = 100
      set title display_e_addr = "Enter Search Address."
      set unpinned display_e_addr
      set x data_panel = 200
      set y data_panel = 100
      set title data_panel = "Data type"
      set unpinned data_panel
      set x p_src = 200
      set y p_src = 100
      set title p_src = "Sources"
      set unpinned p_src
      end

    if valid p_src then
       begin
       if old_src <> p_src then
	  begin
	  set invalid teng
	  set invalid tprof
	  set invalid tsched
	  set invalid tarch_b
	  set invalid tarch_e
	  set invalid tstats_b
	  set invalid tstats_e
	  set invalid d_ttbl
	  set invalid started
	  old_src = p_src
	  end
       set invalid p_src
       end

   if valid data_panel then
      begin
      sort_of_data = data_panel
      set invalid data_panel
      end

   if invalid sort_of_data then
      sort_of_data = use_eng_units

   if (sort_of_data == use_b_value) or
      (sort_of_data == use_e_value) or
      (sort_of_data == use_mean) or
      (sort_of_data == use_max) or
      (sort_of_data == use_min) or
      (sort_of_data == use_mins_true) or
      (sort_of_data == use_f_t) then
      begin
      using_archives = yes
      end
   else
      begin
      using_archives = no
      end
   
   stream_name = old_src + " " + getword(2, sort_of_data)

   case sort_of_data of
   use_eng_units
      d_ttbl = teng
   use_profiles
      d_ttbl = tprof
   use_schedules
      d_ttbl = tsched
   use_b_value
      d_ttbl = tarch_b
   use_e_value
      d_ttbl = tarch_e
   use_mins_true
      d_ttbl = tstats_b
   use_f_t
      d_ttbl = tstats_b
   default
      d_ttbl = tstats_e

   ! Add buttons !

   y = 337 w = 100 bg = decoroff

   x = 10
   if l_util_button("Display", 1, 1,
		get busy display_e_addr or get busy display_p_addr
     		or get busy display_s_addr) then
      begin
      case sort_of_data of
      use_profiles
	 begin
	 request display_p_addr
	 end
      use_schedules
	 begin
	 request display_s_addr
	 end
      use_b_value
	 begin
	 request display_b_addr
	 end
      use_mins_true
	 begin
	 request display_b_addr
	 end
      use_f_t
	 begin
	 request display_b_addr
	 end
      default
	 begin
	 request display_e_addr
	 end
   end

   x = 112
   if l_util_button("Next", lastrow d_ttbl == 15, 0, 0) then
      begin
      case sort_of_data of
      use_eng_units
	 begin
	 set filter teng.db_addr = lim_ge_le2
	 set limit teng.db_addr = teng[lastrow teng].db_addr
	 set limit2 teng.db_addr = max e
	 set invalid teng
	 end
      use_profiles
	 begin
	 set filter tprof.db_addr = lim_ge_le2
	 set limit tprof.db_addr = tprof[lastrow tprof].db_addr
	 set limit2 tprof.db_addr = max p
	 set invalid tprof
	 end
      use_schedules
	 begin
	 set filter tsched.db_addr = lim_ge_le2
	 set limit tsched.db_addr = tsched[lastrow tsched].db_addr
	 set limit2 tsched.db_addr = max s
	 set invalid tsched
	 end
      use_b_value
	 begin
	 set filter tarch_b.db_addr = lim_ge_le2
	 set limit tarch_b.db_addr = tarch_b[lastrow tarch_b].db_addr
	 set limit2 tarch_b.db_addr = max b
	 set invalid tarch_b
	 end
      use_e_value
	 begin
	 set filter tarch_e.db_addr = lim_ge_le2
	 set limit tarch_e.db_addr = tarch_e[lastrow tarch_e].db_addr
	 set limit2 tarch_e.db_addr = max e
	 set invalid tarch_e
	 end
      use_mins_true
	 begin
	 set filter tstats_b.db_addr = lim_ge_le2
	 set limit tstats_b.db_addr = tstats_b[lastrow tstats_b].db_addr
	 set limit2 tstats_b.db_addr = max b
	 set invalid tstats_b
	 end
      use_f_t
	 begin
	 set filter tstats_b.db_addr = lim_ge_le2
	 set limit tstats_b.db_addr = tstats_b[lastrow tstats_b].db_addr
	 set limit2 tstats_b.db_addr = max b
	 set invalid tstats_b
	 end
      default    ! using real stats !
	 begin
	 set filter tstats_e.db_addr = lim_ge_le2
	 set limit tstats_e.db_addr = tstats_e[lastrow tstats_e].db_addr
	 set limit2 tstats_e.db_addr = max e
	 set invalid tstats_e
	 end
      set invalid selection
      end


   x = 214
   if l_util_button("Previous", 1, 0, 0) then
      begin
      case sort_of_data of
      use_eng_units
	 begin
	 if d_ttbl[1].db_addr <> min e then
	    begin
	    set filter teng.db_addr = lim_prev_ge2
	    set limit teng.db_addr = teng[1].db_addr
	    set limit2 teng.db_addr = min e
	    set invalid teng
	    set invalid selection
	    end
	 end
      use_profiles
	 begin
	 if d_ttbl[1].db_addr <> min p then
	    begin
	    set filter tprof.db_addr = lim_prev_ge2
	    set limit tprof.db_addr = tprof[1].db_addr
	    set limit2 tprof.db_addr = min p
	    set invalid tprof
	    set invalid selection
	    end
	 end
      use_schedules
	 begin
	 if d_ttbl[1].db_addr <> min s then
	    begin
	    set filter tsched.db_addr = lim_prev_ge2
	    set limit tsched.db_addr = tsched[1].db_addr
	    set limit2 tsched.db_addr = min s
	    set invalid tsched
	    set invalid selection
	    end
	 end
      use_b_value
	 begin
	 if d_ttbl[1].db_addr <> min b then
	    begin
	    set filter tarch_b.db_addr = lim_prev_ge2
	    set limit tarch_b.db_addr = tarch_b[1].db_addr
	    set limit2 tarch_b.db_addr = min b
	    set invalid tarch_b
	    set invalid selection
	    end
	 end
      use_e_value
	 begin
	 if d_ttbl[1].db_addr <> min e then
	    begin
	    set filter tarch_e.db_addr = lim_prev_ge2
	    set limit tarch_e.db_addr = tarch_e[1].db_addr
	    set limit2 tarch_e.db_addr = min e
	    set invalid tarch_e
	    set invalid selection
	    end
	 end
      default    ! using archive stats !
	 begin
	 if d_ttbl[1].db_addr <> min e then
	    begin
	    set filter tstats_e.db_addr = lim_prev_ge2
	    set limit tstats_e.db_addr = tstats_e[1].db_addr
	    set limit2 tstats_e.db_addr = min e
	    set invalid tstats_e
	    set invalid selection
	    end
	 end
      end

   x = 400
   y = 369
   if l_util_button(w=150, sort_of_data, 1, 1, get busy data_panel) then
      begin
      request data_panel
      end
   help_area("data_type")

   y = 341
   if l_util_button(old_src, 1, 1, get busy p_src) then
      begin
      set p_src = old_src
      request p_src
      end

   x = 10 y = 360

   for i from 1 to 7 do
      begin
      fg = trend_details[i].line_colour

      if c_button(onoff(trend_details[i].added),selection) then
	 begin
	 if valid selection then
	    begin
	    j = find_selection_from_display(old_src,d_ttbl,selection)
	    if j then
	       begin
	       dv = trend_details
	       dv[i].source = selection.src
	       if using_archives then
		  dv[i].stream_name = old_src + " " + getword(2,sort_of_data)
	       else
		  dv[i].stream_name = ""
	       dv[i].address = selection.db_addr
	       dv[i].db_name = d_ttbl[j].db_name
	       dv[i].text_id = d_ttbl[j].text_code
	       dv[i].use_time_axis = 1
	       dv[i].use_value_axis = 1
	       dv[i].points_yn = no
	       dv[i].added = yes
	       dv[i].display = yes
	       dv[i].time_value = min time
	       dv[i].value_value = 9999
	       end
	    set invalid selection
	    end
	 else if trend_details[i].added == yes then
	    begin
	    dv = trend_details
	    dv[i].source = ""
	    dv[i].stream_name = ""
	    dv[i].address = db_invalid
	    dv[i].db_name = ""
	    dv[i].text_id = 0
	    dv[i].use_time_axis = 0
	    dv[i].use_value_axis = 0
	    dv[i].points_yn = no
	    dv[i].display = yes
	    dv[i].added = no
	    end
	 end
      x += 43
      end

   ! Set up display address !

   if valid display_e_addr then
      begin
      case sort_of_data of
	 use_eng_units
	    begin
	    set filter teng.db_addr = lim_ge_le2
	    set limit teng.db_addr = db_address(string(display_e_addr))
	    set limit2 teng.db_addr = max e
	    end
	 use_e_value
	    begin
	    set filter tarch_e.db_addr = lim_ge_le2
	    set limit tarch_e.db_addr = db_address(string(display_e_addr))
	    set limit2 tarch_e.db_addr = max e
	    end
	 default
	    begin
	    set filter tstats_e.db_addr = lim_ge_le2
	    set limit tstats_e.db_addr = db_address(string(display_e_addr))
	    set limit2 tstats_e.db_addr = max e
	    end
      set invalid display_e_addr
      set invalid selection
      end

   if valid display_b_addr then
      begin
      case sort_of_data of
	 use_b_value
	    begin
	    set filter tarch_b.db_addr = lim_ge_le2
	    set limit tarch_b.db_addr = db_address(string(display_b_addr))
	    set limit2 tarch_b.db_addr = max b
	    end
	 default
	    begin
	    set filter tstats_b.db_addr = lim_ge_le2
	    set limit tstats_b.db_addr = db_address(string(display_b_addr))
	    set limit2 tstats_b.db_addr = max b
	    end
      set invalid display_b_addr
      set invalid selection
      end

   if valid display_p_addr then
      begin
      set filter tprof.db_addr = lim_ge_le2
      set limit tprof.db_addr = db_address(string(display_p_addr))
      set limit2 tprof.db_addr = max p
      set invalid display_p_addr
      set invalid selection
      end

   if valid display_s_addr then
      begin
      set filter tsched.db_addr = lim_ge_le2
      set limit tsched.db_addr = db_address(string(display_s_addr))
      set limit2 tsched.db_addr = max s
      set invalid display_s_addr
      set invalid selection
      end

   if invalid started then
      begin

      set source teng = old_src
      set filter teng.db_addr = lim_ge_le2
      set limit teng.db_addr = min e
      set limit2 teng.db_addr = max e

      set source tprof = old_src
      set filter tprof.db_addr = lim_ge_le2
      set limit tprof.db_addr = min p
      set limit2 tprof.db_addr = max p

      set source tsched = old_src
      set filter tsched.db_addr = lim_ge_le2
      set limit tsched.db_addr = min s
      set limit2 tsched.db_addr = max s

      set source tarch_b = old_src
      set filter tarch_b.db_addr = lim_ge_le2
      set limit tarch_b.db_addr = min b
      set limit2 tarch_b.db_addr = max b

      set source tarch_e = old_src
      set filter tarch_e.db_addr = lim_ge_le2
      set limit tarch_e.db_addr = min e
      set limit2 tarch_e.db_addr = max e

      set source tstats_b = old_src
      set filter tstats_b.db_addr = lim_ge_le2
      set limit tstats_b.db_addr = min b
      set limit2 tstats_b.db_addr = max b

      set source tstats_e = old_src
      set filter tstats_e.db_addr = lim_ge_le2
      set limit tstats_e.db_addr = min e
      set limit2 tstats_e.db_addr = max e

      started = 1
      end

   ! Display table !

   text(x = 20,y = 10,"Identity")
   text(x = 120,y = 10,"Db Name")
   text(x = 450,y = 10,"Lines")

   y = 35

   if valid d_ttbl then
      begin
      for i from 1 to lastrow d_ttbl do
	 begin
	 k = find_selection_from_display(old_src,d_ttbl,selection)

	 if i == k then
	    begin
	    rect(fg = yellow,x = 10,w = 540,h = ch)
	    box(fg = black,x = 10,w = 540,h = ch)
	    end

	 if selb(x = 10,w = 520,h = ch) then
	    begin
	    j = 1
	    nfc = 0
	    n_added = 0
	    while j <= 7 do
	       begin
	       if trend_details[j].added == no then
		  begin
		  if not(nfc) then
		  nfc = j
		  end
	       else
		  begin
		  if d_ttbl[i].db_addr == trend_details[j].address and
		     old_src == source(trend_details[j].source) then
		     begin
		     n_added ++
		     end
		  end
	       j ++
	       end
	    if n_added >= 4 then
	       error_text = "Can only assign four lines to an address"
	    else
	       begin
	       set default selection
	       selection.src = old_src
	       selection.db_addr = d_ttbl[i].db_addr
	       end
	    end

	 if d_ttbl[i].db_addr <> db_invalid then
	    begin
	    text(x = 20,d_ttbl[i].db_addr)
	    text(x = 120,d_ttbl[i].db_name)
	    end

	 j = 0
	 n_added = 0
	 while j <= 7 do
	    begin
	    if trend_details[j].added == yes and
		 d_ttbl[i].db_addr == trend_details[j].address then
 	       begin
	       if old_src == source(trend_details[j].source) then
		  begin
		  n_added ++
		  rect(x = 430 + n_added * 22,
		     fg = trend_details[j].line_colour,w = 20,h = ch)
		  box(x = 430 + n_added * 22,fg = black,w = 20,h = ch)
		  end
	       end
	    j ++
	    end
	 y += ch + 5
	 end
      end

   ! Request trend and profile information !

   case sort_of_data of
   use_eng_units
      begin
      request teng
      sa = get noaccessible teng
      end
   use_profiles
      begin
      request tprof
      sa = get noaccessible tprof
      end
   use_schedules
      begin
      request tsched
      sa = get noaccessible tsched
      end
   use_b_value
      begin
      request tarch_b
      sa = get noaccessible tarch_b
      end
   use_e_value
      begin
      request tarch_e
      sa = get noaccessible tarch_e
      end
   use_mins_true
      begin
      request tstats_b
      sa = get noaccessible tstats_b
      end
   use_f_t
      begin
      request tstats_b
      sa = get noaccessible tstats_b
      end
   default
      begin
      request tstats_e
      sa = get noaccessible tstats_e
      end

   x=275 y=100 ch=12 just = centrecentre

   if invalid d_ttbl then
      xv_message("Please Wait", "Outstanding Server Request")
   else if sa then
      xv_message("Sorry", "Access Denied")
   else if (error_text <> "") then
      xv_message("Sorry", error_text)
end


mimic trend_details_menu = dv w=560,h=390,resizable


object l_conf(w,h,bg,
	trend_details = trend_detail_table_type) = trend_detail_table_type

var style_panel = panel  graph_style
var v_axis_panel = panel  scroll_axis ! select the axis !
var t_axis_panel = panel  scroll_axis ! select the axis !
var i = int
var xx = int
var which_line = loopback int
var helpstr = help string(30)

begin
   helpstr = "line_config"
   if valid t_axis_panel then
      begin
      l_conf = trend_details
      l_conf[which_line].use_time_axis = int(t_axis_panel) + 1
      set invalid t_axis_panel
      end

   if valid style_panel then
      begin
      l_conf = trend_details
      l_conf[which_line].style = style_panel
      set invalid style_panel
      end

   if valid v_axis_panel then
      begin
      l_conf = trend_details
      l_conf[which_line].use_value_axis = int(v_axis_panel) + 1
      set invalid v_axis_panel
      end

   text(x = 10,y = 26,"Line")
   text(x = 60,y = 26,"Identity")
   text(x = 220,y = 26,"Stream")
   text(x = 420,y = 10,"Value")
   text(x = 420,y = 26,"Axis")
   text(x = 470,y = 10,"Time")
   text(x = 470,y = 26,"Axis")
   text(x = 570,y = 10,"Plot")
   text(x = 570,y = 26,"Style")
   text(x = 650,y = 10,"Display")
   text(x = 650,y = 26,"Values")
   text(x = 740,y = 10,"Display")
   text(x = 740,y = 26,"Points")
   text(x = 830,y = 10,"Display")
   text(x = 830,y = 26,"Trend")
   y = 50
   x = 10
   for i from 1 to lastrow trend_details do
      begin
      if trend_details[i].added == yes then
	 begin
	 rect(fg = trend_details[i].line_colour,w = 20,h = ch)
	 box(w = 20,h = ch,fg = black)
	 text(x = 60,font = font_bold, trend_details[i].source + ":" +
	     trend_details[i].address)
	 text(x = 220,font = font_bold, get_data_type(trend_details[i]))
	 if l_util_button(x = 420,y =y+8 ,w = 40, bg=decoroff,
	      trend_details[i].use_value_axis,
	       1, 1, (get busy t_axis_panel) or (get busy style_panel)
	       or ( get busy v_axis_panel)) then
	    begin
	    set unpinned v_axis_panel
	    set value v_axis_panel =
		  scroll_axis(trend_details[i].use_value_axis -1)
	    set title v_axis_panel = "Value Axis"
	    request v_axis_panel
	    which_line = i
	    end

	 if l_util_button(x = 470,y =y+8 ,w = 40, bg=decoroff,
	      trend_details[i].use_time_axis,
	       1, 1, (get busy t_axis_panel) or (get busy style_panel)
	       or ( get busy v_axis_panel)) then
	    begin
	    set unpinned t_axis_panel
	    set value t_axis_panel =
		  scroll_axis(trend_details[i].use_time_axis -1)
	    set title t_axis_panel = "Time Axis"
	    request t_axis_panel
	    which_line = i
	    end

	 if l_util_button(x = 520,y =y+8 ,w = 105, bg=decoroff,
	      trend_details[i].style,
	       1, 1, (get busy t_axis_panel) or (get busy style_panel)
	       or ( get busy v_axis_panel)) then
	    begin
	    set unpinned style_panel
	    set value style_panel = trend_details[i].style
	    request style_panel
	    which_line = i
	    end

	 if xv_toggle_button(x = 635,fg = decoroff,
	     trend_details[i].values,"Yes","No") then
	    begin
	    if trend_details[i].values <> yes then
	       begin
	       l_conf = trend_details
	       l_conf[i].values = yes
	       end
	    end
	 else
	    begin
	    if trend_details[i].values <> no then
	       begin
	       l_conf = trend_details
	       l_conf[i].values = no
	       end
	    end

	 if xv_toggle_button(x = 725,fg = decoroff,
	     trend_details[i].points_yn,"Yes","No") then
	    begin
	    if trend_details[i].points_yn <> yes then
	       begin
	       l_conf = trend_details
	       l_conf[i] .points_yn= yes
	       end
	    end
	 else
	    begin
	    if trend_details[i].points_yn <> no then
	       begin
	       l_conf = trend_details
	       l_conf[i].points_yn = no
	       end
	    end

	 if xv_toggle_button(x = 815,fg = decoroff,
	     trend_details[i].display,"Yes","No") then
	    begin
	    if trend_details[i].display <> yes then
	       begin
	       l_conf = trend_details
	       l_conf[i].display = yes
	       end
	    end
	 else
	    begin
	    if trend_details[i].display <> no then
	       begin
	       l_conf = trend_details
	       l_conf[i].display = no
	       end
	    end

	 y += ch + 5
	 end
      end
end

mimic line_config_menu = l_conf w = 910,h = 195,bg = decoroff,resizable

! VALUE AXIS CONFIG POPUP !

object ead(w,h,value_axis_detail = value_axis_detail_table_type,
	   trend_details     = trend_detail_table_type) =
	   value_axis_detail_table_type

var i = i16
var j = i16
var va = loopback value_axis_detail_table_type
var edit_ead = panel  edit_engineering_axis_details
var initialise = loopback byte
var axis_no = loopback int
var error_text = string
var error_text1 = string
var helpstr = help string(30)

begin
   helpstr="ead_help"
   realf = general7
   error_text = ""
   error_text1 = ""
   if invalid initialise then
      begin
      set default initialise
      axis_no = 1
      va = value_axis_detail
      end

   rect(fg = decoroff,h=300,w=540)
   rect(fg = white,w = 520,h = 160, x = 10,y = 30)
   box(fg = black,w = 520,h = 160, x = 10,y = 30)
   fg = black
   y = 5
   text(x=20,"Axis")
   text(x=90,"Value Max")
   text(x=240,"Value Min")
   text(x=320,"Display")
   text(x=390,"Lines")
   fg = decoroff
   y = 38
   x = 10
   w = 520
   h = ch

   for i from 1 to 8 do
      begin
      if selb(y=((i-1) * (ch+5))+38,w=500,h=ch) then
	 begin
	 axis_no = i
	 if get busy edit_ead then
	    begin
	    set title edit_ead = "Edit Axis " + axis_no
	    request edit_ead
	    end
	 end
      end

   rect(fg = yellow, y=((axis_no -1)*(ch+5))+38)
   box(fg = black, y=((axis_no -1)*(ch+5))+38)

   y=209 w=120 h=16 bg=decoroff
   x = 10
   if l_util_button("Edit Axis",1,1, get busy edit_ead) then
      begin
      if valid va[axis_no].value_max and
	       valid va[axis_no].value_min then
	    begin
	    set edit_ead.value_max = va[axis_no].value_max
	    set edit_ead.value_min = va[axis_no].value_min
	    end
	 else
	    begin
	    set edit_ead.value_max = 1000
	    set edit_ead.value_min = 0
	    end
	 set title edit_ead = "Edit Axis " + axis_no
	 set unpinned edit_ead
	 request edit_ead
      end
   help_area ("ead_edit_axis_help")

   x += 122
   if l_util_button("Display Right",1,0,0) then
      begin
      if (va[axis_no].display == axis_1) or
	     (va[axis_no].display == both_axes) then
	 va[axis_no].display = both_axes
      else
	 va[axis_no].display = axis_2
      for i from 1 to 8 do
	 begin
	 if i <> axis_no then
	    begin
	    if va[i].display == axis_2 then
	       va[i].display = not_used
	    else if va[i].display == both_axes then
	       va[i].display = axis_1
	    end
	 end
      end
   help_area ("ead_display_rl_help")

   x += 122
   if l_util_button("Display Left",1,0,0) then
      begin
      if (va[axis_no].display == axis_2) or
	     (va[axis_no].display == both_axes) then
	 va[axis_no].display = both_axes
      else
	 va[axis_no].display = axis_1
      for i from 1 to 8 do
	 begin
	 if i <> axis_no then
	    begin
	    if va[i].display == axis_1 then
	       va[i].display = not_used
	    else if va[i].display == both_axes then
	       va[i].display = axis_2
	    end
	 end
      end
   help_area ("ead_display_rl_help")

   if valid edit_ead then
      begin
      if edit_ead.value_max > edit_ead.value_min then
	 begin
	 va[axis_no].value_max = edit_ead.value_max
	 va[axis_no].value_min = edit_ead.value_min
	 set invalid edit_ead
	 end
      else
	 begin
	 error_text1 = "Error"
	 error_text = "Max value must be > min value"
	 end
      end

   y = 38
   for i from 1 to 8 do
      begin
      x = 35
      text(just=topright,i)

      x +=130
      text(just = topright,va[i].value_max)
      x += 140
      text(just = topright,va[i].value_min)
      x += 15

      if va[i].display <> not_used then
	 begin
	 rect(w = 50,h = ch,fg = decoroff)
	 box(w=50,h=ch,fg=black)
	 end

      x += 8
      if va[i].display == both_axes then
	 text(ch = 12,"Both")
      else if va[i].display == axis_1 then
	 text(ch = 12,"Left")
      else if va[i].display == axis_2 then
	 text(ch = 12,"Right")

      y += ch+5
      end

   ! Display little boxes !
   y = 38
   for i from 1 to 8 do
      begin
      x = 390
      for j from 1 to 7 do
	 begin
	 if trend_details[j].use_value_axis == i then
	    begin
	    rect(w = ch,h = ch,fg = trend_details[j].line_colour)
	    box(w = ch,h = ch,fg = black)
	    x += ch + 5
	    end
	 end
      y += ch + 5
      end

   if error_text <> "" then
      xv_message(x=270,y=115,ch=12,just = centrecentre,error_text1,error_text)
   ead = va
end

mimic engineering_axis_details = ead w = 540,h = 230,resizable

object convert_time_diff_to_str(tdiff = difftime("CENTISECONDS")) = string
var n_secs = int
var temp = string
var neg = int

begin
   n_secs = int(tdiff)
   if n_secs< 0 then
      neg = 1
   else
      neg = 0
   n_secs = abs(n_secs)

   case n_secs of
   0 temp = "None"
   3600 temp = "1 Hour"
   7200 temp = "2 Hours"
   14400 temp = "4 Hours"
   21600 temp = "6 Hours"
   28800 temp = "8 Hours"
   36000 temp = "10 Hours"
   43200 temp = "12 Hours"
   64800 temp = "18 Hours"
   86400 temp = "24 Hours"
   129600 temp = "36 Hours"
   172800 temp = "2 Days"
   259200 temp = "3 Days"
   345600 temp = "4 Days"
   432000 temp = "5 Days"
   518400 temp = "6 Days"
   604800 temp = "1 Week"
   1209600 temp = "2 Weeks"
   2419200 temp = "4 Weeks"
   4838400 temp = "8 Weeks"
   7257600 temp = "12 Weeks"
   9676800 temp = "16 Weeks"
   12096000 temp = "20 Weeks"
   15724800 temp = "26 Weeks"
   31536000 temp = "1 Year"
   63072000 temp = "2 Years"
   94608000 temp = "3 Years"
   default temp = "?"

   if neg == 1 then
      temp = "- " + temp
   convert_time_diff_to_str = temp
end

object convert_period_to_offset(period = axis2_offset) = int
var n_secs = int
begin
   case period of
   o0h n_secs = 0
   o1h n_secs = 3600
   o2h n_secs = 7200
   o4h n_secs = 14400
   o6h n_secs = 21600
   o8h n_secs = 28800
   o10h n_secs = 36000
   o12h n_secs = 12 * 3600
   o18h n_secs = 18 * 3600
   o24h n_secs = 24 * 3600
   o36h n_secs = 36 * 3600
   o2d n_secs = 2 * 86400
   o3d n_secs = 3 * 86400
   o4d n_secs = 4 * 86400
   o5d n_secs = 5 * 86400
   o6d n_secs = 6 * 86400
   o1w n_secs = 604800
   o2w n_secs = 2 * 604800
   o4w n_secs = 4 * 604800
   o8w n_secs = 8 * 604800
   o12w n_secs = 12 * 604800
   o16w n_secs = 16 * 604800
   o20w n_secs = 20 * 604800
   o26w n_secs = 26 * 604800
   o1yr n_secs = 31536000
   o2yr n_secs = 2 * 31536000
   o3yr n_secs = 3 * 31536000
   default begin end

   convert_period_to_offset = n_secs
end

object convert_period_to_duration(period = axis2_periods) = int
var n_secs = int
begin
   case period of
   p1h n_secs = 3600
   p2h n_secs = 7200
   p4h n_secs = 14400
   p6h n_secs = 21600
   p8h n_secs = 28800
   p10h n_secs = 36000
   p12h n_secs = 12 * 3600
   p18h n_secs = 18 * 3600
   p24h n_secs = 24 * 3600
   p36h n_secs = 36 * 3600
   p2d n_secs = 2 * 86400
   p3d n_secs = 3 * 86400
   p4d n_secs = 4 * 86400
   p5d n_secs = 5 * 86400
   p6d n_secs = 6 * 86400
   p1w n_secs = 604800
   p2w n_secs = 2 * 604800
   p4w n_secs = 4 * 604800
   p8w n_secs = 8 * 604800
   p12w n_secs = 12 * 604800
   p16w n_secs = 16 * 604800
   p20w n_secs = 20 * 604800
   p26w n_secs = 26 * 604800
   p1yr n_secs = 31536000
   p2yr n_secs = 2 * 31536000
   p3yr n_secs = 3 * 31536000
   default begin end

   convert_period_to_duration = n_secs
end

object convert_duration_to_period(duration = difftime("CENTISECONDS")) = axis2_periods

var dur = axis2_periods

begin
   case int(duration) of
   3600 dur = p1h
   7200 dur = p2h
   14400 dur = p4h
   21600 dur =  p6h
   28800 dur =  p8h
   36000 dur = p10h
   43200 dur = p12h
   64800 dur = p18h
   86400 dur = p24h
   129600 dur = p36h
   172800 dur =  p2d
   259200 dur = p3d
   345600 dur = p4d
   432000 dur =  p5d
   518400 dur = p6d
   604800 dur = p1w
   1209600 dur =  p2w
   2419200 dur = p4w
   4838400 dur = p8w
   7257600 dur = p12w
   9676800 dur = p16w
   12096000 dur = p20w
   15724800 dur = p26w
   31536000 dur = p1yr
   63072000 dur = p2yr
   94608000 dur = p3yr
   default dur = p1h

   convert_duration_to_period = dur
end


object tad(w,h,time_axis_detail = time_axis_detail_table_type,
	   trend_details    = trend_detail_table_type) = time_axis_detail_table_type

var offset = int

var td = loopback time_axis_detail_table_type
var initialise = loopback byte

var fowards_shift = panel  axis2_offset
var backwards_shift = panel  axis2_offset
var edit_tad = panel  edit_time_axis_details
var i = int
var j = int
var line_no = loopback int
var axis_no = int
var error_text = string
var error_text1 = string
var helpstr = help string(30)

begin
   helpstr = "tad_help"
   error_text = ""
   error_text1 = ""

   if invalid initialise then
      begin
      set unpinned fowards_shift
      set unpinned backwards_shift
      set unpinned edit_tad
      set title fowards_shift = " Set Fowards Shift."
      set title backwards_shift = " Set Backwards Shift."
      set x fowards_shift = 70
      set y fowards_shift = 50
      set x backwards_shift = 70
      set y backwards_shift = 50
      set x edit_tad = 200
      set y edit_tad = 50
      set default initialise
      set default td
      td = time_axis_detail
      axis_no = 1
      end


   fg = decoroff
   rect(w = 680,h = 330)
   rect(x=20,y=10,w = 640,h = 30,fg=white)
   box(fg=black,x=20,w = 640,y=10,h = 30)
   rect(x=20,y=70,w = 640,h = 160,fg=white)
   box(fg=black,x=20,w = 640,y=70,h = 160)

   for i from 1 to 8 do
      begin
      if selb(y=((i-1) * (ch+5))+78,w=640,h=ch,x=20) then
	 begin
	 axis_no = i
	 if (get busy fowards_shift) then
	    begin
	    set title fowards_shift = "Shift Axis " + axis_no + " Forwards"
	    request fowards_shift
	    end
	 if (get busy backwards_shift) then
	    begin
	    set title backwards_shift = "Shift Axis " + axis_no + "Backwards"
	    request backwards_shift
	    end
	 end
      end
   y=((axis_no-1) * (ch+5))+78
   rect(fg=yellow,w=640,x=20,h=ch)
   box(fg=black,w=640,x=20,h=ch)

   x = 20
   y = 249
   fg = decoroff

   if l_util_button(w = 110, bg=decoroff,"St. Time/Dur.",1,1,
	 (get busy fowards_shift) or (get busy backwards_shift)
	 or (get busy edit_tad)) then
      begin
      if valid td[9].time_min then
	 set edit_tad.time_min = td[9].time_min
      else
	 set edit_tad.time_min = min time + current_time % 3600 - 3600
      set  edit_tad.current_mode = td[9].current_mode
      set  edit_tad.duration = convert_duration_to_period(td[9].duration)
      set title edit_tad = "Edit Time Base"
      request edit_tad
      end
   help_area (x=20,y=y-8,w=110,h=16, "tad_start_time_help")

   x += 112


   if l_util_button(w = 130, bg=decoroff,"Offset Forwards",1,1,
	 (get busy fowards_shift) or (get busy backwards_shift)
	 or (get busy edit_tad)) then
      begin
      set title fowards_shift = "Shift Axis " + axis_no + " Forwards"
      request fowards_shift
      end
   help_area (x=132,y=y-8,w=130,h=16, "tad_offset_help")

   x += 132
   if l_util_button(w = 130, bg=decoroff,"Offset Backwards",1,1,
	 (get busy fowards_shift) or (get busy backwards_shift)
	 or (get busy edit_tad)) then
      begin
      set title backwards_shift = "Shift Axis " + axis_no + " Backwards"
      request backwards_shift
      end
   help_area (x=264,y=y-8,w=130,h=16, "tad_offset_help")

   x += 132
   if l_util_button(w = 130, bg=decoroff,"Display Bottom",1,0,
	 (get busy fowards_shift) or (get busy backwards_shift)
	 or (get busy edit_tad)) then
      begin
      if (td[axis_no].display == axis_2) or
	     (td[axis_no].display == both_axes) then
	 td[axis_no].display = both_axes
      else
	 td[axis_no].display = axis_1
      for i from 1 to 8 do
	 begin
	 if i <> axis_no then
	    begin
	    if td[i].display == axis_1 then
	       td[i].display = not_used
	    if td[i].display == both_axes then
	       td[i].display = axis_2
	    end
	 end
      end
   help_area (x=396,y=y-8,w=130,h=16, "tad_display_tb_help")

   x += 132
   if l_util_button(w = 130, bg=decoroff,"Display Top",1,0,
	 (get busy fowards_shift) or (get busy backwards_shift)
	 or (get busy edit_tad)) then
      begin
      if (td[axis_no].display == axis_1) or
	     (td[axis_no].display == both_axes) then
	 td[axis_no].display = both_axes
      else
	 td[axis_no].display = axis_2
      for i from 1 to 8 do
	 begin
	 if i <> axis_no then
	    begin
	    if td[i].display == axis_2 then
	       td[i].display = not_used
	    if td[i].display == both_axes then
	       td[i].display = axis_1
	    end
	 end
      end
   help_area (x=528,y=y-8,w=130,h=16, "tad_display_tb_help")

   if valid edit_tad then
      begin
      if (edit_tad.time_min > min time) and
	 (edit_tad.time_min < current_time + 86400) then
	 begin
	 td[9].time_min = edit_tad.time_min
	 td[9].duration = convert_period_to_duration(edit_tad.duration)
	 td[9].current_mode = edit_tad.current_mode
	 for i from 1 to 8 do
	    begin
	    td[i].time_min = td[9].time_min + td[i].offset
	    td[i].time_max = td[i].time_min + td[9].duration
	    end
	 end
      else
	 begin
	 error_text1 = "Error"
	 error_text = "Date specified is out of range"
	 end
      set invalid edit_tad
      set invalid fowards_shift
      set invalid backwards_shift
      end

   if valid fowards_shift then
      begin
      offset = convert_period_to_offset(fowards_shift)
      td[axis_no].offset = offset
      td[axis_no].time_min = td[9].time_min + offset
      td[axis_no].time_max = td[axis_no].time_min + td[9].duration
      set invalid edit_tad
      set invalid fowards_shift
      set invalid backwards_shift
      end

   if valid backwards_shift then
      begin
      offset = convert_period_to_offset(backwards_shift)
      td[axis_no].offset = - offset
      td[axis_no].time_min = td[9].time_min - offset
      td[axis_no].time_max = td[axis_no].time_min + td[9].duration
      set invalid edit_tad
      set invalid fowards_shift
      set invalid backwards_shift
      end

   y=20
   ch =14
   text(x = 30, "Base start time :")
   text(x = 350,"Duration :")
   if td[9].current_mode == on then
      text(x=160,"Current time mode")
   else
      text(x = 160,td[9].time_min)
   text(x = 430, convert_time_diff_to_str(td[9].duration))

   y=45
   ch =14
   text(x = 20, "Axis")
   text(x = 60, "Offset")
   text(x = 185,"Display")
   text(x = 260,"Lines")
   text(x = 410,"Start time")
   text(x = 540,"End time")

   y  = 78
   for i from 1 to 8 do
      begin
      text(x = 40,just = topright,i)
      text(x = 60, convert_time_diff_to_str(td[i].offset))

      if td[i].display <> not_used then
	 begin
	 x= 185
	 rect(w = 58,h = ch,fg = decoroff)
	 box(w=58,h=ch,fg=black)
	 x += 29
	 if td[i].display == both_axes then
	    text(ch = 12,just=topcentre,"Both")
	 else if td[i].display == axis_1 then
	    text(ch = 12,just=topcentre,"Bottom")
	 else if td[i].display == axis_2 then
	    text(ch = 12,just=topcentre,"Top")
	 end
      if td[9].current_mode == on then
	 begin
	 end
      else
	 begin
	 text(just = topleft,x=410,y=y+4, ch = 10, td[i].time_min)
	 text(just = topleft,x=540,y=y+4, ch = 10, td[i].time_max)
	 end

      x = 260
      for j from 1 to 7 do
	 begin
	 if trend_details[j].use_time_axis == i then
	    begin
	    rect(w = ch,h = ch,fg = trend_details[j].line_colour)
	    box(w = ch,h = ch,fg = black)
	    x += ch + 5
	    end
	 end
      y += ch + 5
      end
   if error_text <> "" then
      xv_message(x=340,y=135,ch=12,just = centrecentre,error_text1,error_text)
   tad = td
end

mimic time_axis_details = tad w = 680,h = 270,resizable

object line_details(w,h,bg,trend_details = trend_detail_table_type) =
		    trend_detail_table_type
var i = i16
var label = string (40)
var helpstr = help string(30)

begin
   helpstr = "line_values"
   realf = general7
   ch = 14
   y = 10

   text(x = 10,"Line")
   text(x = 70,"Identity")
   text(x = 230,"Stream")
   text(x = 390,"Time Axis")
   text(x = 500,"Value Axis")
   text(x = 600, "Time")
   text(x = 830,"Value")

   y = 35
   ch = 14

   for i from 1 to lastrow trend_details do
      begin
      if trend_details[i].added == yes and trend_details[i].display == yes then
	 begin
	 rect(w = 20,h = 10,x = 10,fg = trend_details[i].line_colour)
	 box(w = 20,h = 10,x = 10,fg = black)
	 font = font_bold
	 text(x=70,trend_details[i].source + ":" + trend_details[i].address)
	 text(x = 230, get_data_type(trend_details[i]))

	 label = "Axis " + trend_details[i].use_time_axis
	 text(x = 390, label)
	 label = "Axis " + trend_details[i].use_value_axis
	 text(x = 500, label)

	 if trend_details[i].time_value == min time and
	     trend_details[i].value_value == real(9999) then
	    begin
	    text(tfg = yellow,x = 670,"No intersection")
	    end
	 else
	    begin
	    text(x = 600,trend_details[i].time_value)
	    text(x = 830,trend_details[i].value_value)
	    end
	 y += ch + 5
	 end
      end

   line_details = trend_details

end

mimic line_details = line_details w = 960,h = 180,resizable,bg = decoroff

object get_time_axis_from_config(config = string (6)) = string (12)
begin
   get_time_axis_from_config = getchar(1,config)
end

object get_value_axis_from_config(config = string (6)) = string (12)
begin
   get_value_axis_from_config = getchar(2,config)
end

object get_points_from_config(config = string (6)) = string (12)
begin

   if getchar(3,config) == "Y" then
      get_points_from_config = "Yes"
   else
      get_points_from_config = "No"

end

object get_values_from_config(config = string (6)) = string (12)
begin

   if getchar(6,config) == "Y" then
      get_values_from_config = "Yes"
   else
      get_values_from_config = "No"

end

object get_display_from_config(config = string (6)) = string (12)
begin

   if getchar(4,config) == "Y" then
      get_display_from_config = "Yes"
   else
      get_display_from_config = "No"

end

object get_style_from_config(config = string (6)) = string (12)
begin
   get_style_from_config = ""
   if getchar(5,config) == "L" then
      get_style_from_config = "Line Graph"
   else if getchar(5,config) == "H" then
      get_style_from_config = "Histogram"
   else if getchar(5,config) == "S" then
      get_style_from_config = "Stepped"
   else if getchar(5,config) == "P" then
      get_style_from_config = "Points"
   else if getchar(5,config) == "B" then
      get_style_from_config = "Bar"
end

object get_line_config(tdr = trend_detail_row) = string (6)
begin

   get_line_config = ""

   if tdr.use_time_axis == 1 then
      get_line_config += "1"
   if tdr.use_time_axis == 2 then
      get_line_config += "2"
   if tdr.use_time_axis == 3 then
      get_line_config += "3"
   if tdr.use_time_axis == 4 then
      get_line_config += "4"
   if tdr.use_time_axis == 5 then
      get_line_config += "5"
   if tdr.use_time_axis == 6 then
      get_line_config += "6"
   if tdr.use_time_axis == 7 then
      get_line_config += "7"
   if tdr.use_time_axis == 8 then
      get_line_config += "8"

   if tdr.use_value_axis == 1 then
      get_line_config += "1"
   if tdr.use_value_axis == 2 then
      get_line_config += "2"
   if tdr.use_value_axis == 3 then
      get_line_config += "3"
   if tdr.use_value_axis == 4 then
      get_line_config += "4"
   if tdr.use_value_axis == 5 then
      get_line_config += "5"
   if tdr.use_value_axis == 6 then
      get_line_config += "6"
   if tdr.use_value_axis == 7 then
      get_line_config += "7"
   if tdr.use_value_axis == 8 then
      get_line_config += "8"

   if tdr.points_yn == yes then
      get_line_config += "Y"
   else
      get_line_config += "N"

   if tdr.display == yes then
      get_line_config += "Y"
   else
      get_line_config += "N"

   if tdr.style == line_graph then
	 get_line_config += "L"
   else if tdr.style == point_graph then
	 get_line_config += "P"
   else if tdr.style == stepped_graph then
	 get_line_config += "S"
   else if tdr.style == histogram_graph then
	 get_line_config += "H"
   else if tdr.style == bar_graph then
	 get_line_config += "B"

   if tdr.values == yes then
      get_line_config += "Y"
   else
      get_line_config += "N"
end

object convert_td(name = string (40),
		  td = trend_detail_table_type,
		  tad_detail = time_axis_detail_table_type,
		  vad_detail = value_axis_detail_table_type,
		  ctm = onoff,
		  fsm = onoff,
		  xgm = onoff,
		  ygm = onoff) = trend_config_row
var i = int
var tmp = loopback trend_config_row
begin

   set default tmp

   tmp.name = name
   for i from 1 to 8 do
      begin
      if tad_detail[i].display == axis_1 then
	 tmp.bottom_axis = i
      else if tad_detail[i].display == axis_2 then
	 tmp.top_axis = i
      else if tad_detail[i].display == both_axes then
	 begin
	 tmp.bottom_axis = i
	 tmp.top_axis = i
	 end
      end

   for i from 1 to 8 do
      begin
      if vad_detail[i].display == axis_1 then
	 tmp.left_value = i
      else if vad_detail[i].display == axis_2 then
	 tmp.right_value = i
      else if vad_detail[i].display == both_axes then
	 begin
	 tmp.left_value = i
	 tmp.right_value = i
	 end
      end

   tmp.duration = tad_detail[9].duration
   tmp.start_time = tad_detail[9].time_min
   tmp.offset_1 = tad_detail[1].offset
   tmp.offset_2 = tad_detail[2].offset
   tmp.offset_3 = tad_detail[3].offset
   tmp.offset_4 = tad_detail[4].offset
   tmp.offset_5 = tad_detail[5].offset
   tmp.offset_6 = tad_detail[6].offset
   tmp.offset_7 = tad_detail[7].offset
   tmp.offset_8 = tad_detail[8].offset

   if ctm == on then
      tmp.tv_config += "Y"
   else
      tmp.tv_config += "N"

   if fsm == on then
      tmp.tv_config += "Y"
   else
      tmp.tv_config += "N"

   if xgm == on then
      tmp.tv_config += "Y"
   else
      tmp.tv_config += "N"

   if ygm == on then
      tmp.tv_config += "Y"
   else
      tmp.tv_config += "N"

   tmp.max_value_1 = vad_detail[1].value_max
   tmp.min_value_1 = vad_detail[1].value_min
   tmp.max_value_2 = vad_detail[2].value_max
   tmp.min_value_2 = vad_detail[2].value_min
   tmp.max_value_3 = vad_detail[3].value_max
   tmp.min_value_3 = vad_detail[3].value_min
   tmp.max_value_4 = vad_detail[4].value_max
   tmp.min_value_4 = vad_detail[4].value_min
   tmp.max_value_5 = vad_detail[5].value_max
   tmp.min_value_5 = vad_detail[5].value_min
   tmp.max_value_6 = vad_detail[6].value_max
   tmp.min_value_6 = vad_detail[6].value_min
   tmp.max_value_7 = vad_detail[7].value_max
   tmp.min_value_7 = vad_detail[7].value_min
   tmp.max_value_8 = vad_detail[8].value_max
   tmp.min_value_8 = vad_detail[8].value_min

   if td[1].address <> db_invalid then
      begin
      tmp.identity_1 += (td[1].source + " " + td[1].stream_name + ":")
      tmp.identity_1 += td[1].address
      tmp.name_1 = td[1].db_name
      tmp.config_1 = get_line_config(td[1])
      tmp.units_1 = td[1].text_id
      end

   if td[2].address <> db_invalid then
      begin
      tmp.identity_2 += (td[2].source + " " + td[2].stream_name + ":")
      tmp.identity_2 += td[2].address
      tmp.name_2 = td[2].db_name
      tmp.config_2 = get_line_config(td[2])
      tmp.units_2 = td[2].text_id
      end

   if td[3].address <> db_invalid then
      begin
      tmp.identity_3 += (td[3].source + " " + td[3].stream_name + ":")
      tmp.identity_3 += td[3].address
      tmp.name_3 = td[3].db_name
      tmp.config_3 = get_line_config(td[3])
      tmp.units_3 = td[3].text_id
      end

   if td[4].address <> db_invalid then
      begin
      tmp.identity_4 += (td[4].source + " " + td[4].stream_name + ":")
      tmp.identity_4 += td[4].address
      tmp.name_4 = td[4].db_name
      tmp.config_4 = get_line_config(td[4])
      tmp.units_4 = td[4].text_id
      end

   if td[5].address <> db_invalid then
      begin
      tmp.identity_5 += (td[5].source + " " + td[5].stream_name + ":")
      tmp.identity_5 += td[5].address
      tmp.name_5 = td[5].db_name
      tmp.config_5 = get_line_config(td[5])
      tmp.units_5 = td[5].text_id
      end


   if td[6].address <> db_invalid then
      begin
      tmp.identity_6 += (td[6].source + " " + td[6].stream_name + ":")
      tmp.identity_6 += td[6].address
      tmp.name_6 = td[6].db_name
      tmp.config_6 = get_line_config(td[6])
      tmp.units_6 = td[6].text_id
      end

   if td[7].address <> db_invalid then
      begin
      tmp.identity_7 += (td[7].source + " " + td[7].stream_name + ":")
      tmp.identity_7 += td[7].address
      tmp.name_7 = td[7].db_name
      tmp.config_7 = get_line_config(td[7])
      tmp.units_7 = td[7].text_id
      end

   convert_td = tmp

end

object name_exists_in_table(name = string (40),
			    ip = trend_config_info_type) = int
var i = int
begin


   name_exists_in_table = 0
   for i from 1 to lastrow ip do
      begin
      if name == ip[i].name then
	 name_exists_in_table = i
      end

end

object delete_from_config_table(config_ind = int,
				ip = trend_config_info_type)
				 = trend_config_info_type
var i = int
var it_name = loopback string (40)
begin

   for i from 1 to lastrow ip do
      begin
      if config_ind <> i then
	 delete_from_config_table[lastrow delete_from_config_table + 1] = ip[i]
      end
end

object replace_config(config_ind = int,
		      ip = trend_config_info_type,
		      td = trend_detail_table_type,
		      tad_detail = time_axis_detail_table_type,
		      vad_detail = value_axis_detail_table_type,
		      ctm = onoff,
		      fsm = onoff,
		      xgm = onoff,
		      ygm = onoff) = trend_config_info_type

var i = int
begin

   for i from 1 to lastrow ip do
      begin
      if i <> config_ind then
	 replace_config[lastrow replace_config + 1] = ip[i]
      else
	 replace_config[lastrow replace_config + 1] =
	       convert_td(ip[config_ind].name,
			  td,
			  tad_detail,
			  vad_detail,
			  ctm,
			  fsm,
			  xgm,
			  ygm)
      end

end

object print_one_save_config_line(identity=string,
				 name=string, config=string)
var str = string(80)
var address_text = string(20)
var stream_text = string(30)
var cch = int
begin
str = get_source_from_ident(identity)
address_text = get_address_from_ident(identity)
text(x = 30, str + ":" + address_text)
stream_text = get_stream_from_ident(identity)
if stream_text <> "" then
   text(x = 160,getwords(2,100,stream_text))
else if db_address(address_text) in SET(e) then
   text(x = 160, "Eng. Unit")
else if db_address(address_text) in SET(p) then
   text(x = 160, "Profile")
else if db_address(address_text) in SET(s) then
   text(x = 160, "Schedule")

cch = ch
while length(name) > 280 do
   ch --
text(x = 320,name)
ch = cch

text(x = 610,get_time_axis_from_config(config))
text(x = 650,get_value_axis_from_config(config))
text(x = 680,get_style_from_config(config))
text(x = 790,get_points_from_config(config))
text(x = 860,get_values_from_config(config))
text(x = 930,get_display_from_config(config))
end


object mtc(w,h,ip_name = string (40),
	   td = trend_detail_table_type,
	   tad_detail = time_axis_detail_table_type,
	   vad_detail = value_axis_detail_table_type,
	   ctm = onoff,
	   fsm = onoff,
	   xgm = onoff,
	   ygm = onoff) = byte

var i = int

var config_ind = loopback int
var add_b_state = loopback onoff
var config_mode = loopback config_mode_type
var op_req = loopback byte
var ws_info = loopback ws_info_row
var logged_in = loopback byte
var filename = string (80)
var error_text = string(80)
var name = panel  string (40)
var ip = inputfile trend_config_info_type
var op = outputfile trend_config_info_type
var config_str = string(80)
var error_text1 = string
var helpstr = help string(30)

begin
   helpstr = "save_config_help"
   error_text = ""
   error_text1 = ""
   realf = general7
   rect(x=0,y=0,w=1050,h=425,fg=decoroff)
   fg = decoroff

   if invalid logged_in then
      logged_in = 0

   ws_info = get_ws_info(source(0))

   if valid ws_info and ws_info.user_name <> "" then
      begin
      filename = "trend_view_config." + ws_info.wrkstn_number
      logged_in = 1
      end
   else if valid ws_info then
      begin
      error_text1 = "Sorry"
      error_text = "Access Denied"
      logged_in = 0
      end

   if invalid add_b_state then
      begin
      add_b_state = off
      config_mode = config_idle
      op_req = 0
      end

   if invalid config_ind and valid ip then
      config_ind = name_exists_in_table(ip_name,ip)

   if valid ip then
      begin
      if config_ind > lastrow ip then
	 config_ind = lastrow ip
      end

   rect(x = 20,y = 50,w = 1010,h = ((ch+4)*7)+10,fg=white)
   box(x = 20,y = 50,w = 1010,h = ((ch+4)*7)+10,fg=black)
   rect(x = 310,y = 225,w = 190,h = ((ch+4)*8)+10,fg=white)
   box(x = 310,y = 225,w = 190,h = ((ch+4)*8)+10,fg=black)
   rect(x = 520,y = 225,w = 310,h = ((ch+4)*8)+10,fg=white)
   box(x = 520,y = 225,w = 310,h = ((ch+4)*8)+10,fg=black)

   text(x = 20,y = 4,"Name")
   text(y = 190,x = 250,just = topcentre,"Time Axis Details")
   text(y = 190,x = 675,just = topcentre,"Value Axis Ranges")
   text(y = 230,x = 100,just = topright,"Start :")
   text(y = 248,x = 100,just = topright,"Duration :")
   text(y = 205,x = 380,just = topcentre,"Offset")
   text(y = 205,x = 460,just = topcentre,"Display")
   text(y = 205,x = 620,just = topcentre,"Min.")
   text(y = 205,x = 720,just = topcentre,"Max.")
   text(y = 205,x = 790,just = topcentre,"Display")

   text(y = 30,x = 30,"Identity")
   text(y = 30,x = 160,"Stream")
   text(y = 30,x = 320,"Name")

   text(y = 15,x = 600,"Time")
   text(y = 15,x = 640,"Value")
   text(y = 15,x = 680,"Plot")
   text(y = 15,x = 780,"Display")
   text(y = 15,x = 850,"Display")

   text(y = 30,x = 600,"Axis")
   text(y = 30,x = 640,"Axis")
   text(y = 30,x = 680,"Style")
   text(y = 30,x = 780,"Points")
   text(y = 30,x = 850,"Values")
   text(y = 30,x = 920,"Display")


   case config_mode of
   adding_config
      begin
      if valid name then
	 begin
	 if name == "" then
	    begin
	    error_text1 ="Error"
	    error_text = "Invalid filename"
	    add_b_state = off
	    config_mode = config_idle
	    set invalid name
	    end
	 else if not(name_exists_in_table(name,ip)) then
	    begin
	    set reset op
	    set source op = source(0)
	    set file op = filename
	    set value op = ip
	    set value op[lastrow op + 1] = convert_td(name, td,
						      tad_detail, vad_detail,
						      ctm, fsm, xgm, ygm)
	    if logged_in then
	       begin
	       request op
	       mtc = 1
	       end
	    op_req = 1
	    set reset ip
	    set invalid name
	    end
	 else
	    begin
	    error_text1 ="Error"
	    error_text = name + " already exists in the configuration table"
	    config_mode = config_idle
	    add_b_state = off
	    end
	 end
      else if not(get busy name) and invalid name then
	 begin
	 add_b_state = off
	 config_mode = config_idle
	 op_req = 0
	 end
      if not(get busy op) and
	 not(get busy name) and op_req then
	 begin
	 add_b_state = off
	 config_mode = config_idle
	 op_req = 0
	 set reset ip
	 end
      end
   default
      begin
      end

   if (get busy name) and (lastrow ip >= max_trend_view_configs) then
      begin
      set reset name
      add_b_state = off
      end

   y = 399
   if l_util_button(x=20,w = 100, bg=decoroff,"Add",
					      (lastrow ip < max_trend_view_configs),
					      (lastrow ip < max_trend_view_configs),
					      int(add_b_state)) then
      begin
      set title name = "Enter config name"
      set unpinned name
      set x name = 200
      set y name = 200
      set name = ""
      request name
      set config_mode = adding_config
      add_b_state = on
      end
   help_area (x=20,y=y-8,w=100,h=16, "save_config_add")

   if l_util_button(x=122,w = 100, bg=decoroff,"Update",
					       (add_b_state <> on),
					       (add_b_state <> on),
					       0) then
      begin
      set reset op
      set source op = source(0)
      set file op = filename
      set value op = replace_config(config_ind, ip, td,
				    tad_detail, vad_detail,
				    ctm, fsm, xgm, ygm)
       request op
       mtc = 1
       set reset ip
       end
   help_area (x=122,y=y-8,w=100,h=16, "save_config_update")

   if l_util_button(x=224,w = 100, bg=decoroff,"Delete",
					       (add_b_state <> on),
					       (add_b_state <> on),
					       0) then
      begin
      set reset op
      set source op = source(0)
      set file op = filename
      set value op = delete_from_config_table(config_ind,ip)
      request op
      mtc = 1
      set reset ip
      if config_ind -1 > 0 then
	  config_ind --
      else if lastrow ip >= 2 then
	 config_ind ++
      end
   help_area (x=224,y=y-8,w=100,h=16, "save_config_delete")

   if l_util_button(x=340,w = 100, bg=decoroff,"Next",1,0,
	 not (config_ind < lastrow ip)) then
      begin
      config_ind ++
      end
   help_area (x=340,y=y-8,w=100,h=16, "save_config_next")

   if l_util_button(x=442,w = 100, bg=decoroff,"Previous",1,0,
	not (config_ind - 1 > 0)) then
      begin
      config_ind --
      end
   help_area (x=442,y=y-8,w=100,h=16, "save_config_previous")

   if invalid ip and valid ws_info and ws_info.user_name <> "" then
      begin
      set source ip = source(0)
      set file ip = filename
      request ip
      end

   if invalid ip and valid ws_info and ws_info.user_name <> "" then
      begin
      if get busy ip then
	 begin
	 error_text1 = "Please Wait"
	 error_text = "Requesting " + source(0) + "'s config file"
	 end
      else
	 begin
	 if valid ws_info then
	    begin
	    set source op = source(0)
	    set file op = filename
	    set default op[1]
	    set value op[1].name = "default config"
	    set value op[1].bottom_axis = 1
	    set value op[1].top_axis = 1
	    set value op[1].left_value = 1
	    set value op[1].right_value = 1
	    set value op[1].duration = 7200
	    set value op[1].start_time = min time
	    set value op[1].offset_1 = 0
	    set value op[1].offset_2 = 0
	    set value op[1].offset_3 = 0
	    set value op[1].offset_4 = 0
	    set value op[1].offset_5 = 0
	    set value op[1].offset_6 = 0
	    set value op[1].offset_7 = 0
	    set value op[1].offset_8 = 0
	    set value op[1].tv_config = "NNNN"
	    set value op[1].max_value_1 = 100
	    set value op[1].max_value_2 = 200
	    set value op[1].max_value_3 = 300
	    set value op[1].max_value_4 = 400
	    set value op[1].max_value_5 = 500
	    set value op[1].max_value_6 = 600
	    set value op[1].max_value_7 = 700
	    set value op[1].max_value_8 = 2
	    set value op[1].min_value_8 = -1
	    request op
	    mtc = 1
	    set reset ip
	    end
	 else
	    begin
	    error_text1 = "Sorry"
	    error_text = "Unable to get config file from " + source(0)
	    end
	 end
      end
   else if valid ip and logged_in then
      begin
      y =5
      text(x = 70,tfg = blue,ip[config_ind].name)
      if ip_name == ip[config_ind].name then
	 text(x = 80 + length(ip[config_ind].name),
	      "- ( current ) ")

      if logged_in then
	 begin
	 y = 230
	 just = topleft
	 for aa to 8 do
	    begin
	    text(x = 320, aa + ".")
	    text(x = 530, aa + ".")
	    y += ch + 4
	    end

	 if ip[config_ind].start_time <> min time then
	    begin
	    y = 230
	    if getchar(1,ip[config_ind].tv_config) == "N" then
	       text(x=110,just=topleft,ip[config_ind].start_time)
	    else
	       text(x=110,just=topleft,"Current Time Mode")
	    text(x=110,y=248,just=topleft,convert_time_diff_to_str(ip[config_ind].duration))
	    text(x=340,convert_time_diff_to_str(ip[config_ind].offset_1))
	    text(x = 630,just=topright,real(ip[config_ind].min_value_1))
	    text(x = 740,just=topright,real(ip[config_ind].max_value_1))
	    y += ch + 4
	    text(x=340,convert_time_diff_to_str(ip[config_ind].offset_2))
	    text(x = 630,just=topright,real(ip[config_ind].min_value_2))
	    text(x = 740,just=topright,real(ip[config_ind].max_value_2))
	    y += ch + 4
	    text(x=340,convert_time_diff_to_str(ip[config_ind].offset_3))
	    text(x = 630,just=topright,real(ip[config_ind].min_value_3))
	    text(x = 740,just=topright,real(ip[config_ind].max_value_3))
	    y += ch + 4
	    text(x=340,convert_time_diff_to_str(ip[config_ind].offset_4))
	    text(x = 630,just=topright,real(ip[config_ind].min_value_4))
	    text(x = 740,just=topright,real(ip[config_ind].max_value_4))
	    y += ch + 4
	    text(x=340,convert_time_diff_to_str(ip[config_ind].offset_5))
	    text(x = 630,just=topright,real(ip[config_ind].min_value_5))
	    text(x = 740,just=topright,real(ip[config_ind].max_value_5))
	    y += ch + 4
	    text(x=340,convert_time_diff_to_str(ip[config_ind].offset_6))
	    text(x = 630,just=topright,real(ip[config_ind].min_value_6))
	    text(x = 740,just=topright,real(ip[config_ind].max_value_6))
	    y += ch + 4
	    text(x=340,convert_time_diff_to_str(ip[config_ind].offset_7))
	    text(x = 630,just=topright,real(ip[config_ind].min_value_7))
	    text(x = 740,just=topright,real(ip[config_ind].max_value_7))
	    y += ch + 4
	    text(x=340,convert_time_diff_to_str(ip[config_ind].offset_8))
	    text(x = 630,just=topright,real(ip[config_ind].min_value_8))
	    text(x = 740,just=topright,real(ip[config_ind].max_value_8))
	    end

	 for i from 1 to 8 do
	    begin
	    if ((ip[config_ind].top_axis == i) or
	       (ip[config_ind].bottom_axis == i)) then
	       begin
	       rect(x=460,y=230+((i-1)*(ch+4)) ,just =topcentre,fg=decoroff,h=ch+2,
		    w=60)
	       box(x=460,y=230+((i-1)*(ch+4)) ,just =topcentre,fg=black,h=ch+2,
		    w=60)
	       if ip[config_ind].top_axis == i then
		  begin
		  if ip[config_ind].bottom_axis == i then
		     text(x=460,y=230+((i-1)*(ch+4)) ,just =topcentre, "Both")
		  else
		     text(x=460,y=230+((i-1)*(ch+4)) ,just =topcentre, "Top")
		  end
	       else
		  begin
		  if ip[config_ind].bottom_axis == i then
		     text(x=460,y=230+((i-1)*(ch+4)) ,just =topcentre, "Bottom")
		  end
	       end

	    if ((ip[config_ind].left_value == i) or
	       (ip[config_ind].right_value == i)) then
	       begin
	       rect(x=790,y=230+((i-1)*(ch+4)) ,just =topcentre,fg=decoroff,h=ch+2,
		    w=60)
	       box(x=790,y=230+((i-1)*(ch+4)) ,just =topcentre,fg=black,h=ch+2,
		    w=60)
	       if ip[config_ind].left_value == i then
		  begin
		  if ip[config_ind].right_value == i then
		     text(x=790,y=230+((i-1)*(ch+4)) ,just =topcentre, "Both")
		  else
		     text(x=790,y=230+((i-1)*(ch+4)) ,just =topcentre, "Left")
		  end
	       else
		  begin
		  if ip[config_ind].right_value == i then
		     text(x=790,y=230+((i-1)*(ch+4)) ,just =topcentre, "Right")
		  end
	       end
	    end

	 y = 55
	 if ip[config_ind].identity_1 <> "" then
	    begin
	    print_one_save_config_line(ip[config_ind].identity_1,
				 ip[config_ind].name_1, ip[config_ind].config_1)
	    y += ch + 4
	    end
	 if ip[config_ind].identity_2 <> "" then
	    begin
	    print_one_save_config_line(ip[config_ind].identity_2,
			ip[config_ind].name_2, ip[config_ind].config_2)
	    y += ch + 4
	    end
	 if ip[config_ind].identity_3 <> "" then
	    begin
	    print_one_save_config_line(ip[config_ind].identity_3,
			ip[config_ind].name_3, ip[config_ind].config_3)
	    y += ch + 4
	    end
	 if ip[config_ind].identity_4 <> "" then
	    begin
	    print_one_save_config_line(ip[config_ind].identity_4,
			ip[config_ind].name_4, ip[config_ind].config_4)
	    y += ch + 4
	    end
	 if ip[config_ind].identity_5 <> "" then
	    begin
	    print_one_save_config_line(ip[config_ind].identity_5,
			ip[config_ind].name_5, ip[config_ind].config_5)
	    y += ch + 4
	    end
	 if ip[config_ind].identity_6 <> "" then
	    begin
	    print_one_save_config_line(ip[config_ind].identity_6,
			ip[config_ind].name_6, ip[config_ind].config_6)
	    y += ch + 4
	    end
	 if ip[config_ind].identity_7 <> "" then
	    begin
	    print_one_save_config_line(ip[config_ind].identity_7,
			ip[config_ind].name_7, ip[config_ind].config_7)
	    y += ch + 4
	    end
	 end
      end

   if error_text <> "" then
      xv_message(x=425,y=220,ch=12,just = centrecentre,error_text1,error_text)
end

mimic config_details = mtc w = 1050,h = 425,resizable


object ncn(w,h,bg,ip_name = string (40),
	      cancel = int) = trend_config_row
var i = int
var start = int
var filename = string (80)
var press = byte
var selected = int
var name = loopback string (40)
var ws_info = loopback ws_info_row
var ip = inputfile trend_config_info_type
var old_cancel = loopback int
var logged_in = loopback byte
var error_text = string
var error_text1 = string
var helpstr = help string(30)

begin
   helpstr = "load_config_help"
   error_text = ""
   error_text1 = ""
   ws_info = get_ws_info(source(0))

   if invalid name then
      name = ip_name

   if invalid logged_in then
      logged_in = 0

   if valid ws_info and ws_info.user_name <> "" then
      begin
      filename = "trend_view_config." + ws_info.wrkstn_number
      logged_in = 1
      end
   else if valid ws_info then
      begin
      error_text1 = "Sorry"
      error_text = "Access Denied"
      logged_in = 0
      end

   if cancel and old_cancel <> cancel then
      set reset ip

   if invalid ip then
      begin
      set source ip = source(0)
      set file ip = filename
      request ip
      end

   if invalid start then
      start = 1

   if l_util_button(y=510,x=50,w = 100, bg=decoroff,"Next",1,0,
	not (start + 24 < lastrow ip)) then
      start += 25

   if l_util_button(y=510,x=152,w = 100, bg=decoroff,"Previous",1,0,
	not (start - 25 > 0)) then
	 start -= 25

   if invalid ip then
      begin
      if get busy ip then
	 begin
	 error_text1 = "Please wait"
	 error_text = "Requesting " + source(0) + "'s config file"
	 end
      else
	 begin
	 error_text1 = "Sorry"
	 error_text = "Failed to load " +  source(0) + "'s config file"
	 end
      end
   else if logged_in then
      begin
      clear
      y = 15
      w = 260
      h = ch + 2
      press = 0
      selected = 0
      for i from start to start + 24 do
	 begin
	 if i <= lastrow ip then
	    begin
	    if selb and ip[i].name <> name then
	       begin
	       rect(x = 20,fg = decoron)
	       add(x = 20,y = y + h) add(x = 20) add(x = 20 +  w)
	       line(fg = decorshadow) clear
	       add(x = 20 + w) add(x = 20 + w,y = y + h)
	       add(x = 20,y = y + h) line(fg = decorlight) clear
	       ncn = ip[i]
	       name = ip[i].name
	       press = 1
	       exit
	       end
	    else if name == ip[i].name then
	       selected = i
	    text(x = 20,ip[i].name)
	    y += ch + 5
	    end
	 end
	 if not press and selected then
	    begin
	    y = 15 + (ch + 5) * (selected - 1)
	    add(x = 20,y = y + h) add(x = 20) add(x = 20 +  w)
	    line(fg = decorshadow) clear
	    add(x = 20 + w) add(x = 20 + w,y = y + h)
	    add(x = 20,y = y + h) line(fg = decorlight) clear
	    text(x = 20,ip[selected].name)
	    end
      end
   if error_text <> "" then
      xv_message(x=150,y=270,ch=12,just = centrecentre,error_text1,error_text)
   old_cancel = cancel
end

mimic new_config_type = ncn w = 300,h = 540,bg = decoroff

object display_points(w,h,bg,trendtable = trendtable_type,
		      input_int = int,
		      data_name = string (30),
		      data_source = string (14),
		      data_address = db_address,
		      stream_name = string(30),
		      time_max = time("CENTISECONDS"),
		      time_min = time("CENTISECONDS"),
		      ctm = onoff,
		      time_details = time_axis_detail_table_type,
		      trend_details = trend_detail_table_type) = int

var i = int
var start = int
var stop = int
var button_stat = onoff
var local_int = int
var local_trendtable = loopback trendtable_type
var tmax = time("CENTISECONDS")
var tmin = time("CENTISECONDS")
var invalid_row = trendrow_type
var error_text = string
var error_text1 = string
var helpstr = help string(30)

begin
   helpstr = "display_points_help"
   error_text = ""
   error_text1 = ""
   set invalid local_trendtable
   realf = general7
   local_int = input_int
   if invalid start then
      start = 1
   fg = decoroff

   if ctm == on then
      begin
      tmax = time_max
	 + time_details[trend_details[local_int].use_time_axis].offset
      tmin = time_min
	 + time_details[trend_details[local_int].use_time_axis].offset
      end
   else
      begin
      tmax = time_details[trend_details[local_int].use_time_axis].time_max
	 + time_details[trend_details[local_int].use_time_axis].offset
      tmin = time_details[trend_details[local_int].use_time_axis].time_min
	 + time_details[trend_details[local_int].use_time_axis].offset
      end

   if valid data_address and data_address <> db_invalid then
      begin
      for i from 1 to lastrow local_trendtable do
	 local_trendtable[i] = invalid_row

      for i from 1 to lastrow trendtable do
	 begin
	 if trendtable[i].sample_date <= tmax then
	    begin
	    if trendtable[i].sample_date >= tmin then
	       local_trendtable[lastrow local_trendtable + 1] = trendtable[i]
	    end
	 end
      end

   rect(x=10,y=40,w=500,h=460,fg=white)
   box(x=10,y=40,w=500,h=460,fg=black)

   if l_util_button(y=518,x=10,w = 80, bg=decoroff,"Next",1,0,
	(start > lastrow local_trendtable - 60)) then
      begin
      if stop < lastrow local_trendtable then
	 start += 60
      end

   if l_util_button(y=518,x=92,w = 80, bg=decoroff,"Previous",1,0,
	not (start > 1)) then
      begin
      start -= 60
      if start < 1 then
	 start = 1
      end

   if l_util_button(y=518,x=174,w = 80, bg=decoroff,"Start",1,0,
	 start == 1) then
      start = 1

   if l_util_button(y=518,x=256,w = 80, bg=decoroff,"End",1,0,
       stop == lastrow local_trendtable) then
	 start = lastrow local_trendtable - 59

   if start + 59 <= lastrow local_trendtable then
      stop = start + 59
   else
      stop = lastrow local_trendtable

   ch = 10 y = 50

   text(ch = 14,x=10,y=4,data_source + ":" + data_address)
   if (stream_name <> "") then
      text(ch = 14,x=180,y=4,"Archive " + getwords(2,nwords(stream_name) -1, stream_name))
   text(ch = 14,x=350,y=4,data_name)
   text(ch = 14,x=10,y=20,tmin + "  -  " + tmax)
   if invalid local_trendtable then
      begin
      error_text1 = "Sorry"
      error_text = "No data found for trend (" + local_int + ")"
      end
   else
      begin
      for i from start to stop do
	 begin
	 if i > start + 29 then
	    begin
	    text(x = 270,i + ". ")
	    text(x = 300,local_trendtable[i].sample_date)
	    text(x = 440,local_trendtable[i].sample_value)
	    end
	 else
	    begin
	    text(x = 20,i + ". ")
	    text(x = 50,local_trendtable[i].sample_date)
	    text(x = 190,local_trendtable[i].sample_value)
	    end
	 y += ch + 5
	 if i == start + 29 then
	    y = 50
	 end
      end

   ! Add colour buttons !
   y = 540
   for i from 1 to 7 do
      begin
      x = 20 + ((i-1)*43)
      case i of
      1 fg = red
      2 fg = blue
      3 fg = green
      4 fg = magenta
      5 fg = magenta4
      6 fg = orange
      7 fg = blue4
      default
	 begin
	 end
      if i == local_int then
	 button_stat = on
      else
	 button_stat = off
      if col_button(button_stat) == 1 then
	 local_int = i
      end
   display_points = local_int
   if error_text <> "" then
      xv_message(x=260,y=290,ch=12,just = centrecentre,error_text1,error_text)

end

mimic tabular_display = display_points w = 620,h = 580 ,bg = decoroff, resizable

object get_interval_per_tick_g1(p_p_d = real) = real
begin

   if (p_p_d * 1) > 20 then
      get_interval_per_tick_g1 = 1
   else if (p_p_d * 2) > 20 then
      get_interval_per_tick_g1 = 2
   else if (p_p_d * 5) > 20 then
      get_interval_per_tick_g1 = 5
   else if (p_p_d * 10) > 20 then
      get_interval_per_tick_g1 = 10
   else if (p_p_d * 15) > 20 then
      get_interval_per_tick_g1 = 15
   else if (p_p_d * 20) > 20 then
      get_interval_per_tick_g1 = 20
   else if (p_p_d * 30) > 20 then
      get_interval_per_tick_g1 = 30
   else if (p_p_d * 60) > 20 then
      get_interval_per_tick_g1 = 60
   else if (p_p_d * 120) > 20 then
      get_interval_per_tick_g1 = 120

end

object get_major_tick_mod_g1(p_p_d = real,axis_type = axis_type_type) = int
begin

   case axis_type of
   hour
      begin
      if (p_p_d * 1) > 150 then
	 get_major_tick_mod_g1 = 1
      else if (p_p_d * 2) > 150 then
	 get_major_tick_mod_g1 = 2
      else if (p_p_d * 3) > 150 then
	 get_major_tick_mod_g1 = 3
      else if (p_p_d * 4) > 150 then
	 get_major_tick_mod_g1 = 4
      else if (p_p_d * 5) > 150 then
	 get_major_tick_mod_g1 = 5
      else if (p_p_d * 6) > 150 then
	 get_major_tick_mod_g1 = 6
      else if (p_p_d * 7) > 150 then
	 get_major_tick_mod_g1 = 7
      else if (p_p_d * 8) > 150 then
	 get_major_tick_mod_g1 = 8
      else if (p_p_d * 9) > 150 then
	 get_major_tick_mod_g1 = 9
      else
	 get_major_tick_mod_g1 = 10
      end
   day
      begin
      if (p_p_d * 1) > 150 then
	 get_major_tick_mod_g1 = 1
      else if (p_p_d * 2) > 150 then
	 get_major_tick_mod_g1 = 2
      else if (p_p_d * 3) > 150 then
	 get_major_tick_mod_g1 = 3
      else if (p_p_d * 4) > 150 then
	 get_major_tick_mod_g1 = 4
      else if (p_p_d * 5) > 150 then
	 get_major_tick_mod_g1 = 5
      else if (p_p_d * 6) > 150 then
	 get_major_tick_mod_g1 = 6
      else if (p_p_d * 7) > 150 then
	 get_major_tick_mod_g1 = 7
      else if (p_p_d * 8) > 150 then
	 get_major_tick_mod_g1 = 8
      else if (p_p_d * 9) > 150 then
	 get_major_tick_mod_g1 = 9
      else
	 get_major_tick_mod_g1 = 10
      end
   week
      begin
      if (p_p_d * 1) > 150 then
	 get_major_tick_mod_g1 = 1
      else if (p_p_d * 2) > 150 then
	 get_major_tick_mod_g1 = 2
      else if (p_p_d * 3) > 150 then
	 get_major_tick_mod_g1 = 3
      else if (p_p_d * 4) > 150 then
	 get_major_tick_mod_g1 = 4
      else if (p_p_d * 5) > 150 then
	 get_major_tick_mod_g1 = 5
      else if (p_p_d * 6) > 150 then
	 get_major_tick_mod_g1 = 6
      else if (p_p_d * 7) > 150 then
	 get_major_tick_mod_g1 = 7
      else if (p_p_d * 8) > 150 then
	 get_major_tick_mod_g1 = 8
      else if (p_p_d * 9) > 150 then
	 get_major_tick_mod_g1 = 9
      else
	 get_major_tick_mod_g1 = 10
      end
   year
      begin
      if (p_p_d * 1) > 150 then
	 get_major_tick_mod_g1 = 1
      else if (p_p_d * 2) > 150 then
	 get_major_tick_mod_g1 = 2
      else if (p_p_d * 3) > 150 then
	 get_major_tick_mod_g1 = 3
      else if (p_p_d * 4) > 150 then
	 get_major_tick_mod_g1 = 4
      else if (p_p_d * 5) > 150 then
	 get_major_tick_mod_g1 = 5
      else if (p_p_d * 6) > 150 then
	 get_major_tick_mod_g1 = 6
      else if (p_p_d * 7) > 150 then
	 get_major_tick_mod_g1 = 7
      else if (p_p_d * 8) > 150 then
	 get_major_tick_mod_g1 = 8
      else if (p_p_d * 9) > 150 then
	 get_major_tick_mod_g1 = 9
      else
	 get_major_tick_mod_g1 = 10
      end
   default
      begin
      if (p_p_d * 1) > 20 then
	 get_major_tick_mod_g1 = 10
      else if (p_p_d * 2) > 20 then
	 get_major_tick_mod_g1 = 5
      else if (p_p_d * 5) > 20 then
	 get_major_tick_mod_g1 = 4
      else if (p_p_d * 10) > 20 then
	 get_major_tick_mod_g1 = 3
      else if (p_p_d * 15) > 20 then
	 get_major_tick_mod_g1 = 4
      else if (p_p_d * 20) > 20 then
	 get_major_tick_mod_g1 = 3
      else if (p_p_d * 30) > 20 then
	 get_major_tick_mod_g1 = 2
      else if (p_p_d * 40) > 20 then
	 get_major_tick_mod_g1 = 3
      else if (p_p_d * 60) > 20 then
	 get_major_tick_mod_g1 = 2
      end

end

object get_time_axis_type_g1(axis_range = int) = axis_type_type
var a_min = int
var an_hour = int
var a_day = int
var a_week = int
var a_year = int
var x_time = time("CENTISECONDS")
begin

   a_min = 60
   an_hour = 3600
   a_day = 86400
   a_week = 604800
   a_year = 31449600


   if axis_range <= a_min * 2 then
      get_time_axis_type_g1 = second
   else if axis_range <= an_hour * 2 then
      get_time_axis_type_g1 = minute
   else if axis_range <= a_day * 2 then
      get_time_axis_type_g1 = hour
   else if axis_range <= a_day * 14 then
      get_time_axis_type_g1 = day
   else if axis_range <= a_week * 52 then
      get_time_axis_type_g1 = week
   else
      get_time_axis_type_g1 = year

end

! Draws the horizontal time axis for a graph and displays values at major
  tick points !

object h_time_axis(x,y,w,h,tfg,bg,ch,timef,refl,
		 tmin = time("CENTISECONDS"),
		 tmax = time("CENTISECONDS"),
		 graticules = onoff,
		 display_time = yesno,
		 axis_no = axis_use_type,
		 axis_type = axis_type_type) = int

var i = graphint
var x_pos = real
var p_p_td = real
var s_p_t = real
var m_p_t = real
var h_p_t = real
var d_p_t = real
var w_p_t = real
var y_p_t = real

var p_p_t = real
var axis_range = int

var n_ticks = graphint
var m_j_t = int

var a_min = int
var an_hour = int
var a_day = int
var a_week = int
var a_year = int
var x_time = time
("CENTISECONDS")
begin
   realf = general7
   fg = tfg
   a_min = 60
   an_hour = 3600
   a_day = 86400
   a_week = 604800
   a_year = 31449600

   axis_range = int (tmax - tmin)

   if w % 2 then
      w++

   case axis_type of
   second
      begin
      p_p_td = w/axis_range
      s_p_t = get_interval_per_tick_g1(p_p_td)
      m_j_t = get_major_tick_mod_g1(p_p_td,axis_type)
      p_p_t = s_p_t * p_p_td
      n_ticks = int(w/p_p_t)
      if axis_no == axis_1 then
	 x_time = tmin
      else
	 x_time = tmax
      if (timef == gmt_weekday) then
	 timef = gmt_hms
      else
	 timef = local_hms
      end
   minute
      begin
      p_p_td = w/(axis_range/real(a_min))
      m_p_t = get_interval_per_tick_g1(p_p_td)
      m_j_t = get_major_tick_mod_g1(p_p_td,axis_type)
      p_p_t = m_p_t * p_p_td
      s_p_t = m_p_t * a_min
      n_ticks = int(w/p_p_t)
      if axis_no == axis_1 then
	 x_time = tmin
      else
	 x_time = tmax
	 if (timef == gmt_weekday) then
	    timef = gmt_hms
	 else
	    timef = local_hms
      end
   hour
      begin
      p_p_td = w/(axis_range/real(an_hour))
      h_p_t = get_interval_per_tick_g1(p_p_td)
      m_j_t = get_major_tick_mod_g1(p_p_td,axis_type)
      p_p_t = h_p_t * p_p_td
      s_p_t = h_p_t * an_hour
      n_ticks = int(w/p_p_t)
      if axis_no == axis_1 then
	 x_time = tmin
      else
	 x_time = tmax
	 if (timef == gmt_weekday) then
	    timef = gmt_hm
	 else
	    timef = local_hm
      end
   day
      begin
      p_p_td = w/(axis_range/real(a_day))
      d_p_t = get_interval_per_tick_g1(p_p_td)
      m_j_t = get_major_tick_mod_g1(p_p_td,axis_type)
      p_p_t = d_p_t * p_p_td
      s_p_t = d_p_t * a_day
      n_ticks = int(w/p_p_t)
      if axis_no == axis_1 then
	 x_time = tmin
      else
	 x_time = tmax
      if (timef == gmt_weekday) then
	 timef = gmt_dm_hm
      else
	 timef = local_dm_hm
      end
   week
      begin
      p_p_td = w/(axis_range/real(a_week))
      w_p_t = get_interval_per_tick_g1(p_p_td)
      m_j_t = get_major_tick_mod_g1(p_p_td,axis_type)
      p_p_t = w_p_t * p_p_td
      s_p_t = w_p_t * a_week
      n_ticks = int(w/p_p_t)
      if axis_no == axis_1 then
	 x_time = tmin
      else
	 x_time = tmax
      if (timef == gmt_weekday) then
	 timef = gmt_dm_hm
      else
	 timef = local_dm_hm
      end
   year
      begin
      p_p_td = w/(axis_range/real(a_year))
      y_p_t = get_interval_per_tick_g1(p_p_td)
      p_p_t = y_p_t * p_p_td
      n_ticks = int(w/p_p_t)
      if n_ticks == 2 then  
	 begin
	 n_ticks = 24
	 m_j_t = 6  
	 end
      else 
	 begin
	 n_ticks = 12
	 m_j_t = 3  
	 end
      p_p_t = real(w/n_ticks)
      s_p_t = real(axis_range/n_ticks)
      if axis_no == axis_1 then
	 x_time = tmin
      else
	 x_time = tmax
      if (timef == gmt_weekday) then
	 timef = gmt_dmy_hm
      else
	 timef = local_dmy_hm
      end
   default
      begin
      end
   move
   x = w
   add
   line

   x = 0
   x_pos = 0
   move

   for i from 0 to n_ticks do
      begin
      if not(i % m_j_t) then
	 begin
	 y -= 15
	 if display_time == yes then
	    text(just=bottomcentre,x_time)
	 y += 5
	 end
      else
	 y -= 5

      add
      line
      if graticules == on and i then
	 begin
	 y = 0
	 move
	 y += h
	 add
	 line(fg = lightgrey)
	 end
      y = 0
      x_pos += p_p_t
      x = int(x_pos)
      if axis_no == axis_1 then
	 x_time += s_p_t
      else
	 x_time -= int(s_p_t)
      move
      end
   h_time_axis = int(s_p_t)
end


object get_real_ideal_value_per_tick(value_per_tick = real) = real
var i = int
var n_tens = int
var v_p_t = real
begin

   v_p_t = value_per_tick
   n_tens = 1

   while (v_p_t < 1) do
      begin
      n_tens = n_tens * 10
      v_p_t = v_p_t * 10
      end

   if v_p_t >= 1 then
      begin
      if v_p_t - 1 < 2 - v_p_t then
	 get_real_ideal_value_per_tick = 1
      else
	 get_real_ideal_value_per_tick = 2
      end
   else if v_p_t >= 2 then
      begin
      if v_p_t - 2 < 5 - v_p_t then
	 get_real_ideal_value_per_tick = 1
      else
	 get_real_ideal_value_per_tick = 2
      end
   else if v_p_t >= 5 then
      begin
      get_real_ideal_value_per_tick = 5
      end

   get_real_ideal_value_per_tick = get_real_ideal_value_per_tick /(n_tens)

end

object get_ideal_value_per_tick(intf,realf,
				axis_range = int,
				value_per_tick = real) = real
var v_p_t = real
var r_str = string (12)
var n_tens = real
var i = int
begin

   v_p_t = value_per_tick

   r_str = 1
   for i from 2 to nchars(int(axis_range)) do
      r_str += 0
   n_tens = int(r_str)/ 10

   v_p_t  = v_p_t / n_tens

   if v_p_t >= 1 then
      begin
      if v_p_t - 1 < 2 - v_p_t then
	 get_ideal_value_per_tick = 1
      else
	 get_ideal_value_per_tick = 2
      end
   else if v_p_t >= 2 then
      begin
      if v_p_t - 2 < 5 - v_p_t then
	 get_ideal_value_per_tick = 1
      else
	 get_ideal_value_per_tick = 2
      end
   else if v_p_t >= 5 then
      begin
      get_ideal_value_per_tick = 5
      end
   else
      begin
      get_ideal_value_per_tick = 1
      end

   get_ideal_value_per_tick = n_tens * get_ideal_value_per_tick

end

object get_major_mod_point(v_p_t = real) = int
var real_value = real
begin

   if v_p_t < 1 then
      real_value = v_p_t * 10000000
   else
      real_value = v_p_t

   intf = decimal
   case getchar(1,int(real_value)) of
   "1" get_major_mod_point = 5
   "2" get_major_mod_point = 5
   "5" get_major_mod_point = 5
   default
      begin
      end
end

object value_axis(x,y,w,h,tfg,bg,ch,realf,refl,
		  vmin = real,
		  vmax = real,
		  label = string (40),
		  offset_from_bottom_of_box = int,
		  graticules = onoff,
		  axis_no = axis_use_type,
		  display_values = yesno)

var nticks = graphint
var ideal_nticks = int
var i = graphint
var r_str = string (12)
var int_range = int
var real_range = real

var start_digit = int
var n_digits = int

var y_value = real
var axis_range = real
var p_p_v = real
var v_p_t = real
var p_p_t = real
var m_j_t = int


begin
   fg = tfg
   move
   y += h
   add
   line
   y = 0
   move

   axis_range = vmax - vmin
   p_p_v = h/axis_range

   ideal_nticks = 20
   intf = decimal

   if axis_range > 10 then
      begin

      r_str = getchar(1,int(axis_range))
      for i from 2 to nchars(int(axis_range)) do
	 r_str += 0
      int_range = int(r_str)
      v_p_t = int_range/real(ideal_nticks)
      v_p_t = get_ideal_value_per_tick(int_range,v_p_t)
      nticks = int(axis_range/v_p_t)
      realf = fixed2

      end
   else
      begin
      realf = fixed9
      i = 3
      n_digits = 3
      while (i <= nchars(axis_range)) do
	 begin
	 if getchar(i,axis_range) <> "0" then
	    begin
	    n_digits = i
	    i = nchars(axis_range) + 1
	    end
	 i ++
	 end

      r_str = getchars(1,n_digits,axis_range)

      real_range = real(r_str)
      v_p_t = real_range/ideal_nticks
      v_p_t = get_real_ideal_value_per_tick(v_p_t)
      nticks = int(axis_range/v_p_t)
      realf = fixed0  + n_digits - 1

      end

   m_j_t = get_major_mod_point(v_p_t)

   p_p_t = h/real(nticks)
   for i from 0 to nticks do
      begin
      if (y <> h) and (y <> h + 1) and (y <> h - 1) then
	 begin
	 if not(i % m_j_t) then
	    begin
	    x -= 11
	    realf = general5
	    if display_values == yes then
	       begin
	       ! To avoid cumulative error, recalculate y_value !
	       if axis_no == axis_1 then
		  y_value = vmin + (v_p_t * i)
	       else
		  y_value = vmax - (v_p_t * i)
	       if ((abs(vmax) > 0.1) or (abs(vmin) > 0.1)) and
		   (abs(y_value) < 0.0001) then
		  begin ! Avoid rounding errors displaying very small values !
		  text(x=x-5,just = centreright,"0")
		  end
	       else
		  text(x=x-5,just = centreright,y_value)
	       end
	    end
	 else
	    x -= 5
	 add
	 line
	 x = 0
	 move
	 if graticules == on then
	    begin
	    x += w
	    add
	    line(fg = lightgrey)
	    end
	 end
      x = 0
      y = int(p_p_t * (i + 1))
      move
      end
   y = h
   x -= 11
   realf = general5
   if display_values == yes then
      begin
      if axis_no == axis_1 then
	 text(x=x-5,just = centreright,vmax)
      else
	 text(x=x-5,just = centreright,vmin)
      end
   x += 1
   move
   add
   x = 0
   add
   line
end

! Object which draws an axis pair !

object axis(x,y,w,h,
	    tfg,ch,timef,
	    tmin = time("CENTISECONDS"),
	    tmax = time("CENTISECONDS"),
	    vmin = real,
	    vmax = real,
	    graticules_x = onoff,
	    graticules_y = onoff,
	    horizontal = ta_sb_r_type,
	    vertical = ta_sb_r_type,
	    value_axis_disp = axis_use_type,
	    time_axis_disp= axis_use_type,
	    display_v_values = yesno,
	    display_t_values = yesno) = max_min_row_type

var conv_error = int
var number_of_units = real
var ns = int
var vr = real
var vpu = real
var axis_range = real
var time_axis_type = axis_type_type
var interval = int

begin
   realf = general7
   if timef <> gmt_weekday then
      timef = local_hms

   number_of_units = 10000

   axis = max_min_row_type

   ns = int((tmax - tmin) * horizontal.units_displayed)
   axis.time_min = tmin + ((tmax - tmin) * horizontal.offset)

   time_axis_type = get_time_axis_type_g1(int(ns))

   case time_axis_type of
   second
      begin
      ! 10 !
      conv_error = int(axis.time_min - min time) % 10
      if conv_error then
	 begin
	 if conv_error >= 5 then
	    axis.time_min += 10 - int(axis.time_min - min time) % 10
	 else
	    axis.time_min -= int(axis.time_min - min time) % 10
	 end

      conv_error = ns % 10
      if conv_error then
	 begin
	 if conv_error >= 5 then
	    ns += (10 - ns % 10)
	 else
	    ns -= (ns % 10)
	 end

      axis.time_max = axis.time_min + ns
      end
   minute
      begin

      conv_error = int(axis.time_min - min time) % 60
      if conv_error then
	 begin
	 if conv_error >= 30 then
	    axis.time_min += 60 - int(axis.time_min - min time) % 60
	 else
	    axis.time_min -= int(axis.time_min - min time) % 60
	 end

      conv_error = ns % 60
      if conv_error then
	 begin
	 if conv_error >= 30 then
	    ns += (60 - ns % 60)
	 else
	    ns -= (ns % 60)
	 end

      axis.time_max = axis.time_min + ns
      end
   hour
      begin
      ! 300 !
      conv_error = int(axis.time_min - min time) % 300
      if conv_error then
	 begin
	 if conv_error >= 150 then
	    axis.time_min += 300 - int(axis.time_min - min time) % 300
	 else
	    axis.time_min -= int(axis.time_min - min time) % 300
	 end

      conv_error = ns % 300
      if conv_error then
	 begin
	 if conv_error >= 150 then
	    ns += (300 - ns % 300)
	 else
	    ns -= (ns % 300)
	 end

      axis.time_max = axis.time_min + ns
      end
   day
      begin
      ! 3600 !
      conv_error = int(axis.time_min - min time) % 3600
      if conv_error then
	 begin
	 if conv_error >= 1800 then
	    axis.time_min += 3600 - int(axis.time_min - min time) % 3600
	 else
	    axis.time_min -= int(axis.time_min - min time) % 3600
	 end

      conv_error = ns % 3600
      if conv_error then
	 begin
	 if conv_error >= 1800 then
	    ns += (3600 - ns % 3600)
	 else
	    ns -= (ns % 3600)
	 end

      axis.time_max = axis.time_min + ns
      end
   week
      begin
      ! 43200 !

      conv_error = int(axis.time_min - min time) % 43200
      if conv_error then
	 begin
	 if conv_error >= 21600 then
	    axis.time_min += 43200 - int(axis.time_min - min time) % 43200
	 else
	    axis.time_min -= int(axis.time_min - min time) % 43200
	 end

      conv_error = ns % 43200
      if conv_error then
	 begin
	 if conv_error >= 21600 then
	    ns += (43200 - ns % 43200)
	 else
	    ns -= (ns % 43200)
	 end

      axis.time_max = axis.time_min + ns
      end
   year
      begin
      ! 604800 !
      conv_error = int(axis.time_min - min time) % 604800
      if conv_error then
	 begin
	 if conv_error >= 302400 then
	    axis.time_min += 604800 - int(axis.time_min - min time) % 604800
	 else
	    axis.time_min -= int(axis.time_min - min time) % 604800
	 end

      conv_error = ns % 604800
      if conv_error then
	 begin
	 if conv_error >= 302400 then
	    ns += (60 - ns % 604800)
	 else
	    ns -= (ns % 604800)
	 end

      axis.time_max = axis.time_min + ns
      end
   default
      begin
      end

   vr = (vmax - vmin) * vertical.units_displayed
   axis.value_min = vmin + ((vmax - vmin) * vertical.offset)
   axis.value_max = axis.value_min + vr


   if value_axis_disp == axis_1 or value_axis_disp == both_axes then
      begin
      ! draw left value axis !
      value_axis(refl = refl_y,axis.value_min,
		 axis.value_max, "E100 values", 0,
		 graticules_y, axis_1,display_v_values)
      end

   if time_axis_disp == axis_1 or time_axis_disp == both_axes then
      begin
      ! draw bottom time axis !
      interval = h_time_axis(refl = refl_y,axis.time_min,
			   axis.time_max,
			   graticules_x,
			   display_t_values,
			   axis_1,
			   time_axis_type)
      end

   x += w
   y -= h
   if value_axis_disp == axis_2 or value_axis_disp == both_axes then
      begin
      ! draw right value axis !
      value_axis(refl = refl_x,axis.value_min,
		 axis.value_max, "E100 values", 0,
		 off, axis_2,display_v_values)
      end

   if time_axis_disp == axis_2 or time_axis_disp == both_axes then
      begin
      ! draw top time axis !
      interval = h_time_axis(refl = refl_x,axis.time_min, axis.time_max,
			   off, display_t_values, axis_2, time_axis_type)
      end

   axis.interval = interval
end



type real_row_type = table (r = real)
type real_array_type =  real_row_type[10]
type int_row_type = table (i = int)
type int_array_type =  int_row_type[10]


object xv_h_scroll_buttons(x,y,fg,bg,functioning = yesno) = byte

var temp = byte
var wx1 = int
var wx2 = int
var wx3 = int
var temp2 = int

begin
   temp = 0
   w = 60
   h = 30
   wx1 = 5
   wx2 = 21
   wx3 = 21

   rect
   box(fg=black)
   fg = white
   x += w - 1
   y --
   move
   x -= w
   add
   y += h
   add
   line
   move
   x += 1
   add
   x += w - 1
   add
   y -= h
   add
   line
   w = 50
   h = 20
   x = 6
   y = 6

   if ((selb(x=5,y=6,h=20,w=5)) or
	 (selb(x=12,y=6,h=20,w=20)) or
	 (selb(x=34,y=6,h=20,w=20))) and functioning then
      begin
      if xp <= 10 then
	 begin
	 ! reset button in !
	 temp = 1
	 x = 6
	 y = 6
	 fg = decoron
	 rect(w=wx1)
	 fg = black
	 x += wx1 - 1
	 y --
	 move
	 x -= wx1
	 add
	 y += h + 1
	 add
	 line
	 move
	 fg = white
	 x += wx1
	 add
	 y -= h + 1
	 add
	 line

	 ! zoom in button out !
	 fg = decoroff
	 y = 6
	 x = 12
	 rect(w=wx2)
	 fg = white
	 x += wx2 - 1
	 y --
	 move
	 x -= wx2
	 add
	 y += h + 1
	 add
	 line
	 move
	 fg = black
	 x += wx2
	 add
	 y -= h + 1
	 add
	 line
	 fg = black
	 x=14
	 clear
	 y = 8
	 add
	 y += 16
	 add
	 x += 8
	 y -= 8
	 add
	 fill
	 clear
	 add
	 x += 8
	 y +=8
	 add
	 y -= 16
	 add
	 fill

	 ! zoom out button out !
	 fg = decoroff
	 y = 6
	 x = 35
	 rect(w=wx3)
	 fg = white
	 x += wx3 - 1
	 y --
	 move
	 x -= wx3
	 add
	 y += h + 1
	 add
	 line
	 move
	 fg = black
	 x += wx3
	 add
	 y -= h + 1
	 add
	 line
	 fg = black
	 clear
	 x = 36
	 y = 16
	 add
	 x += 8
	 y += 8
	 add
	 y -= 16
	 add
	 fill
	 clear

	 x += 2
	 add
	 x += 8
	 y += 8
	 add
	 x -= 8
	 y += 8
	 add
	 fill
	 end

      if xp >= 12 and xp <= 32 then
	 begin
	 ! Reset button out !
	 x = 6
	 y = 6
	 fg = decoroff
	 rect
	 fg = white
	 x += wx1 - 1
	 y --
	 move
	 x -= wx1
	 add
	 y += h + 1
	 add
	 line
	 move
	 fg = black
	 x += wx1
	 add
	 y -= h + 1
	 add
	 line

	 ! zoom in button in !
	 temp = 2
	 x =12
	 y = 6
	 fg = decoron
	 rect(w=wx2)
	 fg = black
	 x += wx2 - 1
	 y --
	 move
	 x -= wx2
	 add
	 y += h + 1
	 add
	 line
	 move
	 fg = white
	 x += wx2
	 add
	 y -= h + 1
	 add
	 line

	 fg = black
	 x=14
	 clear
	 y = 8
	 add
	 y += 16
	 add
	 x += 8
	 y -= 8
	 add
	 fill
	 clear
	 add
	 x += 8
	 y +=8
	 add
	 y -= 16
	 add
	 fill

	 ! zoom out button out !
	 fg = decoroff
	 y = 6
	 x = 35
	 rect(w=wx3)
	 fg = white
	 x += wx3 - 1
	 y --
	 move
	 x -= wx3
	 add
	 y += h + 1
	 add
	 line
	 move
	 fg = black
	 x += wx3
	 add
	 y -= h + 1
	 add
	 line
	 fg = black
	 clear
	 x = 36
	 y = 16
	 add
	 x += 8
	 y += 8
	 add
	 y -= 16
	 add
	 fill
	 clear

	 x += 2
	 add
	 x += 8
	 y += 8
	 add
	 x -= 8
	 y += 8
	 add
	 fill
	 end

      if xp >= 34 and xp <= 54 then
	 begin
	 ! Reset button out !
	 x = 6
	 y = 6
	 fg = decoroff
	 rect
	 fg = white
	 x += wx1 - 1
	 y --
	 move
	 x -= wx1
	 add
	 y += h + 1
	 add
	 line
	 move
	 fg = black
	 x += wx1
	 add
	 y -= h + 1
	 add
	 line

	 ! zoom in button out !
	 fg = decoroff
	 y = 6
	 x = 12
	 rect(w=wx2)
	 fg = white
	 x += wx2 - 1
	 y --
	 move
	 x -= wx2
	 add
	 y += h + 1
	 add
	 line
	 move
	 fg = black
	 x += wx2
	 add
	 y -= h + 1
	 add
	 line
	 fg = black
	 x=14
	 clear
	 y = 8
	 add
	 y += 16
	 add
	 x += 8
	 y -= 8
	 add
	 fill
	 clear
	 add
	 x += 8
	 y +=8
	 add
	 y -= 16
	 add
	 fill

	 !zoom out button in !
	 temp = 3
	 x = 35
	 y = 6
	 fg = decoron
	 rect(w=wx3)
	 fg = black
	 x += wx3 - 1
	 y --
	 move
	 x -= wx3
	 add
	 y += h + 1
	 add
	 line
	 move
	 fg = white
	 x += wx3
	 add
	 y -= h + 1
	 add
	 line
	 fg = black
	 clear
	 x = 36
	 y = 16
	 add
	 x += 8
	 y += 8
	 add
	 y -= 16
	 add
	 fill
	 clear

	 x += 2
	 add
	 x += 8
	 y += 8
	 add
	 x -= 8
	 y += 8
	 add
	 fill
	 end
      end
   else
      begin
      ! Reset button out !
      x = 6
      y = 6
      fg = decoroff
      rect
      fg = white
      x += wx1 - 1
      y --
      move
      x -= wx1
      add
      y += h + 1
      add
      line
      move
      fg = black
      x += wx1
      add
      y -= h + 1
      add
      line

      ! zoom in button out !
      fg = decoroff
      y = 6
      x = 12
      rect(w=wx2)
      fg = white
      x += wx2 - 1
      y --
      move
      x -= wx2
      add
      y += h + 1
      add
      line
      move
      fg = black
      x += wx2
      add
      y -= h + 1
      add
      line
      if functioning == yes then
	 fg = black
      else
	 fg = lightgrey
      x=14
      clear
      y = 8
      add
      y += 16
      add
      x += 8
      y -= 8
      add
      fill
      clear
      add
      x += 8
      y +=8
      add
      y -= 16
      add
      fill

      ! zoom out button out !
      fg = decoroff
      y = 6
      x = 35
      rect(w=wx3)
      fg = white
      x += wx3 - 1
      y --
      move
      x -= wx3
      add
      y += h + 1
      add
      line
      move
      fg = black
      x += wx3
      add
      y -= h + 1
      add
      line
      if functioning == yes then
	 fg = black
      else
	 fg = lightgrey
      clear
      x = 36
      y = 16
      add
      x += 8
      y += 8
      add
      y -= 16
      add
      fill
      clear

      x += 2
      add
      x += 8
      y += 8
      add
      x -= 8
      y += 8
      add
      fill
      end
   xv_h_scroll_buttons = temp
end

object xv_v_scroll_buttons(x,y,fg,bg) = byte

var temp = byte
var hx1 = int
var hx2 = int
var hx3 = int
var ww = int

begin
   temp = 0
   w = 30
   h = 60
   hx1 = 5
   hx2 = 21
   hx3 = 21
   ww = 21

   rect
   box(fg=black)
   fg = white
   x += w - 1
   y --
   move
   x -= w
   add
   y += h
   add
   line
   move
   x += 1
   add
   x += w - 1
   add
   y -= h
   add
   line
   w = 20
   h = 50
   x = 5
   y = 5

   if ((selb(x=5,y=6,h=20,w=20)) or
	 (selb(x=5,y=29,h=20,w=20)) or
	 (selb(x=5,y=51,h=5,w=20))) then
      begin
      if yp >=50 then
	 begin
	 ! reset button in !
	 temp = 1
	 x = 5
	 y = 50
	 fg = decoron
	 rect(h=hx1)
	 fg = black
	 x += ww - 1
	 y --
	 move
	 x -= ww
	 add
	 y += hx1 + 1
	 add
	 line
	 move
	 fg = white
	 x += ww
	 add
	 y -= hx1 + 1
	 add
	 line

	 ! zoom in button out !
	 fg = decoroff
	 y = 28
	 x = 5
	 rect(w=ww,h=hx2)
	 fg = white
	 x += ww - 1
	 y --
	 move
	 x -= ww
	 add
	 y += hx2 + 1
	 add
	 line
	 move
	 fg = black
	 x += ww
	 add
	 y -= hx2 + 1
	 add
	 line
	 ! triangles !
	 fg = black
	 x=7
	 clear
	 y = 30
	 add
	 x += 16
	 add
	 y += 8
	 x -= 8
	 add
	 fill
	 clear
	 add
	 x += 8
	 y +=8
	 add
	 x -= 16
	 add
	 fill

	 ! zoom out button out !
	 fg = decoroff
	 x = 5
	 y = 5
	 rect(w=ww,h=hx3)
	 fg = white
	 x += ww - 1
	 y --
	 move
	 x -= ww
	 add
	 y += hx3 + 1
	 add
	 line
	 move
	 fg = black
	 x += ww
	 add
	 y -= hx3 + 1
	 add
	 line
	 fg = black
	 clear
	 y = 7
	 x = 15
	 add
	 y += 8
	 x += 8
	 add
	 x -= 16
	 add
	 fill
	 clear

	 y += 2
	 add
	 x += 8
	 y += 8
	 add
	 y -= 8
	 x += 8
	 add
	 fill
	 end

      if yp >= 28 and yp <= 48 then
	 begin
	 ! Reset button out !
	 x = 5
	 y = 51
	 fg = decoroff
	 rect(w=ww, h=hx1)
	 fg = white
	 x += ww - 1
	 y --
	 move
	 x -= ww
	 add
	 y += hx1 + 1
	 add
	 line
	 move
	 fg = black
	 x += ww
	 add
	 y -= hx1 + 1
	 add
	 line

	 ! zoom in button in !
	 temp = 2
	 x = 5
	 y = 28
	 fg = decoron
	 rect(h=hx2,w=ww)
	 fg = black
	 x += ww - 1
	 y --
	 move
	 x -= ww
	 add
	 y += hx2 + 1
	 add
	 line
	 move
	 fg = white
	 x += ww
	 add
	 y -= hx2 + 1
	 add
	 line

	 fg = black
	 x=7
	 clear
	 y = 30
	 add
	 x += 16
	 add
	 y += 8
	 x -= 8
	 add
	 fill
	 clear
	 add
	 x += 8
	 y +=8
	 add
	 x -= 16
	 add
	 fill

	 ! zoom out button out !
	 fg = decoroff
	 x = 5
	 y = 5
	 rect(w=ww,h=hx3)
	 fg = white
	 x += ww - 1
	 y --
	 move
	 x -= ww
	 add
	 y += hx3 + 1
	 add
	 line
	 move
	 fg = black
	 x += ww
	 add
	 y -= hx3 + 1
	 add
	 line
	 fg = black
	 clear
	 y = 7
	 x = 15
	 add
	 y += 8
	 x += 8
	 add
	 x -= 16
	 add
	 fill
	 clear

	 y += 2
	 add
	 x += 8
	 y += 8
	 add
	 y -= 8
	 x += 8
	 add
	 fill
	 end

      if yp >= 5 and yp < 28 then
	 begin
	 ! Reset button out !
	 x = 5
	 y = 51
	 fg = decoroff
	 rect(w=ww, h=hx1)
	 fg = white
	 x += ww - 1
	 y --
	 move
	 x -= ww
	 add
	 y += hx1 + 1
	 add
	 line
	 move
	 fg = black
	 x += ww
	 add
	 y -= hx1 + 1
	 add
	 line

	 ! zoom in button out !
	 fg = decoroff
	 y = 28
	 x = 5
	 rect(w=ww,h=hx2)
	 fg = white
	 x += ww - 1
	 y --
	 move
	 x -= ww
	 add
	 y += hx2 + 1
	 add
	 line
	 move
	 fg = black
	 x += ww
	 add
	 y -= hx2 + 1
	 add
	 line
	 ! triangles !
	 fg = black
	 x=7
	 clear
	 y = 30
	 add
	 x += 16
	 add
	 y += 8
	 x -= 8
	 add
	 fill
	 clear
	 add
	 x += 8
	 y +=8
	 add
	 x -= 16
	 add
	 fill

	 !zoom out button in !
	 temp = 3
	 x = 5
	 y = 5
	 fg = decoron
	 rect(w=ww,h=hx3)
	 fg = black
	 x += ww - 1
	 y --
	 move
	 x -= ww
	 add
	 y += hx3 + 1
	 add
	 line
	 move
	 fg = white
	 x += ww
	 add
	 y -= 21
	 add
	 line
	 fg = black
	 clear
	 x = 15
	 y = 7
	 add
	 x += 8
	 y += 8
	 add
	 x -= 16
	 add
	 fill
	 clear

	 y += 2
	 add
	 x += 8
	 y += 8
	 add
	 y -= 8
	 x += 8
	 add
	 fill
	 end
      end
   else
      begin
      ! Reset button out !
      x = 5
      y = 51
      fg = decoroff
      rect(w=ww, h=hx1)
      fg = white
      x += ww - 1
      y --
      move
      x -= ww
      add
      y += hx1 + 1
      add
      line
      move
      fg = black
      x += ww
      add
      y -= hx1 + 1
      add
      line

      ! zoom in button out !
      fg = decoroff
      y = 28
      x = 5
      rect(w=ww,h=hx2)
      fg = white
      x += ww - 1
      y --
      move
      x -= ww
      add
      y += hx2 + 1
      add
      line
      move
      fg = black
      x += ww
      add
      y -= hx2 + 1
      add
      line
      ! triangles !
      fg = black
      x=7
      clear
      y = 30
      add
      x += 16
      add
      y += 8
      x -= 8
      add
      fill
      clear
      add
      x += 8
      y +=8
      add
      x -= 16
      add
      fill

      ! zoom out button out !
      fg = decoroff
      x = 5
      y = 5
      rect(w=ww,h=hx3)
      fg = white
      x += ww - 1
      y --
      move
      x -= ww
      add
      y += hx3 + 1
      add
      line
      move
      fg = black
      x += ww
      add
      y -= hx3 + 1
      add
      line
      fg = black
      clear
      y = 7
      x = 15
      add
      y += 8
      x += 8
      add
      x -= 16
      add
      fill
      clear

      y += 2
      add
      x += 8
      y += 8
      add
      y -= 8
      x += 8
      add
      fill

   end
   xv_v_scroll_buttons = temp
end


object xv_h_axis_scroll(x,y,w,fg,n_shifts = int,reset_sb = byte,sb = int,
			display = int)
	= ta_sb_r_type

var max_gauge_width = loopback int
var new_gauge_width = loopback real
var gauge_width = loopback real_array_type
var p_p_u = loopback real
var x_pos = loopback real_array_type
var offset = loopback real
var number_of_units = loopback int_array_type
var valid_row = loopback ta_sb_r_type
var invalid_width = loopback int
var initialise = loopback byte
var shift_value = loopback real
var i = int
var old_sb = loopback int

begin
h = 30
shift_value = 10000.0/n_shifts
if invalid initialise then
   begin
   for i from 1 to 10 do
      begin
      set default x_pos[i]
      x_pos[i].r = 34
      end
   offset = 68
   p_p_u = (w - offset)/10000
   old_sb = sb
   set default initialise
   end

if old_sb <> sb then
   begin
   old_sb = sb
   new_gauge_width = invalid_width
   end

if invalid number_of_units then
   begin
   for i from 1 to 10 do
      begin
      set default number_of_units[i]
      number_of_units[i].i = 10000
      end
   end

if invalid gauge_width then
   begin
   x_pos[sb].r = 34
   number_of_units[sb].i = 10000
   max_gauge_width = int(w - offset)
   for i from 1 to 10 do
      begin
      set default gauge_width[i]
      gauge_width[i].r = max_gauge_width
      end
   end

set default valid_row
xv_h_axis_scroll = valid_row


if reset_sb == 1 then
   begin
   x_pos[sb].r = 34
   number_of_units[sb].i = 10000
   max_gauge_width = int(w - offset)
   gauge_width[sb].r = max_gauge_width
   new_gauge_width = invalid_width
   end
if reset_sb == 2 then
   begin
   number_of_units[sb].i -= int(shift_value)
   new_gauge_width = number_of_units[sb].i * p_p_u
   end
if reset_sb == 3 then
   begin
   number_of_units[sb].i += int(shift_value)
   new_gauge_width = number_of_units[sb].i * p_p_u
   end

if display then
   begin
   rect
   box(fg = black)
   fg = white
   x += w - 1 y -- move
   x -= w add
   y += h add
   line


   move
   x += 1 add
   x += w - 1 add
   y -= h add
   line
   end

if valid new_gauge_width then
   begin
   if (new_gauge_width < shift_value * p_p_u) then
       begin
      number_of_units[sb].i = int(shift_value)
      gauge_width[sb].r = shift_value * p_p_u
      end
   else if (new_gauge_width > max_gauge_width) then
      begin
      number_of_units[sb].i = 10000
      gauge_width[sb].r = max_gauge_width
      end
   else
      gauge_width[sb].r = new_gauge_width
   new_gauge_width = invalid_width
   end

x = 5 y = 5
fg = decoroff
if xv_endbox then
   x_pos[sb].r = 34

x = 12

if xv_left_slider then
   begin
   if (x_pos[sb].r - shift_value * p_p_u) >= 34 then
      x_pos[sb].r -= shift_value * p_p_u
   else
      x_pos[sb].r = 34
   end
x = w - 32
if xv_right_slider then
   begin
   if (x_pos[sb].r + shift_value * p_p_u) <=
				     (w - 34 - gauge_width[sb].r) then
      x_pos[sb].r += shift_value * p_p_u
   else
      x_pos[sb].r = w - 34 - gauge_width[sb].r
   end

x = w - 10
if xv_endbox then
   x_pos[sb].r = w - 34 - gauge_width[sb].r

if (x_pos[sb].r + gauge_width[sb].r > w - offset/2) then
   x_pos[sb].r = w - 34 - gauge_width[sb].r

if x_pos[sb].r <= offset/2 then
   x_pos[sb].r = 34

if display then
   begin
   x = 33 y = 15 move
   x = w - 34 add
   line(lw = 5,fg = decorlight)

   y = 10 x = int(x_pos[sb].r)
   h = 10 w = int(gauge_width[sb].r)
   rect(fg = white)
   x +=2 y +=2
   rect(fg=black)
   x -- y --
   rect(fg=red3)

   y+=6

   x = int(x_pos[sb].r) + 2 y -=1 move
   x += int(gauge_width[sb].r) - 4 add
   line(lw = 4,fg = decorlight)

   x = int(x_pos[sb].r) + 2 y += 1 move
   x += int(gauge_width[sb].r) - 4 add
   line(lw = 2,fg=decorshadow)
   end

xv_h_axis_scroll.offset = ((x_pos[sb].r - 34)/p_p_u)/10000.00
xv_h_axis_scroll.units_displayed = gauge_width[sb].r/max_gauge_width
end

object xv_v_axis_scroll(x,y,h,fg,n_shifts = int,reset_sb = byte,sb = int,
			display = int) = ta_sb_r_type

var max_gauge_width = loopback int
var new_gauge_width = loopback real
var gauge_width = loopback real_array_type
var p_p_u = loopback real
var y_pos = loopback real_array_type
var offset = loopback real
var number_of_units = loopback int_array_type
var valid_row = loopback ta_sb_r_type
var invalid_width = loopback int
var initialise = loopback byte
var shift_value = loopback real
var i = int
var old_sb = loopback int
var increasing = yesno

begin
w = 30
shift_value = 10000.0/n_shifts
if invalid initialise then
   begin
   for i from 1 to 10 do
      begin
      set default y_pos[i]
      y_pos[i].r = 34
      end
   offset = 68
   p_p_u = (h - offset)/10000
   old_sb = sb
   set default initialise
   end

if old_sb <> sb then
   begin
   old_sb = sb
   new_gauge_width = invalid_width
   end

if invalid number_of_units then
   begin
   for i from 1 to 10 do
      begin
      set default number_of_units[i]
      number_of_units[i].i = 10000
      end
   end

if invalid gauge_width then
   begin
   y_pos[sb].r = 34
   number_of_units[sb].i = 10000
   max_gauge_width = int(h - offset)
   for i from 1 to 10 do
      begin
      set default gauge_width[i]
      gauge_width[i].r = max_gauge_Width
      end
   end

set default valid_row
xv_v_axis_scroll = valid_row

if reset_sb == 1 then
   begin
   y_pos[sb].r = 34
   number_of_units[sb].i = 10000
   max_gauge_width = int(h - offset)
   gauge_width[sb].r = max_gauge_width
   new_gauge_width = invalid_width
   end

if reset_sb == 2 then
   begin
   number_of_units[sb].i -= int(shift_value)
   new_gauge_width = number_of_units[sb].i * p_p_u
   increasing = no
   end

if reset_sb == 3 then
   begin
   number_of_units[sb].i += int(shift_value)
   new_gauge_width = number_of_units[sb].i * p_p_u
   increasing = yes
   end

if display then
   begin
   rect
   box(fg = black)

   fg = white

   x += w - 1 y -- move
   x -= w add
   y += h add
   line

   move
   x += 1 add
   x += w - 1 add
   y -= h add
   line
   end

fg = decoroff

x = 5 y = 5

if xv_v_endbox then
   y_pos[sb].r = 34

if valid new_gauge_width then
   begin
   if (new_gauge_width < shift_value * p_p_u) then
      begin
      number_of_units[sb].i = int(shift_value)
      gauge_width[sb].r = shift_value * p_p_u
      y_pos[sb].r = y_pos[sb].r + (shift_value * p_p_u) -
		     (gauge_width[sb].r - new_gauge_width )
      end
   else if (new_gauge_width > max_gauge_width) then
      begin
      number_of_units[sb].i = 10000
      gauge_width[sb].r = max_gauge_width
      y_pos[sb].r = 34
      end
   else
      begin
      gauge_width[sb].r = new_gauge_width
      if increasing == no then
	 y_pos[sb].r += shift_value * p_p_u
      else
	 begin
	 y_pos[sb].r -= shift_value * p_p_u
	 if y_pos[sb].r < 34 then
	    y_pos[sb].r = 34
	 end
      end
   new_gauge_width = invalid_width
   end

y += 7

if xv_up_slider then
   begin
   if (y_pos[sb].r - shift_value * p_p_u) > 34 then
      y_pos[sb].r -= shift_value * p_p_u
   else
      y_pos[sb].r = 34
   end

y = h - 32
if xv_down_slider then
   begin
   if (y_pos[sb].r + shift_value * p_p_u) < (h - 34 - gauge_width[sb].r) then
      y_pos[sb].r += shift_value * p_p_u
   else
      y_pos[sb].r = h - 34 - gauge_width[sb].r
   end

y = h - 10
if xv_v_endbox then
   y_pos[sb].r = h - 34 - gauge_width[sb].r

if (y_pos[sb].r + gauge_width[sb].r > h - offset/2) then
   y_pos[sb].r = h- 34 - gauge_width[sb].r

if y_pos[sb].r <= offset/2 then
   y_pos[sb].r = 34

if display then
   begin
   y = 33 x = 15 move
   y = h - 34 add
   line(lw = 5,fg = decorlight)

   x = 8 y = int(y_pos[sb].r)
   w = 10 h = int(gauge_width[sb].r)
   rect(fg = white)
   x +=2 y +=2
   rect(fg=black)
   x -- y --
   rect(fg=red3)

   y = int(y_pos[sb].r) + 2 x += 5 move
   y += int(gauge_width[sb].r) - 4 add
   line(lw = 4,fg = decorlight)

   y = int(y_pos[sb].r) + 2 x += 1 move
   y += int(gauge_width[sb].r) - 4 add
   line(lw = 2,fg=decorshadow)
   end

xv_v_axis_scroll.offset = ((max_gauge_width + 34 -
	     (y_pos[sb].r + gauge_width[sb].r))/p_p_u)/10000.00
xv_v_axis_scroll.units_displayed = gauge_width[sb].r/max_gauge_width

end

type xy_coords = table (x = int,y = int)
type hist_type = table (top = int,bot = int)

! Graph sets up a request for trend data from a server and displays valid
  data which falls within the ranges specified !


object find_v_from_t(trendtable = trendtable_type,
			    tval = time("CENTISECONDS")) = real
var i = int
var r = real
begin

   i = 1
   while (i <= lastrow trendtable) do
      begin
      if trendtable[i].sample_date == tval then
	 begin
	 find_v_from_t = trendtable[i].sample_value
	 i = lastrow trendtable + 1
	 end
      else if trendtable[i].sample_date > tval and
	  trendtable[i + 1].sample_date < tval then
	 begin
	 if trendtable[i].sample_value ==
				trendtable[i + 1].sample_value then
	    find_v_from_t = trendtable[i].sample_value
	 else
	    begin
	    r = real(trendtable[i].sample_date - trendtable[i + 1].sample_date)
		/ (trendtable[i].sample_value - trendtable[i + 1].sample_value)
	    find_v_from_t =  trendtable[i + 1].sample_value +
		(real(tval - time(trendtable[i + 1].sample_date))/r)
	    end
	 i = lastrow trendtable + 1
	 end
      i ++
      end
end


object find_v_from_t_hist(trendtable = trendtable_type,
				tval = time("CENTISECONDS")) = real
var i = int
var row = int
var t_int = DIFFTIME("CENTISECONDS")
var t_join = time
("CENTISECONDS")
begin
   i = 1
   while (i <= lastrow trendtable) do
      begin
      if (i < lastrow trendtable) then
	 begin
	 if (trendtable[i].sample_date > tval) and
	    (trendtable[i+1].sample_date < tval) then
	    begin
	    t_int = trendtable[i].sample_date - trendtable[i+1].sample_date
	    t_join = trendtable[i+1].sample_date + int(t_int) / 2
	    if tval < t_join then
	       find_v_from_t_hist = trendtable[i+1].sample_value
	    else
	       find_v_from_t_hist = trendtable[i].sample_value
	    row = i
	    i = lastrow trendtable
	    end
	 end
      else
	 begin
	 find_v_from_t_hist = trendtable[i].sample_value
	 row = i
	 end
      i ++
      end
end

object convert_to_x_pixels(w,tmax = time("CENTISECONDS"),tmin = time("CENTISECONDS"),
			   tv = time("CENTISECONDS")) = int
begin
   convert_to_x_pixels = int((w/real(tmax - tmin)) * (tv - tmin))
end



object convert_to_y_pixels(h,vmax = real,vmin = real,vv = real) = int

var l_vmin = real
var axis_range = real
var ppv = real
var l_vv = real

begin
   convert_to_y_pixels = int((h/real(vmax - vmin)) * (vv - vmin))
end

object convert_to_y_pixels_hist(h,vmax = real,vmin = real,vv = real,
				in_range = int) = hist_type

begin
   convert_to_y_pixels_hist = hist_type
   case in_range of
   4 ! value > vmax !
      begin
      convert_to_y_pixels_hist.top = h
      if (vmin >= 0) then
	 convert_to_y_pixels_hist.bot = 0
      else
	 begin
	 if (vmax <= 0) then
	    convert_to_y_pixels_hist.bot = h
	 else
	    convert_to_y_pixels_hist.bot =
	       abs (int((h/real(vmax - vmin)) * vmin))
	 end
      end
   6 ! value < vmin !
      begin
      convert_to_y_pixels_hist.bot = 0
      if (vmin >= 0) then
	 convert_to_y_pixels_hist.top = 0
      else
	 begin
	 if (vmax <= 0) then
	    convert_to_y_pixels_hist.top = h
	 else
	    convert_to_y_pixels_hist.top =
	       abs (int((h/real(vmax - vmin)) * vmin))
	 end
      end
   5 ! value is in range !
      begin
      if vv >= 0 then
	 begin
	 convert_to_y_pixels_hist.top =
	    int((h/real(vmax - vmin)) * (vv - vmin))
	 if vmin >= 0.0 then
	    convert_to_y_pixels_hist.bot = 0
	 else
	 convert_to_y_pixels_hist.bot =
	    abs (int((h/real(vmax - vmin)) * vmin))
	 end
      else
	 begin
	 convert_to_y_pixels_hist.bot =
	    int((h/real(vmax - vmin)) * (vv - vmin))
	 if vmax >= 0  then
	    convert_to_y_pixels_hist.top =
	       abs (int((h/real(vmax - vmin)) * vmin))
	 else
	    convert_to_y_pixels_hist.top = h
	 end
      end
   default
      begin
      end
end

object get_location(vmax = real,vmin = real,
		    tmax = time("CENTISECONDS"), tmin = time("CENTISECONDS"),
		    tv = time("CENTISECONDS"),vv = real) = int
begin

   if tv > tmax then
      begin
      if vv > vmax then
	 get_location = 1
      else if vv > vmin then
	 get_location = 2
      else
	 get_location = 3
      end
   else if tv >= tmin then
      begin
      if vv > vmax then
	 get_location = 4
      else if vv >= vmin then
	 get_location = 5
      else
	 get_location = 6
      end
   else
      begin
      if vv > vmax then
	 get_location = 7
      else if vv >= vmin then
	 get_location = 8
      else
	 get_location = 9
      end

end

object x_vmax(w,h,vmax = real,vmin = real,
	      tmax = time("CENTISECONDS"),tmin = time("CENTISECONDS"),
	      t_1 = time("CENTISECONDS"),
	      v_1 = real,
	      t_2 = time("CENTISECONDS"),
	      v_2 = real) = xy_coords
var r = real
var t = time("CENTISECONDS")
begin

   r = (v_1 - v_2)/real(t_1 - t_2)

   if r == 0 then
     t = t_1
   else if r < 0 then
      t = time(t_1 - ((v_1 - vmax)/r))
   else
      t = time(t_2 + ((vmax - v_2)/r))

   if t >= tmin and t <= tmax then
      begin
      x_vmax = xy_coords
      x_vmax.x = convert_to_x_pixels(tmax,tmin,t)
      x_vmax.y = h
      end

end

object x_vmin(w,h,vmax = real,vmin = real,
		  tmax = time("CENTISECONDS"),tmin = time("CENTISECONDS"),
		  t_1 = time("CENTISECONDS"),
		  v_1 = real,
		  t_2 = time("CENTISECONDS"),
		  v_2 = real) = xy_coords
var r = real
var t = time("CENTISECONDS")
begin

   r = (v_1 - v_2)/real(t_1 - t_2)

   if r == 0 then
     t = t_1
   else if r < 0 then
      t = time(t_1 - ((v_1 - vmin)/r))
   else
      t = time(t_2 + ((vmin - v_2)/r))

   if t >= tmin and t <= tmax then
      begin
      x_vmin = xy_coords
      x_vmin.x = convert_to_x_pixels(tmax,tmin,t)
      x_vmin.y = 0
      end

end

object x_tmax(w,h,vmax = real,vmin = real,
		  tmax = time("CENTISECONDS"),tmin = time("CENTISECONDS"),
		  t_1 = time("CENTISECONDS"),
		  v_1 = real,
		  t_2 = time("CENTISECONDS"),
		  v_2 = real) = xy_coords
var r = real
var v = real
begin

   r = (v_1 - v_2)/real(t_1 - t_2)

   if r == 0 then
      v = v_1
   else if r < 0 then
      v = v_1 + (real(tmax - t_1) * r)
   else
      v = v_2 + (real(tmax - t_2) * r)
   if v >= vmin and v <= vmax then
      begin
      x_tmax = xy_coords
      x_tmax.x = w
      x_tmax.y = convert_to_y_pixels(vmax,vmin,v)
      end
end

object x_tmin(w,h,vmax = real,vmin = real,
		  tmax = time("CENTISECONDS"),tmin = time("CENTISECONDS"),
		  t_1 = time("CENTISECONDS"),
		  v_1 = real,
		  t_2 = time("CENTISECONDS"),
		  v_2 = real) = xy_coords
var r = real
var v = real
begin

   r = (v_1 - v_2)/real(t_1 - t_2)

   if r == 0 then
      v = v_1
   else if r < 0 then
      v = v_1 + (real(tmin - t_1) * r)
   else
      v = v_2 + (real(tmin - t_2) * r)

   if v >= vmin and v <= vmax then
      begin
      x_tmin = xy_coords
      x_tmin.x = 0
      x_tmin.y = convert_to_y_pixels(vmax,vmin,v)
      end
end

object display_points_and_values_line(x, y, refl,fg,
				     val = real,
				     usearc = yesno,
				     points = yesno,
				     display_values = yesno)

begin
   realf = general7
   if points == yes then
      begin
      if usearc == yes then
	 arc(just = centrecentre,w=5,h=5)
      else
	 disk(just = centrecentre,w=5,h=5)
      end

   if display_values == yes  and usearc == no then
      text(just=bottomleft,ch=10,x=x+10, val)
end

object display_points_and_values_hist(x, y,h,w, refl, fg,
				     val = real,
				     bot = int,
				     height = int,
				     width = int,
				     points = yesno,
				     display_values = yesno)

var xx = int
var yy = int

begin
   realf = general7
   ch = 12

   xx = x-width/2
   if points == yes then
      begin
      if val >= 0 then
	 yy = bot + height
      else
	 yy = bot
      disk(x=xx,y=yy,just = centrecentre,w=5,h=5)
      end

   if display_values == yes then
      begin
      if val >= 0 then
	 begin
	 if (height + bot + (3*ch) > h) then
	    yy = bot + height - ch
	 else
	    yy = bot + height + (2*ch)
	 text(x=xx, y=yy, just = bottomcentre, val)
	 end
      else
	 begin
	 if (bot - (3*ch) < 0) then
	    yy = bot + ch
	 else
	    yy = bot - (2*ch)
	 text(x=xx, y=yy, just = topcentre, val)
	 end
      end
end

object drawbarline(x,y,w,h,lw,fg,bg,refl,
		    tmin = time("CENTISECONDS"),
		    tmax = time("CENTISECONDS"),
		    vmin = real,
		    vmax = real,
		    points = yesno,
		    addr = db_address,
		    trendtable = trendtable_type,
		    display_values = yesno) = value_row_type
var i = int
var j = int
var ip_x = int
var pps = real
var tvalue = time("CENTISECONDS")
var p_location = loopback int
var xy = loopback xy_coords
var completed = loopback yesno
var height = int
var x1 = int
var x2 = int
var width = int
var box_size = hist_type
var old_x = loopback int
var old_w = loopback int
var first_point = loopback int
var yy = int

begin
   old_x = 0
   old_w = 0
   first_point = 1
   completed = no
   ip_x = x

   j = 1
   i = 2 !do not plot the first point as this is interpolated !
   while j <= lastrow trendtable do  ! Move to first plottable point in table !
      begin
      if trendtable[j].sample_date >= tmax and
	  trendtable[j + 1].sample_date < tmax then
	 begin
	 i = j
	 j = lastrow trendtable
	 end
      j ++
      end

   while i <= lastrow trendtable do    ! Plot points !
      begin
      p_location = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i].sample_date),
				trendtable[i].sample_value)
      if p_location == 4 or p_location == 5 or p_location == 6 then
	 begin
	 if i < lastrow trendtable then
	    begin
	    x1 = convert_to_x_pixels(tmax,tmin,
		       time(trendtable[i].sample_date))
	    x2 = convert_to_x_pixels(tmax,tmin,
		       time(trendtable[i+1].sample_date))
	    width = (x1 - x2)/2
	    end
	 else
	    width = (convert_to_x_pixels(tmax,tmin,
		       time(trendtable[i].sample_date)))/2
	 if width > 10 then
	    width = 10
	 if width < 1 then
	    width = 1
	 end
      case p_location of

      4
	 begin
	 x = convert_to_x_pixels(tmax,tmin,time(trendtable[i].sample_date))
	    + width/2
	 if x > w then ! Clip right !
	    begin
	    width = width - (x - w)
	    x = w
	    end
	 if (x - width) < 0 then ! Clip left !
	    width = x
	 box_size = convert_to_y_pixels_hist(vmax,vmin,
		       trendtable[i].sample_value,p_location)
	 height = abs (box_size.top - box_size.bot)
	 rect(just = topright, w=width, h=height, y = box_size.bot)
	 end
      5
	 begin
	 x = convert_to_x_pixels(tmax,tmin,time(trendtable[i].sample_date))
	    + width/2
	 if x > w then ! clip right !
	    begin
	    width = width - (x - w)
	    x = w
	    end
	 if (x - width) < 0 then ! clip left !
	    width = x
	 box_size = convert_to_y_pixels_hist(vmax,vmin,
		       trendtable[i].sample_value,p_location)
	 height = abs (box_size.top - box_size.bot)
	 rect(just = topright, w=width, h=height, y = box_size.bot)
	 display_points_and_values_hist(trendtable[i].sample_value,
				  box_size.bot, height, width,
				  points, display_values)
	 end

      6
	 begin
	 x = convert_to_x_pixels(tmax,tmin,time(trendtable[i].sample_date))
	    + width/2
	 if x > w then ! clip right !
	    begin
	    width = width - (x - w)
	    x = w
	    end
	 if (x - width) < 0 then ! clip left !
	    width = x
	 box_size = convert_to_y_pixels_hist(vmax,vmin,
		       trendtable[i].sample_value,p_location)
	 height = abs (box_size.top - box_size.bot)
	 box(just = topright, w=width, h=height, y = box_size.bot)
	 end
      7
	 begin
	 completed = yes
	 end
      8
	 begin
	 completed = yes
	 end
      9
	 begin
	 completed = yes
	 end
      default
	 begin
	 end

      if completed == yes then
	 i = lastrow trendtable
      i ++
      end

   if selb (x = 0,y = 0) then    ! Calculate intersetion with cursor line !
      begin
      pps = w / real(tmax - tmin)
      tvalue = tmin + ((xp - ip_x) / pps)
      drawbarline = value_row_type
      drawbarline.vv = find_v_from_t_hist(trendtable,tvalue)
      drawbarline.tv = tvalue
      end

   if invalid drawbarline then
      begin
      drawbarline = value_row_type
      drawbarline.tv = min time
      drawbarline.vv = 9999
      end
end

object drawhistline(x,y,w,h,lw,fg,bg,refl,
		    tmin = time("CENTISECONDS"),
		    tmax = time("CENTISECONDS"),
		    vmin = real,
		    vmax = real,
		    points = yesno,
		    addr = db_address,
		    trendtable = trendtable_type,
		    display_values = yesno) = value_row_type
var i = int
var j = int
var ip_x = int
var pps = real
var tvalue = time("CENTISECONDS")
var p_location = loopback int
var xy = loopback xy_coords
var completed = loopback yesno
var height = int
var x1 = int
var x2 = int
var width = int
var box_size = hist_type
var old_x = loopback int
var old_w = loopback int
var first_point = loopback int
var yy = int

begin
   patt = SLOPELEFT
   fs = FILLPATT
   old_x = 0
   old_w = 0
   first_point = 1
   completed = no
   ip_x = x

   j = 1
   i = 2 !do not plot the first point as this is interpolated !
   while j <= lastrow trendtable do  ! Move to first plottable point in table !
      begin
      if trendtable[j].sample_date >= tmax and
	  trendtable[j + 1].sample_date < tmax then
	 begin
	 i = j
	 j = lastrow trendtable
	 end
      j ++
      end

   while i <= lastrow trendtable do    ! Plot points !
      begin
      p_location = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i].sample_date),
				trendtable[i].sample_value)
      case p_location of

      4
	 begin
	 ! calculate width of histogram bars !
	 if i < lastrow trendtable then
	    begin
	    x1 = convert_to_x_pixels(tmax,tmin,
		       time(trendtable[i].sample_date))
	    x2 = convert_to_x_pixels(tmax,tmin,
		       time(trendtable[i+1].sample_date))
	    width = x1 - x2
	    end
	 else
	    width = 0
	 if first_point == 1 then
	    begin
	    first_point = 0
	    x = convert_to_x_pixels(tmax,
			tmin,time(trendtable[i].sample_date))
	    x = x + width/2
	    if x > w then
	       begin
	       width = width - (x - w)
	       x = w
	       end
	    end
	 else
	    x = old_x - old_w
	 old_w = width
	 old_x = x
	 if (x - width) < 0 then
	    width = x
	 box_size = convert_to_y_pixels_hist(vmax,vmin,
			 trendtable[i].sample_value,p_location)
	 height = abs (box_size.top - box_size.bot)
	 rect(just = topright, w=width, h=height, y = box_size.bot)
	 box(just = topright, w=width, h=height, y = box_size.bot)
	 end
      5
	 begin
	 ! calculate width of histogram bars !
	 if i < lastrow trendtable then
	    begin
	    x1 = convert_to_x_pixels(tmax,tmin,
			 time(trendtable[i].sample_date))
	    x2 = convert_to_x_pixels(tmax,tmin,
			 time(trendtable[i+1].sample_date))
	    width = x1 - x2
	    end
	 else
	    width = 0
	 if first_point == 1 then
	    begin
	    first_point = 0
	    x = convert_to_x_pixels(tmax,tmin,
			 time(trendtable[i].sample_date))
	    x = x + width/2
	    if x > w then
	       begin
	       width = width - (x - w)
	       x = w
	       end
	    end
	 else
	    x = old_x - old_w
	 old_w = width
	 old_x = x
	 if x < 0 then
	    x = 0
	 if (x - width) < 0 then
	    width = x
	 box_size = convert_to_y_pixels_hist(vmax,vmin,
			trendtable[i].sample_value,p_location)
	 height = abs (box_size.top - box_size.bot)
	 rect(just = topright, w=width, h=height, y = box_size.bot)
	 box(just = topright, w=width, h=height, y = box_size.bot)
	 display_points_and_values_hist(trendtable[i].sample_value,
				  box_size.bot, height, width,
				  points, display_values)
	 end

      6
	 begin
	 ! calculate width of histogram bars !
	 if i < lastrow trendtable then
	    begin
	    x1 = convert_to_x_pixels(tmax,tmin,
			     time(trendtable[i].sample_date))
	    x2 = convert_to_x_pixels(tmax,tmin,
			     time(trendtable[i+1].sample_date))
	    width = x1 - x2
	    end
	 else
	    width = 0
	 if first_point == 1 then
	    begin
	    first_point = 0
	    x = convert_to_x_pixels(tmax,tmin,
			     time(trendtable[i].sample_date))
	    x = x + width/2
	    if x > w then
	       begin
	       width = width - (x - w)
	       x = w
	       end
	    end
	 else
	    x = old_x - old_w
	 old_w = width
	 old_x = x
	 if (x - width) < 0 then
	    width = x
	 box_size = convert_to_y_pixels_hist(vmax,vmin,
			trendtable[i].sample_value,p_location)
	 height = abs (box_size.top - box_size.bot)
	 rect(just = topright, w=width, h=height, y = box_size.bot)
	 box(just = topright, w=width, h=height, y = box_size.bot)
	 end
      7
	 begin
	 completed = yes
	 end
      8
	 begin
	 completed = yes
	 end
      9
	 begin
	 completed = yes
	 end
      default
	 begin
	 end

      if completed == yes then
	 i = lastrow trendtable
      i ++
      end

   if selb (x = 0,y = 0) then    ! Calculate intersetion with cursor line !
      begin
      pps = w / real(tmax - tmin)
      tvalue = tmin + ((xp - ip_x) / pps)
      drawhistline = value_row_type
      drawhistline.vv = find_v_from_t_hist(trendtable,tvalue)
      drawhistline.tv = tvalue
      end

   if invalid drawhistline then
      begin
      drawhistline = value_row_type
      drawhistline.tv = min time
      drawhistline.vv = 9999
      end
end

object drawgraphline(x,y,w,h,lw,fg,bg,refl,
		     tmin = time("CENTISECONDS"),
		     tmax = time("CENTISECONDS"),
		     vmin = real,
		     vmax = real,
		     points = yesno,
		     addr = db_address,
		     trendtable = trendtable_type,
		     display_values = yesno) = value_row_type
var i = int
var j = int
var ip_x = int
var first_point = byte
var pps = real
var tvalue = time("CENTISECONDS")
var p_location = loopback int
var xy = loopback xy_coords
var completed = loopback yesno
var usearc = yesno

begin
   first_point = 1
   completed = no
   ip_x = x

   j = 1
   i = 1
   while j <= lastrow trendtable do  ! Move to first plottable point in table !
      begin
      if trendtable[j].sample_date >= tmax and
	  trendtable[j + 1].sample_date < tmax then
	 begin
	 i = j
	 j = lastrow trendtable
	 end
      j ++
      end

   while i <= lastrow trendtable do    ! Plot points !
      begin
      p_location = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i].sample_date),
				trendtable[i].sample_value)
      case p_location of
      1
	 begin
	 xy = x_tmax(vmax,vmin,tmax,tmin,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value,
		     time(trendtable[i + 1].sample_date),
		     trendtable[i + 1].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    first_point = 0
	    move
	    end
	 else
	    begin
	    xy = x_vmax(vmax,vmin,tmax,tmin,
			time(trendtable[i].sample_date),
			trendtable[i].sample_value,
			time(trendtable[i + 1].sample_date),
			trendtable[i + 1].sample_value)
	    if valid xy then
	       begin
	       x = xy.x
	       y = xy.y
	       first_point = 0
	       move
	       end
	    end
	 end
      2
	 begin
	 xy = x_tmax(vmax,vmin,tmax,tmin,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value,
		     time(trendtable[i + 1].sample_date),
		     trendtable[i + 1].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    first_point = 0
	    move
	    end
	 end
      3
	 begin
	 xy = x_tmax(vmax,vmin,tmax,tmin,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value,
		     time(trendtable[i + 1].sample_date),
		     trendtable[i + 1].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    first_point = 0
	    move
	    end
	 else
	    begin
	    xy = x_vmin(vmax,vmin,tmax,tmin,
			time(trendtable[i].sample_date),
			trendtable[i].sample_value,
			time(trendtable[i + 1].sample_date),
			trendtable[i + 1].sample_value)
	    if valid xy then
	       begin
	       x = xy.x
	       y = xy.y
	       first_point = 0
	       move
	       end
	    end
	 end
      4
	 begin

	 xy = x_vmax(vmax,vmin,tmax,tmin,
		     time(trendtable[i - 1].sample_date),
		     trendtable[i - 1].sample_value,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    if first_point then
	       begin
	       first_point = 0
	       move
	       end
	    else
	       begin
	       if get_location(vmax,vmin,tmax,tmin,
			     time(trendtable[i - 1].sample_date),
			     trendtable[i - 1].sample_value) <> 4 then
		  add
	       else
		  move
	       end
	    end

	 xy = x_vmax(vmax,vmin,tmax,tmin,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value,
		     time(trendtable[i + 1].sample_date),
		     trendtable[i + 1].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    if first_point then
	       begin
	       first_point = 0
	       move
	       end
	    else
	       begin
	       line
	       move
	       end
	    end
	 end
      5
	 begin
	 x = convert_to_x_pixels(tmax,tmin,time(trendtable[i].sample_date))
	 y = convert_to_y_pixels(vmax,vmin,trendtable[i].sample_value)
	 if first_point then
	    begin
	    first_point = 0
	    move
	    end
	 else
	    add
	 if i == 1 and addr in SET(e) then
	    usearc = yes
	 else
	    usearc = no
	 display_points_and_values_line(trendtable[i].sample_value,
					usearc, points, display_values)
	 end
      6
	 begin
	 xy = x_vmin(vmax,vmin,tmax,tmin,
		     time(trendtable[i - 1].sample_date),
		     trendtable[i - 1].sample_value,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    if first_point then
	       begin
	       first_point = 0
	       move
	       end
	    else
	       begin
	       if get_location(vmax,vmin,tmax,tmin,
			     time(trendtable[i - 1].sample_date),
			     trendtable[i - 1].sample_value) <> 6 then
		  add
	       else
		  move
	       end
	    end

	 xy = x_vmin(vmax,vmin,tmax,tmin,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value,
		     time(trendtable[i + 1].sample_date),
		     trendtable[i + 1].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    if first_point then
	       begin
	       first_point = 0
	       move
	       end
	    else
	       begin
	       line
	       move
	       end
	    end
	 end
      7
	 begin
	 xy = x_tmin(vmax,vmin,tmax,tmin,
		     time(trendtable[i - 1].sample_date),
		     trendtable[i - 1].sample_value,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    if first_point then
	       begin
	       first_point = 0
	       move
	       end
	    else
	       add
	    end
	 else
	    begin
	    xy = x_vmax(vmax,vmin,tmax,tmin,
			time(trendtable[i - 1].sample_date),
			trendtable[i - 1].sample_value,
			time(trendtable[i].sample_date),
			trendtable[i].sample_value)
	    if valid xy then
	       begin
	       x = xy.x
	       y = xy.y
	       if first_point then
		  begin
		  first_point = 0
		  move
		  end
	       else
		  add
	       end
	    end
	 completed = yes
	 end
      8
	 begin
	 xy = x_tmin(vmax,vmin,tmax,tmin,
		     time(trendtable[i - 1].sample_date),
		     trendtable[i - 1].sample_value,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    if first_point then
	       begin
	       first_point = 0
	       move
	       end
	    else
	       add
	    end
	 completed = yes
	 end
      9
	 begin
	 xy = x_tmin(vmax,vmin,tmax,tmin,
		     time(trendtable[i - 1].sample_date),
		     trendtable[i - 1].sample_value,
		     time(trendtable[i].sample_date),
		     trendtable[i].sample_value)
	 if valid xy then
	    begin
	    x = xy.x
	    y = xy.y
	    if first_point then
	       begin
	       first_point = 0
	       move
	       end
	    else
	       add
	    end
	 else
	    begin
	    xy = x_vmin(vmax,vmin,tmax,tmin,
			time(trendtable[i - 1].sample_date),
			trendtable[i - 1].sample_value,
			time(trendtable[i].sample_date),
			trendtable[i].sample_value)
	    if valid xy then
	       begin
	       x = xy.x
	       y = xy.y
	       if first_point then
		  begin
		  first_point = 0
		  move
		  end
	       else
		  add
	       end
	     end
	 completed = yes
	 end
      default
	 begin
	 end
      if (i == 2) and addr in SET(e) then
	 begin
	 line(ls = alt1)
	 move
	 end
      if completed == yes then
	 i = lastrow trendtable
      i ++
      end
   line
   move

   if selb (x = 0,y = 0) then    ! Calculate intersetion with cursor line !
      begin
      pps = w / real(tmax - tmin)
      tvalue = tmin + ((xp - ip_x) / pps)
      drawgraphline = value_row_type
      drawgraphline.vv = find_v_from_t(trendtable,tvalue)
      drawgraphline.tv = tvalue
      end

   if invalid drawgraphline then
      begin
      drawgraphline = value_row_type
      drawgraphline.tv = min time
      drawgraphline.vv = 9999
      end

end

object drawpointstyle(x,y,w,h,lw,fg,bg,refl,
		     tmin = time("CENTISECONDS"),
		     tmax = time("CENTISECONDS"),
		     vmin = real,
		     vmax = real,
		     addr = db_address,
		     trendtable = trendtable_type,
		     display_values = yesno) = value_row_type
var i = int
var j = int
var ip_x = int
var first_point = byte
var pps = real
var tvalue = time("CENTISECONDS")
var p_location = loopback int
var xy = loopback xy_coords
var completed = loopback yesno
var usearc = yesno

begin
   first_point = 1
   completed = no
   ip_x = x

   j = 1
   i = 1
   while j <= lastrow trendtable do  ! Move to first plottable point in table !
      begin
      if trendtable[j].sample_date >= tmax and
	  trendtable[j + 1].sample_date < tmax then
	 begin
	 i = j
	 j = lastrow trendtable
	 end
      j ++
      end

   while i <= lastrow trendtable do    ! Plot points !
      begin
      p_location = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i].sample_date),
				trendtable[i].sample_value)
      case p_location of

      5
	 begin
	 x = convert_to_x_pixels(tmax,tmin,time(trendtable[i].sample_date))
	 y = convert_to_y_pixels(vmax,vmin,trendtable[i].sample_value)
	 if i == 1 and addr in SET(e) then
	    usearc = yes
	 else
	    usearc = no
	 display_points_and_values_line(trendtable[i].sample_value,
					usearc, yes, display_values)
	 end

      7
	 begin
	 completed = yes
	 end

      8
	 begin
	 completed = yes
	 end

      9
	 begin
	 completed = yes
	 end

      default
	 begin
	 end

      if completed == yes then
	 i = lastrow trendtable
      i ++
      end

   if selb (x = 0,y = 0) then    ! Calculate intersection with cursor line !
      begin
      pps = w / real(tmax - tmin)
      tvalue = tmin + ((xp - ip_x) / pps)
      drawpointstyle= value_row_type
      drawpointstyle.vv = find_v_from_t(trendtable,tvalue)
      drawpointstyle.tv = tvalue
      end

   if invalid drawpointstyle then
      begin
      drawpointstyle = value_row_type
      drawpointstyle.tv = min time
      drawpointstyle.vv = 9999
      end
end

object drawstepline(x,y,w,h,lw,fg,bg,refl,
		     tmin = time("CENTISECONDS"),
		     tmax = time("CENTISECONDS"),
		     vmin = real,
		     vmax = real,
		     points = yesno,
		     addr = db_address,
		     trendtable = trendtable_type,
		     display_values = yesno) = value_row_type
var i = int
var j = int
var ip_x = int
var first_point = byte
var pps = real
var tvalue = time("CENTISECONDS")
var p_location = loopback int
var xy = loopback xy_coords
var completed = loopback yesno
var usearc = yesno
var y1 = int
var loc2 = loopback int
var interpolate = loopback yesno

begin
   interpolate = no
   first_point = 1
   completed = no
   ip_x = x

   j = 1
   i = 1
   while j <= lastrow trendtable do  ! Move to first plottable point in table !
      begin
      if trendtable[j].sample_date >= tmax and
	  trendtable[j + 1].sample_date <= tmax then
	 begin
	 i = j
	 j = lastrow trendtable
	 end
      j ++
      end
   clear	! make sure the points table is empty !
   while i <= lastrow trendtable do    ! Plot points !
      begin
      p_location = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i].sample_date),
				trendtable[i].sample_value)
      case p_location of
      1
	 begin
	 clear
	 if (i < lastrow trendtable) then
	    begin
	    loc2 = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i+1].sample_date),
				trendtable[i+1].sample_value)
	    if loc2 == 5 or loc2 == 8 then
	       begin
	       x = w
	       y = convert_to_y_pixels(vmax,vmin,trendtable[i+1].sample_value)
	       if first_point then
		  first_point = 0
	       move
	       end
	    end
	 end
      2
	 begin
	 clear
	 if (i < lastrow trendtable) then
	    begin
	    loc2 = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i+1].sample_date),
				trendtable[i+1].sample_value)
	    if loc2 == 5 or loc2 == 8 then
	       begin
	       x = w
	       y = convert_to_y_pixels(vmax,vmin,trendtable[i+1].sample_value)
	       if first_point then
		  first_point = 0
	       move
	       end
	    end
	 end
      3
	 begin
	 clear
	 if (i < lastrow trendtable) then
	    begin
	    loc2 = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i+1].sample_date),
				trendtable[i+1].sample_value)
	    if loc2 == 5 or loc2 == 8 then
	       begin
	       x = w
	       y = convert_to_y_pixels(vmax,vmin,trendtable[i+1].sample_value)
	       if first_point then
		  first_point = 0
		  move
	       end
	    end
	 end
      4
	 begin
	 if (i < lastrow trendtable) then
	    begin
	    loc2 = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i+1].sample_date),
				trendtable[i+1].sample_value)
	    if loc2 == 5 or loc2 == 8 or
	       loc2 == 9 or loc2 == 6 then
	       begin
	       x = convert_to_x_pixels(tmax,tmin,time(trendtable[i].sample_date))
	       y = h
	       if first_point then
		  first_point = 0
	       move
	       if loc2 == 6 or loc2 == 9 then
		  begin
		  add(y=0)
		  line
		  clear
		  end
	       else
		  begin
		  y1 = convert_to_y_pixels(vmax,vmin,trendtable[i+1].sample_value)
		  add(y=y1)
		  end
	       end
	    end
	 end
      5
	 begin
	 if i == 1 then
	    interpolate = yes
	 x = convert_to_x_pixels(tmax,tmin,time(trendtable[i].sample_date))
	 y = convert_to_y_pixels(vmax,vmin,trendtable[i].sample_value)
	 if (i < lastrow trendtable) then
	    y1 = convert_to_y_pixels(vmax,vmin,trendtable[i+1].sample_value)
	 if y1 > h then
	    y1 = h
	 if y1 < 0 then
	    y1 = 0
	 if first_point == 1 then
	    begin
	    first_point = 0
	    move
	    add(y=y1)
	    end
	 else
	    begin
	    add
	    if (i >= 2) and (i < lastrow trendtable) then
	       add(y=y1)
	    end
	 if (i < lastrow trendtable) then
	    begin
	    loc2 = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i+1].sample_date),
				trendtable[i+1].sample_value)
	    if loc2 == 4 or loc2 == 7 or
	       loc2 == 9 or loc2 == 6 then
	       begin
	       line
	       clear
	       end
	    end
	 if i == 1 and addr in SET(e) then
	    usearc = yes
	 else
	    usearc = no
	 display_points_and_values_line(trendtable[i].sample_value,
					usearc, points, display_values)
	 end
      6
	 begin
	 if (i < lastrow trendtable) then
	    begin
	    loc2 = get_location(vmax,vmin,tmax,tmin,
				time(trendtable[i+1].sample_date),
				trendtable[i+1].sample_value)
	    if loc2 == 5 or loc2 == 8 or
	       loc2 == 7 or loc2 == 4 then
	       begin
	       x = convert_to_x_pixels(tmax,tmin,time(trendtable[i].sample_date))
	       y = 0
	       if first_point then
		  first_point = 0
	       move
	       if loc2 == 4 or loc2 == 7 then
		  begin
		  add(y=h)
		  line
		  clear
		  end
	       else
		  begin
		  y1 = convert_to_y_pixels(vmax,vmin,trendtable[i+1].sample_value)
		  add(y=y1)
		  end
	       end
	    end
	 end
      7
	 begin
	 completed = yes
	 end
      8
	 begin
	 y = convert_to_y_pixels(vmax,vmin,trendtable[i].sample_value)
	 x = 0
	 if first_point then
	    begin
	    first_point = 0
	    move
	    end
	 else
	    add
	 completed = yes
	 end
      9
	 begin
	 completed = yes
	 end
      default
	 begin
	 end
      if (i == 2) and addr in SET(e) and interpolate == yes then
	 begin
	 interpolate = no
	 line(ls = alt1)
	 move
	 add(y=y1)
	 end
      if completed == yes then
	 i = lastrow trendtable
      i ++
      end
   line
   move

   if selb (x = 0,y = 0) then    ! Calculate intersection with cursor line !
      begin
      pps = w / real(tmax - tmin)
      tvalue = tmin + ((xp - ip_x) / pps)
      drawstepline = value_row_type
      drawstepline.tv = tvalue
      i = 1
      while (i <= lastrow trendtable) do
	 begin
	 if trendtable[i].sample_date >= tvalue and
		trendtable[i + 1].sample_date < tvalue then
	    begin
	    drawstepline.vv = trendtable[i+1].sample_value
	    i = lastrow trendtable + 1
	    end
	 i ++
	 end
      end

   if invalid drawstepline then
      begin
      drawstepline = value_row_type
      drawstepline.tv = min time
      drawstepline.vv = 9999
      end

end


object drawtrend(x,y,w,h,lw,fg,bg,refl,
		 tmin = time("CENTISECONDS"),
		 tmax = time("CENTISECONDS"),
		 vmin = real,
		 vmax = real,
		 points = yesno,
		 addr = db_address,
		 trendtable = trendtable_type,
		 plot_type = graph_style,
		 display_values = yesno) = value_row_type

begin

   case plot_type of
   histogram_graph
      drawtrend = drawhistline(tmin, tmax, vmin, vmax, points, addr,
			       trendtable,display_values)
   line_graph
      drawtrend = drawgraphline(tmin, tmax, vmin, vmax, points, addr,
			       trendtable,display_values)
   bar_graph
      drawtrend = drawbarline(tmin, tmax, vmin, vmax, points, addr,
			       trendtable,display_values)
   stepped_graph
      drawtrend = drawstepline(tmin, tmax, vmin, vmax, points, addr,
			       trendtable,display_values)
   point_graph
      drawtrend = drawpointstyle(tmin, tmax, vmin, vmax, addr,
			       trendtable,display_values)
   default
      begin
      end

end


object get_period_limit(spp = difftime("CENTISECONDS")) = sample_interval
begin

   if spp < 10 then
      get_period_limit = ps_10s
   else if spp <= 20 then
      get_period_limit = ps_20s
   else if spp <= 30 then
      get_period_limit = ps_30s
   else if spp <= 40 then
      get_period_limit = ps_40s
   else if spp <= 60 then
      get_period_limit = ps_60s
   else if spp <= 90 then
      get_period_limit = ps_90s
   else if spp <= 120 then
      get_period_limit = ps_2m
   else if spp <= 180 then
      get_period_limit = ps_3m
   else if spp <= 240 then
      get_period_limit = ps_4m
   else if spp <= 300 then
      get_period_limit = ps_5m
   else if spp <= 360 then
      get_period_limit = ps_6m
   else if spp <= 600 then
      get_period_limit = ps_10m
   else if spp <= 720 then
      get_period_limit = ps_12m
   else if spp <= 900 then
      get_period_limit = ps_15m
   else if spp <= 1200 then
      get_period_limit = ps_20m
   else if spp <= 1800 then
      get_period_limit = ps_30m
   else if spp <= 2400 then
      get_period_limit = ps_40m
   else if spp <= 2700 then
      get_period_limit = ps_45m
   else if spp <= 3600 then
      get_period_limit = ps_60m
   else if spp <= 5400 then
      get_period_limit = ps_90m
   else if spp <= 7200 then
      get_period_limit = ps_2h
   else if spp <= 10800 then
      get_period_limit = ps_3h
   else if spp <= 14400 then
      get_period_limit = ps_4h
   else if spp <= 21600 then
      get_period_limit = ps_6h
   else if spp <= 28800 then
      get_period_limit = ps_8h
   else if spp <= 43200 then
      get_period_limit = ps_12h
   else if spp <= 86400 then
      get_period_limit = ps_24h
   else if spp <= 172800 then
      get_period_limit = ps_2d
   else if spp <= 259200 then
      get_period_limit = ps_3d
   else if spp <= 345600 then
      get_period_limit = ps_4d
   else if spp <= 432000 then
      get_period_limit = ps_5d
   else if spp <= 518400 then
      get_period_limit = ps_6d
   else if spp <= 604800 then
      get_period_limit = ps_7d
   else if spp <= 691200 then
      get_period_limit = ps_8d
   else if spp <= 864000 then
      get_period_limit = ps_10d
   else if spp <= 1209600 then
      get_period_limit = ps_14d
   else if spp <= 1814400 then
      get_period_limit = ps_21d
   else
      get_period_limit = ps_28d
end

object cv_sample_interval(si = sample_interval) = int
var num = int
var secs = int
var str = string(30)
begin
   enumf = enum_ident
   str = si

   case getchar(nchars(str),str) of
   "s" secs = 1
   "m" secs = 60
   "h" secs = 3600
   "d" secs = 86400
   default
      begin
      end

   if nchars(str)  == 5 then
      num = int(getchar(4,str))
   else
      num = int(getchars(4,2,str))

   cv_sample_interval = num * secs
end


object bd_table(x,y,scp = trendtable_type,
		display_table = trendtable_type,
		tmax = time("CENTISECONDS"),
		db_addr = db_address) = trendtable_type
var i = int
var sd = time("CENTISECONDS")
var first_p = loopback byte
var first_row = loopback trendrow_type

begin
   if valid scp then
      begin
      first_row = scp[1]
      first_row.sample_date = current_time
      if current_time >= time(scp[1].sample_date) then
	 bd_table[1] = first_row
      i = 1
      while i < 1000 do
	 begin
	 if (db_addr in SET(e)) then
	    begin
	    if scp[i].sample_date <= tmax then
	       bd_table[lastrow bd_table + 1] = scp[i]
	    else if scp[i + 1].sample_date <= tmax then
	       bd_table[lastrow bd_table + 1] = scp[i]
	    end
	 else
	    bd_table[lastrow bd_table + 1] = scp[i]
	 if i == lastrow scp then
	    i = 1000
	 i ++
	 end
      end

   i = 1
   first_p = 0
   while i <= 1000 do
      begin
      if lastrow bd_table then
	 begin
	 if bd_table[lastrow bd_table].sample_date >
	     display_table[i].sample_date and
	     display_table[i].sample_date <= tmax then
	    begin
	    if not first_p and i > 1 and
		bd_table[lastrow bd_table].sample_date >
		display_table[i - 1].sample_date then
	       bd_table[lastrow bd_table + 1] = display_table[i - 1]
	    first_p = 1
	    bd_table[lastrow bd_table + 1] = display_table[i]
	    end
	 end
      else
	 begin
	 first_p = 1
	 bd_table[lastrow bd_table + 1] = display_table[i]
	 end
      if i == lastrow display_table or lastrow bd_table == 1000 then
	 i = 1000
      i ++
      end
end

object xv_clock

var height = loopback int
var i = int

begin
just = centrecentre
ch = 10
w=20
h=20

fg = decoroff
circle(fg=black)
x-- y--
circle(fg=white)
move
x+=2
add
y -= h/2
add
fill(fg=black)
x=-1 y=-1
move
y+=2
add
x -= w/2 -2
add
fill(fg=black)

x=0 y=-(h/2)
move
y -=3
add
line(fg=black,lw =4)
move
y-=3
add
line(fg=black,lw =8)

x = 2
for i from 1 to 3 do
   begin
   y=-(h/2+6)
   move
   y += 3
   add
   line(fg=white)
   x -= 2
   end
end


object request_archiver_data(returned_sampled_data = loopback trendtable_type,
		tmin = time("CENTISECONDS"),
		tmax = time("CENTISECONDS"),
		src = string,
		stream_nam = string(30),
		db_addr = db_address,
		error_text = loopback string(80),
		error_level = loopback int)

var sampled_data = trendtable_type
var dummy_sampled_data_row = trendrow_type
var ip = input  archivetable_type
var bstats_ip = input bstatstable_type
var estats_ip = input estatstable_type
var n_rows_added = loopback int
var ostream_nam = loopback string(30)
var osrc = loopback string
var odb_addr = loopback db_address
var otmin = loopback time
var otmax = loopback time
var display_sample = difftime
var sample_tmin = time
var first = int
var sort_of_data = loopback sort_of_data_type

begin
sa = lastrow returned_sampled_data + 1
for aa to lastrow returned_sampled_data do
   sampled_data[aa] = returned_sampled_data[sa - aa]
sampled_data[sa] = dummy_sampled_data_row
display_sample = real((tmax - tmin) / real(max_display_points - 1))
if display_sample == 0.00 then
   display_sample = 0.01

if invalid osrc then
   begin
   set default osrc
   set default ostream_nam
   set default odb_addr
   set default otmax
   set default otmin
   end

!
If the only change to the request is to slide the time span forwards by less
than the total span then we can reuse some of the existing sampled_data.
!
if osrc == src and odb_addr == db_addr and ostream_nam == stream_nam then
   begin
   if (otmax - tmax) == (otmin - tmin) then 
      begin
      if (tmax > otmax) and (tmax - otmax < tmax - tmin) then
	 begin
	 first = 1
	 for aa to lastrow sampled_data do
	    if sampled_data[aa].sample_date < tmin then
	       first = aa
	 for aa from first to lastrow sampled_data do
	    sampled_data[aa - first + 1] = sampled_data[aa]
	 otmax = tmax
	 otmin = tmin
	 if (remote_archiver_enabled == 1) or (getword(2, stream_nam) == "Value") then
	    begin
	    set limit2  ip.time = tmax
	    request ip
	    end
	 else if (getword(2, stream_nam) == "Mins_True") or (getword(2, stream_nam) == "F_T_Trans") then
	    begin
	    set limit2  bstats_ip.time = tmax
	    request bstats_ip
	    end
	 else
	    begin
	    set limit2  estats_ip.time = tmax
	    request estats_ip
	    end
	 n_rows_added -= first - 1
	 sampled_data[lastrow sampled_data - first] = dummy_sampled_data_row
	 end
      end
   end
if (remote_archiver_enabled == 1) or (getword(2, stream_nam) == "Value") then
   begin
   if osrc <> src or odb_addr <> db_addr or ostream_nam <> stream_nam
      or otmax <> tmax or otmin <> tmin then 
      begin      ! setup initial filters !
      osrc = src
      odb_addr = db_addr
      ostream_nam = stream_nam
      otmin = tmin
      otmax = tmax
      set invalid ip
      set persist ip
      set source ip = arhsource(source(src))
      set filter ip.stream_name = lim_eq
      set limit  ip.stream_name = stream_nam
      set filter ip.db_addr = lim_eq
      if (getword(2, stream_nam) == "Mins_True") or
         (getword(2, stream_nam) == "F_T_Trans") then
	 set limit  ip.db_addr = db_addr - B1 + E1
      else
	 set limit  ip.db_addr = db_addr
      set filter ip.time = lim_ge_le2
      set limit ip.time = tmin
      set limit2  ip.time = tmax
      request ip
      sampled_data[1] = dummy_sampled_data_row
      n_rows_added = 0
      end
   if valid ip then
      begin
      if lastrow sampled_data then
	 sample_tmin = sampled_data[lastrow sampled_data].sample_date
      else
	 sample_tmin = min time
      for aa to lastrow ip do 
	 begin
	 if ip[aa].time >= sample_tmin + display_sample then
	    begin
	    sa = lastrow sampled_data + 1
	    sampled_data[sa] = trendrow_type
	    sampled_data[sa].sample_date = ip[aa].time
	    sampled_data[sa].sample_value = ip[aa].e_value
	    sample_tmin = ip[aa].time
	    end
	 end
      if lastrow ip == max_display_points then
	 begin
	 ! request next possible max_display_points rows !
	 set filter ip.time = lim_gt_le2
	 set limit ip.time = sample_tmin
	 set limit2 ip.time = tmax
	 set invalid ip 
	 request ip
	 n_rows_added = lastrow sampled_data
	 end
      end

   if get busy ip then
      error_level = 1

   if get noaccessible ip then
      begin
      error_text = "Access Denied"
      end
   else
      begin
      sa = lastrow sampled_data + 1
      set invalid returned_sampled_data
      for aa to lastrow sampled_data do
	 returned_sampled_data[aa] = sampled_data[sa - aa]
      end
   end
else
   begin
   if (getword(2, stream_nam) == "Max") then
      sort_of_data = use_max
   else if (getword(2, stream_nam) == "Min") then
      sort_of_data = use_min
   else if (getword(2, stream_nam) == "Mean") then
      sort_of_data = use_mean
   else if (getword(2, stream_nam) == "Mins_True") then
      sort_of_data = use_mins_true
   else if (getword(2, stream_nam) == "F_T_Trans") then
      sort_of_data = use_f_t
   else
      sort_of_data = use_e_value
   if (sort_of_data == use_e_value) then
      error_text = "Unknown Archive Type"
   else
      begin
      if osrc <> src or odb_addr <> db_addr or ostream_nam <> stream_nam
	 or otmax <> tmax or otmin <> tmin then 
	 begin      ! setup initial filters !
	 osrc = src
	 odb_addr = db_addr
	 ostream_nam = stream_nam
	 otmin = tmin
	 otmax = tmax
	 set invalid estats_ip
	 if (sort_of_data == use_mins_true) or
	    (sort_of_data == use_f_t) then
	    begin
	    set persist bstats_ip
	    set source bstats_ip = arhsource(source(src))
	    set filter bstats_ip.stream_name = lim_eq
	    set limit  bstats_ip.stream_name = getword(1, stream_nam) + " B_STATS"
	    set filter bstats_ip.keynumber = lim_eq
	    set limit  bstats_ip.keynumber = int(db_addr - B1) + 1
	    set filter bstats_ip.time = lim_ge_le2
	    set limit bstats_ip.time = tmin
	    set limit2  bstats_ip.time = tmax
	    request bstats_ip
	    end
	 else
	    begin
	    set persist estats_ip
	    set source estats_ip = arhsource(source(src))
	    set filter estats_ip.stream_name = lim_eq
	    set limit  estats_ip.stream_name = getword(1, stream_nam) + " R_STATS"
	    set filter estats_ip.keynumber = lim_eq
	    set limit  estats_ip.keynumber = int(db_addr - E1) + 1
	    set filter estats_ip.time = lim_ge_le2
	    set limit estats_ip.time = tmin
	    set limit2  estats_ip.time = tmax
	    request estats_ip
	    end
	 sampled_data[1] = dummy_sampled_data_row
	 n_rows_added = 0
	 end
      end
   if valid bstats_ip then
      begin
      if lastrow sampled_data then
	 sample_tmin = sampled_data[lastrow sampled_data].sample_date
      else
	 sample_tmin = min time
      for aa to lastrow bstats_ip do 
	 begin
	 if bstats_ip[aa].time >= sample_tmin + display_sample then
	    begin
	    sa = lastrow sampled_data + 1
	    sampled_data[sa] = trendrow_type
	    sampled_data[sa].sample_date = bstats_ip[aa].time
	    if (sort_of_data == use_mins_true) then
	       sampled_data[sa].sample_value = bstats_ip[aa].keyed_two_a_values_2
	    else
	       sampled_data[sa].sample_value = bstats_ip[aa].keyed_two_a_values_1
	    sample_tmin = bstats_ip[aa].time
	    end
	 end
      if lastrow bstats_ip == max_display_points then
	 begin
	 ! request next possible max_display_points rows !
	 set filter bstats_ip.time = lim_gt_le2
	 set limit bstats_ip.time = sample_tmin
	 set limit2 bstats_ip.time = tmax
	 set invalid bstats_ip 
	 request bstats_ip
	 n_rows_added = lastrow sampled_data
	 end
      end

   if valid estats_ip then
      begin
      if lastrow sampled_data then
	 sample_tmin = sampled_data[lastrow sampled_data].sample_date
      else
	 sample_tmin = min time
      for aa to lastrow estats_ip do 
	 begin
	 if estats_ip[aa].time >= sample_tmin + display_sample then
	    begin
	    sa = lastrow sampled_data + 1
	    sampled_data[sa] = trendrow_type
	    sampled_data[sa].sample_date = estats_ip[aa].time
	    if (sort_of_data == use_mean) then
	       sampled_data[sa].sample_value = estats_ip[aa].keyed_three_a_values_1
	    else if (sort_of_data == use_max) then
	       sampled_data[sa].sample_value = estats_ip[aa].keyed_three_a_values_2
	    else
	       sampled_data[sa].sample_value = estats_ip[aa].keyed_three_a_values_3
	    sample_tmin = estats_ip[aa].time
	    end
	 end
      if lastrow estats_ip == max_display_points then
	 begin
	 ! request next possible max_display_points rows !
	 set filter estats_ip.time = lim_gt_le2
	 set limit estats_ip.time = sample_tmin
	 set limit2 estats_ip.time = tmax
	 set invalid estats_ip 
	 request estats_ip
	 n_rows_added = lastrow sampled_data
	 end
      end

   if get busy bstats_ip or get busy estats_ip then
      error_level = 1

   if get noaccessible bstats_ip or get noaccessible estats_ip then
      begin
      error_text = "Access Denied"
      end
   else
      begin
      sa = lastrow sampled_data + 1
      set invalid returned_sampled_data
      for aa to lastrow sampled_data do
	 returned_sampled_data[aa] = sampled_data[sa - aa]
      end
   end
end

type request_mode_type = enum(using_scope, completed_static_requests)

object request_trend_data(trendtable = loopback trendtable_type,
	                  tmin = time,
	                  tmax = time,
	                  src = string (14),
	                  db_addr = db_address,
	                  ctm = onoff,
			  gratsecs = int,
			  error_text = loopback string(80),
			  error_level = loopback int)

var i = int
var initialise_object = loopback byte

var odba = loopback db_address
var otm = loopback time
var pl = loopback sample_interval
var opl = loopback sample_interval
var octm = loopback onoff
var osrc = loopback string (14)

var source_mode = loopback request_mode_type
var sd = loopback time

var db_info = input db_info_row
var scope_data = input trendtable_type

begin
   if invalid odba then
      odba = db_addr

   if db_addr <> db_invalid and 
         (db_addr <> odba or (invalid db_info and not get busy db_info))
	     then
      begin
      set invalid db_info
      set source db_info = src
      set filter db_info.db_addr = lim_eq
      set limit db_info.db_addr = db_addr
      set persist db_info
      request db_info
      set invalid trendtable
      set invalid scope_data
      end

   ! Initiate requests !
   pl = get_period_limit((tmax - tmin) / (max_display_points - 1))

   if invalid db_info then
      set invalid initialise_object 
   else if octm <> ctm or opl <> pl or odba <> db_addr or src <> osrc then
      set invalid initialise_object 
 
   if otm <> tmax then
      begin
      if get busy scope_data then
	 set invalid initialise_object
      if lastrow trendtable < 2 then
	 set invalid initialise_object 
      else
	 begin
	 if ctm == on and tmax > current_time then
	    begin
	    if trendtable[2].sample_date < tmax and tmax - otm <> gratsecs then
	       set invalid initialise_object
	    end
	 else
	    begin
	    if trendtable[2].sample_date < tmax or
		trendtable[lastrow trendtable].sample_date > tmin then
	       set invalid initialise_object
	    end
	 end
      end

   opl = pl
   octm = ctm
   odba = db_addr
   osrc = src
   otm = tmax

   if valid db_info and invalid initialise_object then
      begin
      ! Initialise input variables !
      set invalid sd
      source_mode = using_scope
      set invalid trendtable
      set default trendtable

      set invalid scope_data
      set nopersist scope_data
      set priority scope_data.sample_date = 15
      set source scope_data = src
      set filter scope_data.db_addr = lim_eq
      set limit scope_data.db_addr = db_addr
      set filter scope_data.sample_period = lim_ge
      set limit scope_data.sample_period = pl
      set dir_dec scope_data.sample_date 

      if db_addr in set(b,e) then
	 begin
	 if ctm == on and tmax >= current_time then
	    begin
	    set filter scope_data.sample_date = lim_go
	    set limit scope_data.sample_date = tmin
	    end
	 else
	    begin
	    set filter scope_data.sample_date = lim_lo_go2
	    set limit scope_data.sample_date = tmax
	    set limit2 scope_data.sample_date = tmin
	    end
	 end
      else
	 begin
	 ! schedules and profiles !
	 set filter scope_data.sample_date = lim_lo_go2
	 set limit scope_data.sample_date = tmax
	 set limit2 scope_data.sample_date = tmin
	 end

      set default initialise_object
      end

   if trendtable[lastrow trendtable].sample_date <= tmin then
      source_mode = completed_static_requests

   if source_mode == using_scope then
      begin
      if valid scope_data then
	 begin
	 for i from 1 to lastrow scope_data do
	    if lastrow trendtable < max_display_points then
	       trendtable[lastrow trendtable + 1] = scope_data[i] 
	 if trendtable[lastrow trendtable].sample_date <= tmin or
	    lastrow trendtable >= max_display_points then
	    source_mode = completed_static_requests
         else
	    begin
	    if lastrow trendtable then
	       sd = trendtable[lastrow trendtable].sample_date
            else
	       sd = tmax +  cv_sample_interval(pl)
	    source_mode = completed_static_requests
	    end
	 set invalid scope_data

	 if db_addr in set(b,e) then
	    begin
	    ! request data to persist !
	    if ctm == on  then
	       begin
	       set filter scope_data.sample_date = lim_none
	       end
            else
	       begin
	       set filter scope_data.sample_date = lim_lo
	       set limit scope_data.sample_date = tmax
	       end
	    set persist scope_data
	    request scope_data
            end
	 end

      if source_mode == using_scope then
	 begin
	 if valid sd then
	    begin
	    set filter scope_data.sample_date = lim_lo
	    set limit scope_data.sample_date = sd
	    end
         request scope_data
	 end
      end

   if valid scope_data and source_mode <> using_scope then
      trendtable = bd_table(x=0,y=0,scope_data,trendtable,tmax,db_addr)
   if get busy scope_data and source_mode == using_scope then
       error_level = 1

   if invalid db_info then
      error_level = 1
   if get noaccessible scope_data or get noaccessible db_info then
      begin
      set invalid initialise_object 
      error_text = "Access Denied"
      end
end

object tv_icon(src = source)
begin
   utility_icon("Trend View")
end


object get_time_axis_details(tcr=trend_config_row) = time_axis_detail_table_type

var t = time("CENTISECONDS")
var taxd = time_axis_detail_table_type
var i = int
var hr = difftime("CENTISECONDS")
begin
   for i from 1 to 9 do
      begin
      taxd[i] = time_axis_detail_row
      if tcr.bottom_axis == i then
	 taxd[i].display = axis_1
      if tcr.top_axis == i then
	 begin
	 if tcr.bottom_axis == i then
	    taxd[i].display = both_axes
	 else
	    taxd[i].display = axis_2
	 end
      end

   t = current_time - current_time % 3600
   hr = 3600 ! 1 hour in seconds !

   if tcr.start_time == min time then
      begin
      taxd[9].time_min = t - hr
      end
   else
      taxd[9].time_min = tcr.start_time
   taxd[9].duration = tcr.duration ! 9 holds time base info !

   taxd[1].offset = tcr.offset_1
   taxd[2].offset = tcr.offset_2
   taxd[3].offset = tcr.offset_3
   taxd[4].offset = tcr.offset_4
   taxd[5].offset = tcr.offset_5
   taxd[6].offset = tcr.offset_6
   taxd[7].offset = tcr.offset_7
   taxd[8].offset = tcr.offset_8

   for aa to 8 do
      begin
      taxd[aa].time_min = taxd[9].time_min + taxd[aa].offset
      taxd[aa].time_max = taxd[aa].time_min + taxd[9].duration
      end

   get_time_axis_details = taxd
end

object get_value_axis_details(tcr = trend_config_row) =
				value_axis_detail_table_type
begin

   for aa to 8 do
      begin
      get_value_axis_details[aa] = value_axis_detail_row
      get_value_axis_details[aa].display = not_used
      end

   get_value_axis_details[1].value_max = tcr.max_value_1
   get_value_axis_details[1].value_min = tcr.min_value_1

   get_value_axis_details[2].value_max = tcr.max_value_2
   get_value_axis_details[2].value_min = tcr.min_value_2

   get_value_axis_details[3].value_max = tcr.max_value_3
   get_value_axis_details[3].value_min = tcr.min_value_3

   get_value_axis_details[4].value_max = tcr.max_value_4
   get_value_axis_details[4].value_min = tcr.min_value_4

   get_value_axis_details[5].value_max = tcr.max_value_5
   get_value_axis_details[5].value_min = tcr.min_value_5

   get_value_axis_details[6].value_max = tcr.max_value_6
   get_value_axis_details[6].value_min = tcr.min_value_6

   get_value_axis_details[7].value_max = tcr.max_value_7
   get_value_axis_details[7].value_min = tcr.min_value_7

   get_value_axis_details[8].value_max = tcr.max_value_8
   get_value_axis_details[8].value_min = tcr.min_value_8

   if tcr.left_value == tcr.right_value then
      get_value_axis_details[tcr.left_value].display = both_axes
   else
      begin
      get_value_axis_details[tcr.left_value].display = axis_1
      get_value_axis_details[tcr.right_value].display = axis_2
      end

end

object get_time_axis_type(config = string (6)) = int
begin
   get_time_axis_type = int(getchar(1,config))
   if invalid get_time_axis_type then
      get_time_axis_type = 1
end

object get_value_axis_type(config = string (6)) = int
begin
   get_value_axis_type = int(getchar(2,config))
   if invalid get_value_axis_type then
      get_value_axis_type = 1
end

object get_display(config = string (6)) = yesno
begin
   if getchar(4,config) == "Y" then
      get_display = yes
   else
      get_display = no
end


object get_style(config = string (6)) = graph_style
begin
   case getchar(5,config) of
   "H" get_style = histogram_graph
   "L" get_style = line_graph
   "S" get_style = stepped_graph
   "B" get_style = bar_graph
   "P" get_style = point_graph
   default get_style = line_graph
end

object get_points(config = string (6)) = yesno
begin
   if getchar(3,config) == "Y" then
      get_points = yes
   else
      get_points = no
end

object get_values(config = string (6)) = yesno
begin
   if getchar(6,config) == "Y" then
      get_values = yes
   else
      get_values = no
end

object get_current_mode(config = string (4)) = onoff
begin
   if getchar(1,config) == "Y" then
      get_current_mode = on
   else
      get_current_mode = off
end

object get_full_size(config = string (4)) = onoff
begin
   if getchar(2,config) =="Y" then
      get_full_size = on
   else
      get_full_size = off
end

object get_x_grats(config = string (4)) = onoff
begin
   if getchar(3,config) == "Y" then
       get_x_grats = on
   else
       get_x_grats = off
end

object get_y_grats(config = string (4)) = onoff
begin
   if getchar(4,config) == "Y" then
      get_y_grats = on
   else
      get_y_grats = off
end

object get_trend_detail(col = colour, identity = string(40), name = string(40),
			config = string(40), units = string(20))
			= trend_detail_row
var src = string (40)
var text_id = int
begin
get_trend_detail = trend_detail_row
get_trend_detail.line_colour = col
src = get_source_from_ident(identity)
if src <> "" then
   begin
   get_trend_detail.source = src
   get_trend_detail.stream_name = get_stream_from_ident(identity)
   get_trend_detail.address = get_address_from_ident(identity)
   get_trend_detail.db_name = name
   get_trend_detail.use_time_axis = get_time_axis_type(config)
   get_trend_detail.use_value_axis = get_value_axis_type(config)
   get_trend_detail.display = get_display(config)
   get_trend_detail.points_yn = get_points(config)
   get_trend_detail.values = get_values(config)
   get_trend_detail.style = get_style(config)
   text_id = int(units)
   if valid text_id then
      get_trend_detail.text_id = text_id
   get_trend_detail.added = yes
   end
end

object get_trend_details(tcr = trend_config_row) = trend_detail_table_type
begin
   get_trend_details[1] = get_trend_detail(red, tcr.identity_1, tcr.name_1,
			tcr.config_1, tcr.units_1)
   get_trend_details[2] = get_trend_detail(blue, tcr.identity_2, tcr.name_2,
			tcr.config_2, tcr.units_2)
   get_trend_details[3] = get_trend_detail(green, tcr.identity_3, tcr.name_3,
			tcr.config_3, tcr.units_3)
   get_trend_details[4] = get_trend_detail(magenta, tcr.identity_4, tcr.name_4,
			tcr.config_4, tcr.units_4)
   get_trend_details[5] = get_trend_detail(magenta4, tcr.identity_5, tcr.name_5,
			tcr.config_5, tcr.units_5)
   get_trend_details[6] = get_trend_detail(orange, tcr.identity_6, tcr.name_6,
			tcr.config_6, tcr.units_6)
   get_trend_details[7] = get_trend_detail(blue4, tcr.identity_7, tcr.name_7,
			tcr.config_7, tcr.units_7)
end

object do_one_line(w,h,refl,
			trendtable_data = loopback trendtable_type,
			trendtable_data_required = int,
			axis_ranges = max_min_row_type[8],
			trend_detail = trend_detail_row,
			ctm = onoff,
		        error_text = loopback string(80),
			error_level = loopback int) = value_row_type
var trendtable = loopback trendtable_type
var axis_range = max_min_row_type
begin
axis_range = axis_ranges[1]

if trend_detail.display == yes then
   begin
   axis_range.value_max = axis_ranges[trend_detail.use_value_axis].value_max
   axis_range.value_min = axis_ranges[trend_detail.use_value_axis].value_min

   axis_range.time_max = axis_ranges[trend_detail.use_time_axis].time_max
   axis_range.time_min = axis_ranges[trend_detail.use_time_axis].time_min
   end

if trend_detail.stream_name <> "" then
   begin
   request_archiver_data(trendtable,
		      axis_range.time_min,
		      axis_range.time_max,
		      trend_detail.source,
		      trend_detail.stream_name,
		      trend_detail.address,
		      error_text, error_level)
   end
else
   begin
   request_trend_data(trendtable,
		      axis_range.time_min,axis_range.time_max,
		      trend_detail.source,
		      trend_detail.address,
		      ctm,
		      axis_ranges[1].interval,
		      error_text,error_level)
   end

if trendtable_data_required then
   trendtable_data = trendtable

if trend_detail.display == yes and valid trendtable then
   do_one_line = drawtrend(fg = trend_detail.line_colour,
		      axis_range.time_min,
		      axis_range.time_max,
		      axis_range.value_min,
		      axis_range.value_max,
		      trend_detail.points_yn,
		      trend_detail.address,
		      trendtable,
		      trend_detail.style,
		      trend_detail.values)

end

object one_axis(w,h, tmin = time, tmax = time,
		time_axis_detail = time_axis_detail_row,
		value_axis_detail = value_axis_detail_row,
		graticules_x = onoff,
		graticules_y = onoff,
		sb_h = ta_sb_r_type,
		sb_v = ta_sb_r_type,
		ctm = onoff) = max_min_row_type
begin
if ctm == on then
   begin
   one_axis = axis(tmin+time_axis_detail.offset, tmax+time_axis_detail.offset,
      value_axis_detail.value_min, value_axis_detail.value_max ,
      graticules_x,graticules_y, sb_h,sb_v,
      value_axis_detail.display,time_axis_detail.display,
      yes,yes)
   end
else
   begin
   one_axis = axis(time_axis_detail.time_min, time_axis_detail.time_max,
      value_axis_detail.value_min, value_axis_detail.value_max,
      graticules_x,graticules_y,sb_h,sb_v,
      value_axis_detail.display, time_axis_detail.display,
      yes,yes)
   end
end


! *************************************************************** !

type offset_row_type = table(offset = difftime("CENTISECONDS"))

object graph_drawing_utility(x,y,w,h,src = source) = byte

var temp_str = string (80)
var i = i16
var j = i16
var h_line = int
var v_line = int
var error_level = loopback int
var error_text = loopback string (80)
var local_src = loopback source
var reset_sb = loopback byte
var ta_top = loopback int
var ta_bot = loopback int
var temp_range = loopback max_min_row_type
var axis_ranges = loopback max_min_row_type[8]
var values = loopback value_row_type
var invalid_values = value_row_type
var changing_full_size = loopback byte
var unit_code = unit_text_type
var ws_1 = loopback ws_info_row
var ws_2 = loopback ws_info_row
var ws_3 = loopback ws_info_row
var ws_4 = loopback ws_info_row
var ws_5 = loopback ws_info_row
var ws_6 = loopback ws_info_row

var trendtable = loopback trendtable_type
var trendtable_data = loopback trendtable_type
var tabular_trend_no = loopback int
var old_tabular_trend_no = loopback int

var plot = loopback int
var temp_intf = int_format
var temp_timef = time_format
var line_info = string
var rlc = loopback int
var sb_v_line = loopback int
var sb_h_line = loopback int
var scroll_size_y = loopback int
var scroll_size_x = loopback int
var sb_v = loopback ta_sb_r_type_array
var sb_h = loopback ta_sb_r_type_array

var trend_details = loopback trend_detail_table_type
var time_axis_detail = loopback time_axis_detail_table_type
var value_axis_detail = loopback value_axis_detail_table_type
var fullsize = loopback onoff
var fullsize_mod = loopback  int
var tmin = loopback time
var tmax = loopback time
var graticules_x = loopback onoff
var graticules_y = loopback onoff

var init = loopback byte
var ws_info = loopback ws_info_row

var trend_config = loopback trend_config_row

var current_trend_details = popup trend_details_menu
var line_config_detail = popup line_config_menu
var current_time_axis_details = popup time_axis_details
var current_eng_axis_details = popup engineering_axis_details
var current_line_details = popup line_details
var current_config_details = popup config_details
var new_config = popup new_config_type
var tabular_data = popup tabular_display

var ip_trend_config = inputfile single_trend_config_info_type
var op_trend_config = outputfile single_trend_config_info_type
var line_x = loopback int
var safe_line_x = loopback  int
var helpstr = help string(30)
var offsets = loopback offset_row_type[9]

begin
   error_level = 0
   error_text = ""
   if invalid offsets then
      begin
      set default offsets[9]
      for i from 1 to 9 do
	 offsets[i].offset = min time - min time
      end
   helpstr = "trend_view_help"
   realf = general7
   if invalid tabular_trend_no then
      begin
      tabular_trend_no = 1
      old_tabular_trend_no = 1
      end
   plot = 0

   error_text = ""
   changing_full_size = 0

   ws_info = get_ws_info(source(0))
   ws_1 = ws_info
   ws_2 = get_ws_info(source(1))
   ws_3 = get_ws_info(source(2))
   ws_4 = get_ws_info(source(3))
   ws_5 = get_ws_info(source(4))
   ws_6 = get_ws_info(source(5))

   if invalid src then
      local_src = source(0)
   else
      local_src = src

   if valid new_config then
      begin
      set invalid trend_details
      set invalid trend_config
      set invalid time_axis_detail
      set invalid value_axis_detail
      set invalid fullsize
      set invalid graticules_x
      set invalid graticules_y
      set invalid current_trend_details
      set invalid current_time_axis_details
      set invalid current_eng_axis_details
      if get busy current_config_details then
	 begin
	 request current_config_details(new_config.name,
					trend_details,
					time_axis_detail,
					value_axis_detail,
					time_axis_detail[9].current_mode,
					fullsize,
					graticules_x,
					graticules_y)
	 end
      trend_config = new_config
      end

   if invalid trend_config and valid ws_info and
      not(get busy ip_trend_config) then
      begin
      set source ip_trend_config = source(0)
      set file ip_trend_config = "trend_view_config." + ws_info.wrkstn_number
      if ws_info.user_name <> "" then
	 request ip_trend_config
      end

   if valid ip_trend_config and
       invalid trend_config then
      begin
      trend_config = ip_trend_config[1]
      end
   else if invalid ip_trend_config and
       valid ws_info and
       not(get busy ip_trend_config) and
       invalid trend_config then
      begin
      set default trend_config
      trend_config.name = "default config"
      trend_config.left_value = 1
      trend_config.right_value = 1
      trend_config.bottom_axis = 1
      trend_config.top_axis = 1
      trend_config.start_time = min time
      trend_config.duration = 7200
      trend_config.offset_1 = 0
      trend_config.offset_2 = 0
      trend_config.offset_3 = 0
      trend_config.offset_4 = 0
      trend_config.offset_5 = 0
      trend_config.offset_6 = 0
      trend_config.offset_7 = 0
      trend_config.offset_8 = 0
      trend_config.tv_config = "NNNN"
      trend_config.max_value_1 = 100
      trend_config.max_value_2 = 200
      trend_config.max_value_3 = 300
      trend_config.max_value_4 = 400
      trend_config.max_value_5 = 500
      trend_config.max_value_6 = 600
      trend_config.max_value_7 = 700
      trend_config.max_value_8 = 2
      trend_config.min_value_8 = -1
      trend_config.config_1 = "11NNLN"
      trend_config.config_2 = "11NNLN"
      trend_config.config_3 = "11NNLN"
      trend_config.config_4 = "11NNLN"
      trend_config.config_5 = "11NNLN"
      trend_config.config_6 = "11NNLN"
      trend_config.config_7 = "11NNLN"

      if valid ws_info and ws_info.user_name <> "" then
	 begin
	 set source op_trend_config = local_src
	 set file op_trend_config = "trend_view_config." + ws_info.wrkstn_number
	 set value op_trend_config[1] = trend_config
	 request op_trend_config
	 end

      end

   if valid trend_config then
      begin
      if invalid fullsize then
	 begin
	 if valid tmax and valid tmin then
	    fullsize = get_full_size(trend_config.tv_config)
	 else
	    fullsize = off
	 end

      if invalid graticules_y then
	 begin
	 graticules_x = get_x_grats(trend_config.tv_config)
	 graticules_y = get_y_grats(trend_config.tv_config)
	 end

      if invalid time_axis_detail then
	 begin
	 time_axis_detail = get_time_axis_details(trend_config)
	 time_axis_detail[9].current_mode = get_current_mode(trend_config.tv_config)
	 end

      if invalid value_axis_detail then
	 value_axis_detail = get_value_axis_details(trend_config)

      if invalid trend_details then
	 begin
	 trend_details = get_trend_details(trend_config)
	 end

      if selb(x = 150,y = 120,w = 840,h = 500) then
	 begin
	 if fullsize == on then
	    begin
	    fullsize = off
	    changing_full_size = 1
	    if get busy current_config_details then
	       request current_config_details(trend_config.name,
					      trend_details,
					      time_axis_detail,
					      value_axis_detail,
					      time_axis_detail[9].current_mode,
					      fullsize,
					      graticules_x,
					      graticules_y)
	    end
	 end

      if valid line_config_detail or valid new_config then
	 begin
	 if valid line_config_detail then
	    trend_details = line_config_detail

	 if get busy current_eng_axis_details then
	    request current_eng_axis_details(value_axis_detail,trend_details)

	 if get busy current_time_axis_details then
	    request current_time_axis_details(time_axis_detail,trend_details)

	 if get busy current_trend_details then
	    request current_trend_details(trend_details)
	 if get busy current_line_details then
	    request current_line_details(trend_details)
	 if get busy current_config_details then
	    request current_config_details(trend_config.name,
					   trend_details,
					   time_axis_detail,
					   value_axis_detail,
					   time_axis_detail[9].current_mode,
					   fullsize,
					   graticules_x,
					   graticules_y)
	 if get busy line_config_detail then
	    request line_config_detail(trend_details)
	 set invalid line_config_detail
	 end

      if valid current_trend_details or valid new_config then
	 begin
	 if valid current_trend_details then
	    begin
	    trend_details = current_trend_details
	    end
	 if get busy current_eng_axis_details then
	    begin
	    request current_eng_axis_details(value_axis_detail,trend_details)
	    end
	 if get busy current_time_axis_details then
	    begin
	    request current_time_axis_details(time_axis_detail,trend_details)
	    end
	 if get busy line_config_detail then
	    begin
	    request line_config_detail(trend_details)
	    end
	 if get busy current_line_details then
	    begin
	    request current_line_details(trend_details)
	    end
	 if get busy current_config_details then
	    begin
	    request current_config_details(trend_config.name,
					   trend_details,
					   time_axis_detail,
					   value_axis_detail,
					   time_axis_detail[9].current_mode,
					   fullsize,
					   graticules_x,
					   graticules_y)
	    end
	 if get busy current_trend_details then
	    begin
	    request current_trend_details(trend_details)
	    end
	 set invalid current_trend_details
	 end


      if valid current_eng_axis_details then
	 begin
	 value_axis_detail = current_eng_axis_details
	 set invalid current_eng_axis_details
	 if get busy current_config_details then
	    begin
	    request current_config_details(trend_config.name,
					   trend_details,
					   time_axis_detail,
					   value_axis_detail,
					   time_axis_detail[9].current_mode,
					   fullsize,
					   graticules_x,
					   graticules_y)
	    end
	 end

      if valid current_time_axis_details then
	 begin
	 time_axis_detail = current_time_axis_details
	 set invalid current_time_axis_details
	 if get busy current_config_details then
	    begin
	    request current_config_details(trend_config.name,
					   trend_details,
					   time_axis_detail,
					   value_axis_detail,
					   time_axis_detail[9].current_mode,
					   fullsize,
					   graticules_x,
					   graticules_y)
	    end
	 end

      if invalid rlc then
	 rlc = 1
      if current_config_details == 1 then
	 begin
	 if get busy new_config then
	    begin
	    rlc ++
	    request new_config(trend_config.name,rlc)
	    end
	 set invalid current_config_details
	 end
      set invalid new_config

      for j from 1 to 10 do ! GET TOP AND BOTTOM AXES !
	 begin
	 if time_axis_detail[j].display == both_axes then
	    begin
	    ta_top = j
	    ta_bot = j
	    end
	 else
	    begin
	    if time_axis_detail[j].display == axis_1 then
	       ta_bot = j
	    if time_axis_detail[j].display == axis_2 then
	       ta_top = j
	    end
	 end

      text(ch=20,y=20,x=w/2,just=centrecentre,trend_config.name )
      ch = 12
      if fullsize == on then
	 begin
	 if time_axis_detail[9].current_mode == off then
	    begin
	    x = 150 y = 615
	    text(time_axis_detail[9].time_min+time_axis_detail[ta_bot].offset)
	    x = 810
	    text(time_axis_detail[9].time_min+
		 time_axis_detail[9].duration+time_axis_detail[ta_bot].offset)
	    x = 150 y = 30
	    text(time_axis_detail[9].time_min+time_axis_detail[ta_top].offset)
	    x = 810
	    text(time_axis_detail[9].time_min+
		 time_axis_detail[9].duration+time_axis_detail[ta_top].offset)
	    end
	else
	    begin
	    temp_range = axis_ranges[ta_bot]
	    x = 150 y = 615
	    text(temp_range.time_min)
	    x = 810
	    text(temp_range.time_max)

	    temp_range = axis_ranges[ta_top]
	    x = 150 y = 30
	    text(temp_range.time_min)
	    x = 810
	    text(temp_range.time_max)
	    end

	 x = 20 y = 630
	 w = 840 h = 500
	 for i from 1 to 7 do
	    begin
	    if trend_details[i].added == yes and
		trend_details[i].display == yes then
	       begin
	       rect(w = 20,h = 10,fg = trend_details[i].line_colour)
	       box(w = 20,h = 10,fg = black)
	       line_info = " - " + trend_details[i].source + " : " +
		   trend_details[i].address
	       text(x = x + 28,ch = 10,line_info)
	       text(x = x + 145, ch = 10, get_data_type(trend_details[i]))
	       text(x = x + 220,ch = 10,trend_details[i].db_name)
	       temp_str = "Time Axis = " + trend_details[i].use_time_axis
	       if time_axis_detail[9].current_mode == on then
		  begin
		  temp_str += " (Current : " +
		     convert_time_diff_to_str(time_axis_detail[trend_details[i].use_time_axis].offset)
		     + " : " + convert_time_diff_to_str(time_axis_detail[9].duration) + ")"

		  end
	       else
		  begin
		  temp_str += " (" + time_axis_detail[trend_details[i].use_time_axis].time_min + " - " +
		     time_axis_detail[trend_details[i].use_time_axis].time_max + ")"
		  end
	       if time_axis_detail[trend_details[i].use_time_axis].display
		      == both_axes then
		  temp_str += " (Both)"
	       else if time_axis_detail[trend_details[i].use_time_axis].display
		      == axis_1 then
		  temp_str += " (Bottom)"
	       else if time_axis_detail[trend_details[i].use_time_axis].display
		      == axis_2 then
		  temp_str += " (Top)"
	       text(x = x + 440,ch = 10, temp_str)

	       temp_str = "Value Axis = " + trend_details[i].use_value_axis
	       temp_str += "(" + value_axis_detail[trend_details[i].use_value_axis].value_min + " - " +
		  value_axis_detail[trend_details[i].use_value_axis].value_max + ")"
	       if value_axis_detail[trend_details[i].use_value_axis].display
		      == both_axes then
		  temp_str += " (Both)"
	       else if
		   value_axis_detail[trend_details[i].use_value_axis].display
		      == axis_1 then
		  temp_str += " (Left)"
	       else if
		    value_axis_detail[trend_details[i].use_value_axis].display
		      == axis_2 then
		  temp_str += " (Right)"

	       if (trend_details[i].text_id) and
	          (not(db_address(trend_details[i].address) in set(B))) then
		  begin
		  unit_code = get_unit(trend_details[i].text_id)
		  temp_str += " " + unit_code.text_1
		  end

	       text(x = x + 810,ch = 10, temp_str)
	       y += 14
	       end
	    end
	 y = 580
	 x = 150
	 end
      else
	 begin
	 x = 0 y = 0
	 w = 80
	 rect(fg = decoroff,h = 645)

	 x = 80
	 move
	 y += 645
	 add
	 line

	 y = 645 x = 0
	 rect(fg=decoroff,w=1310,h=185)

	 x = 80 y = 645
	 move
	 x += 1200
	 add
	 line

	 w = 120 h = 16 y = 700 bg = decoroff

	 x = 150
	 if l_util_button("Full Size", 1, 0,0) then
	    begin
	    if fullsize == on then
	       begin
	       fullsize = off
	       changing_full_size = 1
	       end
	    else
	       begin
	       fullsize = on
	       changing_full_size = 1
	       end
	     if get busy current_config_details then
	       request current_config_details(trend_config.name,
					      trend_details,
					      time_axis_detail,
					      value_axis_detail,
					      time_axis_detail[9].current_mode,
					      fullsize,
					      graticules_x,
					      graticules_y)
	    end
	 help_area("fullsize_help")

	 x = 272
	 if l_util_button("Tabular Data",1,1, get busy tabular_data) then
	    begin
	    set pinned tabular_data
	    set x tabular_data = 100
	    set y tabular_data = 100
	    set title tabular_data = "Tabular Data"
	    set top tabular_data
	    request tabular_data(trendtable_data,tabular_trend_no,
	   		 trend_details[tabular_trend_no].db_name,
	   		 trend_details[tabular_trend_no].source,
	   		 trend_details[tabular_trend_no].address,
			 trend_details[tabular_trend_no].stream_name,
			 tmax, tmin, time_axis_detail[9].current_mode, time_axis_detail,
			 trend_details)
	    set notop tabular_data
	    end
	 help_area("display_points_help")

	 x = 394
	 if l_util_button("Line Values",1,1, get busy current_line_details) then
	    begin
	    set pinned current_line_details
	    set x current_line_details = 100
	    set y current_line_details = 100
	    set title current_line_details = "Value Details"
	    set top current_line_details
	    request current_line_details(trend_details)
	    set notop current_line_details
	    end
	 help_area("line_values")

	 x = 516
	 if l_util_button("Line Select",1,1,get busy current_trend_details) then
	    begin
	    set pinned current_trend_details
	    set x current_trend_details = 100
	    set y current_trend_details = 100
	    set title current_trend_details = "Line Select"
	    set top current_trend_details
	    request current_trend_details(trend_details)
	    set notop current_trend_details
	    end
	 help_area("line_select")

	 x = 638
	 if l_util_button("Line Config", 1,1, get busy line_config_detail) then
	    begin
	    set pinned line_config_detail
	    set x line_config_detail = 100
	    set y line_config_detail = 100
	    set title line_config_detail = "Line Configuration"
	    set top line_config_detail
	    request line_config_detail(trend_details)
	    set notop line_config_detail
	    end
	 help_area("line_config")


	 x = 760
	 if l_util_button("Load Config", 1,1, get busy new_config) then
	    begin
	    set unpinned new_config
	    set x new_config = 100
	    set y new_config = 65
	    set title new_config = "Trend View Configs (User Number "+ws_info.wrkstn_number+")"
	    set top new_config
	    request new_config(trend_config.name,0)
	    set notop new_config
	    end
	 help_area("load_config_help")


	 x = 882
	 if l_util_button("Save Config",1,1,get busy current_config_details)then
	    begin
	    if valid trend_config then
	       begin
	       set pinned current_config_details
	       set x current_config_details = 100
	       set y current_config_details = 100
	       set title current_config_details = "Trend View Config Info (User Number "
			     + ws_info.wrkstn_number +")"
	       set top current_config_details
	       request current_config_details(trend_config.name,
					      trend_details,
					      time_axis_detail,
					      value_axis_detail,
					      time_axis_detail[9].current_mode,
					      fullsize,
					      graticules_x,
					      graticules_y)
	       set notop current_config_details
	       end
	    end
	 help_area("save_config_help")

	 y=720

	 x = 882
	 if l_util_button("Exit", 1, 0,0) then
	    exit


	 x = 170 y = 580
	 w = 840 h = 500


	 ! Deal with x axis scrolling !
	 if axis_button(x=1030,y=705,0) then
	    begin
	    set pinned current_time_axis_details
	    set x current_time_axis_details = 100
	    set y current_time_axis_details = 100
	    set title current_time_axis_details = "Time Axis Details"
	    set top current_time_axis_details
	    request current_time_axis_details(time_axis_detail,trend_details)
	    set notop current_time_axis_details
	    end
	 help_area(x=1015,y=690,w=30,h=30,"tad_help")

	 if grat_button(x=1065,y=705,1) then
	    begin
	    if graticules_x == off then
	       graticules_x = on
	    else
	       graticules_x = off

	    if get busy current_config_details then
	       request current_config_details(trend_config.name,
					      trend_details,
					      time_axis_detail,
					      value_axis_detail,
					      time_axis_detail[9].current_mode,
					      fullsize,
					      graticules_x,
					      graticules_y)
	    end
	 help_area(x=1050,y=689,w=30,h=30,"grid_x_help")

	 if invalid scroll_size_x then
	    scroll_size_x = 20
	 scroll_size_x = zoom_button(y=670,x=1065,scroll_size_x)
	 help_area(x=1050,y=655,w=30,h=30,"zoom_size")

	 if invalid sb_h then
	    begin
	    for j from 1 to 8 do
	       begin
	       set default sb_h[j]
	       sb_h[j].units_displayed = 1
	       end
	    end
	 if invalid sb_h_line then
	    sb_h_line = 0

	 ! Draw number button !
	 sb_h_line = num_button(y=670,x=1030,sb_h_line)
	 help_area(x=1015,y=655,w=30,h=30,"zoom_axis_help")

	 if sb_h_line == 0 then
	    reset_sb = xv_h_scroll_buttons(x=100,y=655,fg=decoroff,yes)
	 else
	    reset_sb = xv_h_scroll_buttons(x=100,y=655,fg=decoroff,no)
	 help_area(x=100,y=655,w=60,h=30,"scroll_button_help")

	 if sb_h_line == 0 or sb_h_line == 1 then
	    sb_h[1] = xv_h_axis_scroll(x=170,y=655,fg=decoroff,
				  scroll_size_x,reset_sb,1,1)
	 if sb_h_line == 0 or sb_h_line == 2 then
	    sb_h[2] = xv_h_axis_scroll(x=170,y=655,fg=decoroff,
				  scroll_size_x,reset_sb,2,(sb_h_line == 2))
	 if sb_h_line == 0 or sb_h_line == 3 then
	    sb_h[3] = xv_h_axis_scroll(x=170,y=655,fg=decoroff,
				  scroll_size_x,reset_sb,3,(sb_h_line == 3))
	 if sb_h_line == 0 or sb_h_line == 4 then
	    sb_h[4] = xv_h_axis_scroll(x=170,y=655,fg=decoroff,
				  scroll_size_x,reset_sb,4,(sb_h_line == 4))
	 if sb_h_line == 0 or sb_h_line == 5 then
	    sb_h[5] = xv_h_axis_scroll(x=170,y=655,fg=decoroff,
				  scroll_size_x,reset_sb,5,(sb_h_line == 5))
	 if sb_h_line == 0 or sb_h_line == 6 then
	    sb_h[6] = xv_h_axis_scroll(x=170,y=655,fg=decoroff,
				  scroll_size_x,reset_sb,6,(sb_h_line == 6))
	 if sb_h_line == 0 or sb_h_line == 7 then
	    sb_h[7] = xv_h_axis_scroll(x=170,y=655,fg=decoroff,
				  scroll_size_x,reset_sb,7,(sb_h_line == 7))
	 if sb_h_line == 0 or sb_h_line == 8 then
	    sb_h[8] = xv_h_axis_scroll(x=170,y=655,fg=decoroff,
				  scroll_size_x,reset_sb,8,(sb_h_line == 8))
	 help_area(x=170,y=655,h=30,"trend_scrollbar_help")

	 ! Deal with y axis scrolling !
	 if axis_button(x=20,y=57,1) then
	    begin
	    set pinned current_eng_axis_details
	    set x current_eng_axis_details = 100
	    set y current_eng_axis_details = 100
	    set title current_eng_axis_details = "Engineering Axis Details"
	    set top current_eng_axis_details
	    request current_eng_axis_details(value_axis_detail,trend_details)
	    set notop current_eng_axis_details
	    end
	 help_area(x=5,y=42,w=30,h=30,"ead_help")

	 if grat_button(x=20,y=22,2) then
	    begin
	    if graticules_y == off then
	       graticules_y = on
	    else
	       graticules_y = off

	    if get busy current_config_details then
	       request current_config_details(trend_config.name,
					      trend_details,
					      time_axis_detail,
					      value_axis_detail,
					      time_axis_detail[9].current_mode,
					      fullsize,
					      graticules_x,
					      graticules_y)
	    end
	 help_area(x=5,y=7,w=30,h=30,"grid_y_help")

	 if invalid scroll_size_y then
	    scroll_size_y = 20
	 scroll_size_y = zoom_button(y=22,x=55,scroll_size_y)
	 help_area(x=40,y=7,w=30,h=30,"zoom_size")

	 if invalid sb_v then
	    begin
	    for j from 1 to 8 do
	       begin
	       set default sb_v[j]
	       sb_v[j].units_displayed = 1
	       end
	    end

	 if invalid sb_v_line then
	    sb_v_line = 0
	 sb_v_line = num_button(y=57,x=55,sb_v_line)
	 help_area(x=40,y=42,w=30,h=30,"zoom_axis_help")

	 reset_sb = xv_v_scroll_buttons(x=40,y=590,fg=decoroff)
	 help_area(x=40,y=590,h=60,w=30,"scroll_button_help")

	 if sb_v_line == 0 or sb_v_line == 1 then
	    sb_v[1] = xv_v_axis_scroll(x=40,y=80,fg=decoroff,
				  scroll_size_y,reset_sb,1,1)
	 if sb_v_line == 0 or sb_v_line == 2 then
	    sb_v[2] = xv_v_axis_scroll(x=40,y=80,fg=decoroff,
				  scroll_size_y,reset_sb,2,(sb_v_line == 2))
	 if sb_v_line == 0 or sb_v_line == 3 then
	    sb_v[3] = xv_v_axis_scroll(x=40,y=80,fg=decoroff,
				  scroll_size_y,reset_sb,3,(sb_v_line == 3))
	 if sb_v_line == 0 or sb_v_line == 4 then
	    sb_v[4] = xv_v_axis_scroll(x=40,y=80,fg=decoroff,
				  scroll_size_y,reset_sb,4,(sb_v_line == 4))
	 if sb_v_line == 0 or sb_v_line == 5 then
	    sb_v[5] = xv_v_axis_scroll(x=40,y=80,fg=decoroff,
				  scroll_size_y,reset_sb,5,(sb_v_line == 5))
	 if sb_v_line == 0 or sb_v_line == 6 then
	    sb_v[6] = xv_v_axis_scroll(x=40,y=80,fg=decoroff,
				  scroll_size_y,reset_sb,6,(sb_v_line == 6))
	 if sb_v_line == 0 or sb_v_line == 7 then
	    sb_v[7] = xv_v_axis_scroll(x=40,y=80,fg=decoroff,
				  scroll_size_y,reset_sb,7,(sb_v_line == 7))
	 if sb_v_line == 0 or sb_v_line == 8 then
	    sb_v[8] = xv_v_axis_scroll(x=40,y=80,fg=decoroff,
				  scroll_size_y,reset_sb,8,(sb_v_line == 8))
	 help_area(x=40,y=80,w = 30,"trend_scrollbar_help")
	 end

      if time_axis_detail[9].current_mode == on then
	 begin
	 if valid axis_ranges[1] then
	    tmax = current_time + axis_ranges[1].interval -
	 			(current_time % axis_ranges[1].interval)
	 else
	    tmax = current_time + 60 - (current_time % 60)
	 tmin = tmax - time_axis_detail[9].duration
	 end

      for aa to 8 do
	 axis_ranges[aa] = one_axis(tmin, tmax,
				time_axis_detail[aa], value_axis_detail[aa],
				graticules_x, graticules_y, sb_h[aa], sb_v[aa],
      				time_axis_detail[9].current_mode)

      w = 840 h = 500

      ch = 12

      if fullsize == off or changing_full_size then
	 begin
	 if time_axis_detail[9].current_mode == off then
	    begin
	    x = 270 y  = 620
	    text(just = centrecentre, "Time min :" +
			(time_axis_detail[9].time_min+
			 time_axis_detail[ta_bot].offset))
	    x += w  - 60
	    text(just = centreright, "Time max :" +
			(time_axis_detail[9].time_min+
			 time_axis_detail[9].duration+
			 time_axis_detail[ta_bot].offset))
	    x = 270 y = 30
	    text(just = centrecentre, "Time min :" +
			(time_axis_detail[9].time_min+
			 time_axis_detail[ta_top].offset))
	    x += w  - 60
	    text(just = centreright, "Time max :" +
			(time_axis_detail[9].time_min+
			 time_axis_detail[9].duration+
			 time_axis_detail[ta_top].offset))
	    end
	 else
	    begin
	    temp_range = axis_ranges[ta_bot]
	    x = 270 y = 620
	    text(just = centrecentre,"Time min :" + temp_range.time_min)
	    x += w  - 60
	    text(just = centreright,"Time max :" + temp_range.time_max)

	    temp_range = axis_ranges[ta_top]
	    x = 270 y = 30
	    text(just = centrecentre,"Time min :" + temp_range.time_min)
	    x += w  - 60
	    text(just = centreright,"Time max :" + temp_range.time_max)
	    end
	 end

      if fullsize == on and not(changing_full_size) then
	 begin
	 x = 150 y = 580
	 w = 840 h = 500
	 end
      else
	 begin
	 x = 170 y = 580
	 w = 840 h = 500
	 end

      just = topleft
      refl = refl_y

      if valid tabular_data then
	 begin
	 tabular_trend_no = tabular_data
	 set invalid tabular_data
	 end

      i = 1
      if trend_details[i].added == yes then
	 begin
	 values = do_one_line(trendtable_data, tabular_trend_no == i,
		axis_ranges, trend_details[i],
		time_axis_detail[9].current_mode,
		error_text, error_level)
	 if valid values then
	    begin
	    trend_details[i].value_value = values.vv
	    trend_details[i].time_value = values.tv
	    values = invalid_values
	    end
	 end

      i = 2
      if trend_details[i].added == yes then
	 begin
	 values = do_one_line(trendtable_data, tabular_trend_no == i,
		axis_ranges, trend_details[i],
		time_axis_detail[9].current_mode,
		error_text, error_level)
	 if valid values then
	    begin
	    trend_details[i].value_value = values.vv
	    trend_details[i].time_value = values.tv
	    values = invalid_values
	    end
	 end

      i = 3
      if trend_details[i].added == yes then
	 begin
	 values = do_one_line(trendtable_data, tabular_trend_no == i,
		axis_ranges, trend_details[i],
		time_axis_detail[9].current_mode,
		error_text, error_level)
	 if valid values then
	    begin
	    trend_details[i].value_value = values.vv
	    trend_details[i].time_value = values.tv
	    values = invalid_values
	    end
	 end

      i = 4
      if trend_details[i].added == yes then
	 begin
	 values = do_one_line(trendtable_data, tabular_trend_no == i,
		axis_ranges, trend_details[i],
		time_axis_detail[9].current_mode,
		error_text, error_level)
	 if valid values then
	    begin
	    trend_details[i].value_value = values.vv
	    trend_details[i].time_value = values.tv
	    values = invalid_values
	    end
	 end

      i = 5
      if trend_details[i].added == yes then
	 begin
	 values = do_one_line(trendtable_data, tabular_trend_no == i,
		axis_ranges, trend_details[i],
		time_axis_detail[9].current_mode,
		error_text, error_level)
	 if valid values then
	    begin
	    trend_details[i].value_value = values.vv
	    trend_details[i].time_value = values.tv
	    values = invalid_values
	    end
	 end

      i = 6
      if trend_details[i].added == yes then
	 begin
	 values = do_one_line(trendtable_data, tabular_trend_no == i,
		axis_ranges, trend_details[i],
		time_axis_detail[9].current_mode,
		error_text, error_level)
	 if valid values then
	    begin
	    trend_details[i].value_value = values.vv
	    trend_details[i].time_value = values.tv
	    values = invalid_values
	    end
	 end

      i = 7
      if trend_details[i].added == yes then
	 begin
	 values = do_one_line(trendtable_data, tabular_trend_no == i,
		axis_ranges, trend_details[i],
		time_axis_detail[9].current_mode,
		error_text, error_level)
	 if valid values then
	    begin
	    trend_details[i].value_value = values.vv
	    trend_details[i].time_value = values.tv
	    values = invalid_values
	    end
	 end

      if tabular_trend_no <> old_tabular_trend_no then
	 begin
	 old_tabular_trend_no = tabular_trend_no
	 if get busy tabular_data then
	    request tabular_data(trendtable_data,tabular_trend_no,
				 trend_details[tabular_trend_no].db_name,
				 trend_details[tabular_trend_no].source,
				 trend_details[tabular_trend_no].address,
				 trend_details[tabular_trend_no].stream_name,
				 tmax, tmin, time_axis_detail[9].current_mode,
				 time_axis_detail,
				 trend_details)
	 end

      if (lastrow trendtable_data) then
	 begin
	 if get busy tabular_data then
	    begin
	    request tabular_data(trendtable_data,tabular_trend_no,
	   		 trend_details[tabular_trend_no].db_name,
	   		 trend_details[tabular_trend_no].source,
	   		 trend_details[tabular_trend_no].address,
	   		 trend_details[tabular_trend_no].stream_name,
			 tmax, tmin, time_axis_detail[9].current_mode, time_axis_detail,
			 trend_details)
	    end
	 end

      if values.vv <> 0 then
	 begin
	 trend_details[i].value_value = values.vv
	 trend_details[i].time_value = values.tv
	 end


      refl = refl_none

      if selb(y = 80) and fullsize == off and not(changing_full_size) then
	 begin
	 if get busy current_line_details then
	    begin
	    request current_line_details(trend_details)
	    move(x = xp,y = 80)
	    add(x = xp,y = 580)
	    line(lw = 0,fg = black)
	    line_x = xp
	    safe_line_x = xp
	    fullsize_mod = 0
	    end
	 end
      if not get busy current_line_details then
	 set invalid line_x
      if get busy current_line_details and line_x then
	 begin
	 if fullsize == on and not(fullsize_mod) then
	    begin
	    line_x = line_x - 20
	    fullsize_mod = 1
	    end
	 else
	    begin
	    if fullsize == off and changing_full_size then
	       begin
	       line_x = safe_line_x
	       fullsize_mod = 0
	       end
	    end
	 move(x = line_x,y = 80)
	 add(x = line_x,y = 580)
	 line(lw = 0,fg = black)
	 end
      end
   else if not(get busy new_config) then
      error_text = "Waiting for " + source(0) + "'s trend view configuration"
   else
      error_text = "Select new config name"

   if error_text <> "" then
      xv_message(ch = 22,fg = decoroff,just = centrecentre,x = 560,y = 300,
		 "Warning",error_text)

   if (error_level) then
      xv_clock(x=1100, y=687)
end

mimic = graph_drawing_utility w = 1120,h=740,resizable,
icon_w = 64,icon_h = 64,icon = tv_icon
