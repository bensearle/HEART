Load XTEL_READ_WRITE_LIB

! state machine descriptions for object log_on !
! -------------------------------------------------------------------- !
const find_user_number = 1
const find_current_fors = 2
const log_on_to_source = 3
const state_finished = 4

! state machine descriptions for main object !
! ------------------------------------------------------------------ !
const log_on_to_scope = 1
const do_calcs = 2


object debug(str = string)
var op = filewrite string

begin
set reset op
set console op
set value op = str
request op

end

object refresh(src = source)
var op = output b_value_type

begin
set source op = src
request op

end

! *********************************************************** !

object log_on (server_name = source, users_name = string, password = string, mastered_for = set(area)) = int

var current_fors = input workstations(wrkstn_is_me,current_mastered_areas)
var workstation_op = output workstations (user_number, login_password, current_mastered_areas)
var user_ip = input users(user_number)
var log_on_progress = string
var state = loopback int

begin
if invalid state then state = find_user_number

! find the user number from the user name !
! -------------------------------------------------------------- !

if state == find_user_number then
   begin
   
   if invalid get source user_ip then
      begin
      set source user_ip = server_name
      set mayexist user_ip
      set filter user_ip.name = lim_eq
      set limit user_ip.name = users_name
      request user_ip
      end
   
   if valid user_ip and not get busy user_ip then
       state = find_current_fors   
   end


! find any currently mastered FORs !
! --------------------------------------------------------- !

if state == find_current_fors then
   begin
   
   if invalid get source current_fors then
      begin
      set source current_fors = server_name
      set filter current_fors.wrkstn_is_me = lim_eq
      set limit current_fors.wrkstn_is_me = yes
      request current_fors
      end

   if valid current_fors and not get busy current_fors then
      state = log_on_to_source   
  end

! log on to Xtel as the specified user, mastering the additional FORs !
! ---------------------------------------------------------------------------------------------------- !

if state == log_on_to_source then
   begin
   
   if invalid get source workstation_op then
      begin
      set source workstation_op = server_name
      set old_default workstation_op
      set default workstation_op
      set old_off workstation_op.user_number
      set old_off workstation_op.login_password
      set old_off workstation_op.current_mastered_areas
      set filter workstation_op.wrkstn_is_me = lim_eq
      set limit workstation_op.wrkstn_is_me = yes
      set value workstation_op.user_number = user_ip.user_number
      set value workstation_op.login_password = password 
      set value workstation_op.current_mastered_areas = mastered_for + current_fors.current_mastered_areas
  
      request workstation_op   
      end

   if valid workstation_op and get status workstation_op == "" then
      state = state_finished
      
   end



if invalid get status workstation_op then
   log_on = 0
else
   log_on = ((state == state_finished) and (get status workstation_op == ""))

end

! *************************************************************************** !


object log_on_for_read (server_name = source, users_name = string, password = string) = int

var workstation_op = output workstations (user_number, login_password)
var user_ip = input users(user_number)
var log_on_progress = string
var state = loopback int

begin
if invalid state then state = find_user_number

! find the user number from the user name !
! -------------------------------------------------------------- !

if state == find_user_number then
   begin
   if invalid get source user_ip then
      begin
      set source user_ip = server_name
      set mayexist user_ip
      set filter user_ip.name = lim_eq
      set limit user_ip.name = users_name
      request user_ip
      end
   
   if valid user_ip and not get busy user_ip then
      state = log_on_to_source   
   end


! log on to Xtel as the specified user !
! -------------------------------------------------- !

if state == log_on_to_source then
   begin
   
   if invalid get source workstation_op then
      begin
      set source workstation_op = server_name
      set old_default workstation_op
      set default workstation_op
      set old_off workstation_op.user_number
      set old_off workstation_op.login_password
      set filter workstation_op.wrkstn_is_me = lim_eq
      set limit workstation_op.wrkstn_is_me = yes
      set value workstation_op.user_number = user_ip.user_number
      set value workstation_op.login_password = password 
  
      request workstation_op   
      end

   if valid workstation_op and get status workstation_op == "" then
      state = state_finished     
   end


if invalid get status workstation_op then
   log_on_for_read = 0
else
   log_on_for_read = ((state == state_finished) and (get status workstation_op == ""))

end

! *************************************************************************** !


object main_object(w,h,fg,bg)

! loopback variables !
var state = loopback int
var logged_on = loopback int

var e1_value = input e_value_type
var e2_value = input e_value_type
var e3_value = input e_value_type
var e4_value = input e_value_type
var e5_value = input e_value_type
var b10001_value = input b_value_type

var north_current_ocb8 	= input e_value_type    
var north_current_ocb16 	= input e_value_type    
var north_volts_ocb8   	= input e_value_type    
var north_volts_ocb16 	= input e_value_type    
var west_current_ocb6  	= input e_value_type
var west_current_ocb16  	= input e_value_type    
var west_current_ocb22  	= input e_value_type    
var west_volts_ocb6   	= input e_value_type    
var west_volts_ocb16 	= input e_value_type
var west_current_ocb3          = input e_value_type 
var west_current_ocb14        = input e_value_type
  
var north_current_ocb3	= input e_value_type
var north_volts_ocb3	= input e_value_type
var north_current_ocb10	= input e_value_type
var north_volts_ocb10	= input e_value_type
var ss112_vcb1_current	= input e_value_type
var ss112_bs1_volts	= input e_value_type
var ss112_bs2_volts	= input e_value_type
var ss112_vcb11_current 	= input e_value_type
var ss113_bs1_current	= input e_value_type
var ss113_bs1_volts	= input e_value_type
var ss113_bs2_current	= input e_value_type
var ss113_bs2_volts	= input e_value_type

var bsp_cta_current_ocb1= input e_value_type
var bsp_cta_volts_ocb1	= input e_value_type
var bsp_cta_current_ocb6= input e_value_type
var bsp_cta_volts_ocb6	= input e_value_type
var bsp_cta_current_ocb10 = input e_value_type
var bsp_cta_volts_ocb10	= input e_value_type

var serv_a_fail		= input b_value_type
var serv_b_fail		= input b_value_type
var h_single		= input b_value_type
var serv_c_fail		= input b_value_type
var serv_d_fail		= input b_value_type
var h2_single		= input b_value_type
var serv_e_fail		= input b_value_type
var serv_f_fail		= input b_value_type
var h3_single		= input b_value_type
var harcs_fault		= input b_value_type
var harcs_fail		= input b_value_type
var fm_linea		= input b_value_type
var fm_lineb		= input b_value_type
var serv_g_fail		= input b_value_type
var mains_fail_139		= input b_value_type
var mains_low_139		= input b_value_type

var sms_holding                   = yesno
var sms_init		= yesno
var serv_a_holding		= yesno
var serv_a_init		= yesno
var serv_b_holding		= yesno
var serv_b_init		= yesno
var serv_c_holding		= yesno
var serv_c_init		= yesno
var serv_d_holding		= yesno
var serv_d_init		= yesno
var serv_e_holding		= yesno
var serv_e_init		= yesno
var serv_f_holding		= yesno
var serv_f_init		= yesno
var harcs_fault_holding	= yesno
var harcs_fault_init		= yesno
var harcs_fail_holding	= yesno
var harcs_fail_init		= yesno
var fm_holding		= yesno
var fm_init		= yesno
var serv_g_holding		= yesno
var serv_g_init		= yesno
var mains_fail_139_holding	= yesno
var mains_fail_139_init	= yesno
var mains_low_139_holding	= yesno
var mains_low_139_init	= yesno

var reporter_wdog		= onoff

var total_pwr 		= real
var bawcc_pwr 		= real
var west_pwr		= real
var fuel_pwr		= real
var bsp_pwr			= real

var total_pwr_op	= output e_value_type   
var bawcc_pwr_op	= output e_value_type
var west_pwr_op	= output e_value_type
var fuel_pwr_op      = output e_value_type
var bsp_pwr_op	= output e_value_type

var reporter_wdog_op	= output b_value_type

begin

if invalid state then 
   begin

    !------------------------- POWER  CALCS ---------------------------- !

   get_e_value(heathrow,e5,north_current_ocb8)
   get_e_value(heathrow,e7,north_current_ocb16)
   get_e_value(heathrow,e15,north_volts_ocb8)
   get_e_value(heathrow,e16,north_volts_ocb16)
   get_e_value(heathrow,e254,west_current_ocb6)
   get_e_value(heathrow,e263,west_current_ocb16)
   get_e_value(heathrow,e268,west_current_ocb22)
   get_e_value(heathrow,e269,west_volts_ocb6)
   get_e_value(heathrow,e270,west_volts_ocb16)
   get_e_value(heathrow,e252,west_current_ocb3)
   get_e_value(heathrow,e261,west_current_ocb14)

   get_e_value(heathro2,e1522,north_current_ocb3)
   get_e_value(heathro2,e1533,north_volts_ocb3)
   get_e_value(heathro2,e1531,north_current_ocb10)
   get_e_value(heathro2,e1534,north_volts_ocb10)
   get_e_value(heathro2,e3010,ss112_vcb1_current)
   get_e_value(heathro2,e3013,ss112_bs1_volts)
   get_e_value(heathro2,e3022,ss112_bs2_volts)
   get_e_value(heathro2,e3024,ss112_vcb11_current)
   get_e_value(heathro2,e3113,ss113_bs1_current)
   get_e_value(heathro2,e3114,ss113_bs1_volts)
   get_e_value(heathro2,e3122,ss113_bs2_current)
   get_e_value(heathro2,e3123,ss113_bs2_volts)

   get_e_value(heathro3,e2020,bsp_cta_current_ocb1)
   get_e_value(heathro3,e2021,bsp_cta_volts_ocb1)
   get_e_value(heathro3,e2030,bsp_cta_current_ocb6)
   get_e_value(heathro3,e2031,bsp_cta_volts_ocb6)
   get_e_value(heathro3,e2038,bsp_cta_current_ocb10)
   get_e_value(heathro3,e2039,bsp_cta_volts_ocb10)

   ! Logon to the Scope server using user and password details !
   state = log_on_to_scope
   end

if state == log_on_to_scope then
   begin
   if invalid logged_on then
      logged_on = 0
   
   if not logged_on then
      logged_on = log_on_for_read (heathrow, "reporter", "reporter") and
                         log_on_for_read (heathro2, "reporter", "reporter") and
                         log_on_for_read (heathro4, "reporter", "reporter") and
                         log_on (heathro3, "reporter", "reporter", set(a1)) 

   if logged_on then
      state = do_calcs
   end


if state == do_calcs then
   begin
   total_pwr 	= !((north_current_ocb8.e_value   * north_volts_ocb8.e_value)  
	    	+ (north_current_ocb16.e_value * north_volts_ocb16.e_value)
		+ !((north_current_ocb3.e_value * north_volts_ocb3.e_value)
		+ (north_current_ocb10.e_value * north_volts_ocb10.e_value)
	    	+ (west_current_ocb22.e_value * west_volts_ocb16.e_value)
	    	+ (west_current_ocb6.e_value   * west_volts_ocb6.e_value)
	    	+ (west_current_ocb16.e_value * west_volts_ocb16.e_value)
		+ (bsp_cta_current_ocb1.e_value * bsp_cta_volts_ocb1.e_value)
		+ (bsp_cta_current_ocb6.e_value * bsp_cta_volts_ocb6.e_value)
		+ (bsp_cta_current_ocb10.e_value * bsp_cta_volts_ocb10.e_value))
	    	* 3.0 / 1732.050808

   bawcc_pwr 	= ((ss112_bs1_volts.e_value * ss112_vcb1_current.e_value)
	        	+ (ss112_bs2_volts.e_value * ss112_vcb11_current.e_value)
	        	+ (ss113_bs1_volts.e_value * ss113_bs1_current.e_value)
		+ (ss113_bs2_volts.e_value * ss113_bs2_current.e_value))
		* 3.0 / 1732.050808

   west_pwr	=(((west_current_ocb22.e_value * west_volts_ocb16.e_value)
		+ (west_current_ocb6.e_value   * west_volts_ocb6.e_value)
		+ (west_current_ocb16.e_value * west_volts_ocb16.e_value))
		* 3.0 / 1732.050808)
		-  bawcc_pwr

  fuel_pwr              =((west_current_ocb3.e_value * west_volts_ocb6.e_value)
                             + (west_current_ocb14.e_value * west_volts_ocb16.e_value))
                              * 3.0 / 1732.050808

   bsp_pwr = ((bsp_cta_current_ocb1.e_value * bsp_cta_volts_ocb1.e_value)
		+ (bsp_cta_current_ocb6.e_value * bsp_cta_volts_ocb6.e_value)
		+ (bsp_cta_current_ocb10.e_value * bsp_cta_volts_ocb10.e_value))
		* 3.0 / 1732.050808


   ! Write the data to the scope databae using the derived values !  
   if valid total_pwr and valid bawcc_pwr and valid west_pwr and valid fuel_pwr then
      begin
      set default total_pwr_op
      set default bawcc_pwr_op
      set default west_pwr_op 
      set default fuel_pwr_op
      set default bsp_pwr_op
      set value total_pwr_op.e_value = total_pwr
      set value bawcc_pwr_op.e_value = bawcc_pwr
      set value west_pwr_op.e_value  = west_pwr
      set value fuel_pwr_op.e_value = fuel_pwr
      set value bsp_pwr_op.e_value = bsp_pwr

      if valid total_pwr then
	   begin
	   get_e_value(heathro3,e1,e1_value)
	   if invalid e1_value then
            set_e_value(heathro3,e1,total_pwr_op)
	   if valid e1_value and (e1_value.e_value <> total_pwr) then
		set_e_value(heathro3,e1,total_pwr_op)
	   end

      if valid bawcc_pwr then
	   begin
	   get_e_value(heathro3,e2,e2_value)
	   if invalid e2_value then
            set_e_value(heathro3,e2,bawcc_pwr_op)
	   if valid e2_value and (e2_value.e_value <> bawcc_pwr) then
		set_e_value(heathro3,e2,bawcc_pwr_op)
	   end

      if valid west_pwr then
	   begin
	   get_e_value(heathro3,e3,e3_value)
	   if invalid e3_value then
            set_e_value(heathro3,e3,west_pwr_op)
	   if valid e3_value and (e3_value.e_value <> west_pwr) then
		set_e_value(heathro3,e3,west_pwr_op)
	   end

      if valid fuel_pwr then
	   begin
	   get_e_value(heathro3,e4,e4_value)
	   if invalid e4_value then
            set_e_value(heathro3,e4,fuel_pwr_op)
	   if valid e4_value and (e4_value.e_value <> fuel_pwr) then
		set_e_value(heathro3,e4,fuel_pwr_op)
	   end

      if valid fuel_pwr then
	   begin
	   get_e_value(heathro3,e4,e4_value)
	   if invalid e4_value then
            set_e_value(heathro3,e4,fuel_pwr_op)
	   if valid e4_value and (e4_value.e_value <> fuel_pwr) then
		set_e_value(heathro3,e4,fuel_pwr_op)
	   end

      if valid bsp_pwr then
	   begin
	   get_e_value(heathro3,e5,e5_value)
	   if invalid e5_value then
            set_e_value(heathro3,e5,bsp_pwr_op)
	   if valid e5_value and (e5_value.e_value <> bsp_pwr) then
		set_e_value(heathro3,e5,bsp_pwr_op)
	   end

      state = do_calcs
      end
   end

!-----------------------------RepWdog-------------------------------------!

reporter_wdog = on
set default reporter_wdog_op
set value reporter_wdog_op.b_value = reporter_wdog
get_b_value(heathro3,b10001,b10001_value)
if invalid b10001_value then
   set_b_value(heathro3,b10001,reporter_wdog_op)
if valid b10001_value and (b10001_value.b_value <> on) then
   set_b_value(heathro3,b10001,reporter_wdog_op)


end

mimic = main_object w=700,h=500,just=centrecentre,resizable

