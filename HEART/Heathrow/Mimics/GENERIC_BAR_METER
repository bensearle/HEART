load mimic_libutil
load fp_generic_server_request

type e_db_row_type =  db_elements(db_addr,e_value)
type e_test_row =  db_alarm_config(db_addr,config_number,test_value)
type e_test_table =  e_test_row[6]
type menu_options_type = enum(tag_message = "Alter Tagged Message",untag_message = "Clear Tagged Message")

!
************************************************************
* AN ANALOGUE SENSOR OBJECT                                *
* this object is called by the Top Level variable (mimic).
* All these meter objects allow for an under/over range input from PLC
************************************************************
!

object generic_bar_meter_obj(plc_comms=int,c_offset=int,e_offset=int,b_over=int,b_under=int,src=source,units=string,metname=string,range_lo=real,range_hi=real,dec_places=int,bar_colour=colour,range_dec_places=int,res_int1=int,res_str1=string)
VAR under_range		= input		b_bool_type
VAR over_range		= input		b_bool_type

var plc_comms_alarms = input b_db_row_type[2]

var  current_alarm           = input alarm_row_type
var  current_level_ip        = input e_db_row_type
var  tag_message_ip          = input c_db_row_type

var  input_setpoint          = input e_test_table
var  output_setpoint         = output e_test_table
var  temp_menu               = menu string
var  stand_control_menu      = menu menu_options_type
var  high_setpoint_panel     = panel real
var  low_setpoint_panel      = panel real
var  tag_message_panel       = panel panel_item_row
var  main_menu               = menu string(30)
var  items_added             = loopback int
var  temp_sps                = loopback string

var  sensor_bg               = loopback colour
var  meter_bg                = loopback colour
var  input_value             = real
var  bar_length              = int
var  bar_start               = int
var scaled_val=real
var range = real

var  point_a                = loopback string
var  point_b                = loopback string
var  point_c                = loopback string
var  point_d                = loopback string
var  point_e                = loopback string
var  point_f                = loopback int
var  point_g                = loopback int
var  point_h                = loopback int
var  point_i                = loopback int

var  input_value_hi             = real
var  input_value_lo            = real
var point_hi                = loopback int
var point_lo               = loopback int
begin
! INITIALISATION !
! REQUEST ENGINEERINGS FROM SCOPE !

if invalid get source current_alarm then 

   begin
   set source plc_comms_alarms = src
   set filter plc_comms_alarms.db_addr = lim_ge
   set limit plc_comms_alarms.db_addr = db_address("b" + plc_comms)
   set mayexist plc_comms_alarms
   set persist plc_comms_alarms
   request plc_comms_alarms

   SET SOURCE under_range = src
   SET FILTER under_range.db_addr = lim_eq
   SET LIMIT under_range.db_addr = db_address(int(b1) + b_under  -1)
   set priority under_range.db_addr = 15
   set mayexist under_range
   SET PERSIST under_range
   REQUEST under_range

   SET SOURCE over_range = src
   SET FILTER over_range.db_addr = lim_eq
   SET LIMIT over_range.db_addr = db_address(int(b1) + b_over  -1)
   set priority over_range.db_addr = 15
   set mayexist over_range
   SET PERSIST over_range
   REQUEST over_range
   
   set source tag_message_ip = src
   set filter tag_message_ip.db_addr = lim_eq
   set limit tag_message_ip.db_addr = db_address(int(c1) + c_offset -1)
   set persist tag_message_ip
   request tag_message_ip

   set source current_alarm = src
   set filter current_alarm.db_addr = lim_eq
   set limit current_alarm.db_addr = db_address(int(e1) + e_offset - 1)
   set persist current_alarm 
   request current_alarm

   set source current_level_ip = src
   set filter current_level_ip.db_addr = lim_eq
   set limit current_level_ip.db_addr = db_address(int(e1) + e_offset - 1)
   set persist current_level_ip 
   request current_level_ip

   set source input_setpoint = src
   set filter input_setpoint.db_addr = lim_eq
   set limit input_setpoint.db_addr = db_address(int(e1) + e_offset - 1)
   set mayexist input_setpoint
   set mustexist input_setpoint.db_addr
   set mustexist input_setpoint.config_number
   set persist input_setpoint
   request input_setpoint

   end



! TAG MESSAGE PANEL !

if valid tag_message_panel then
   begin
   set_c_value( db_address(int(c1) + c_offset - 1),src,tag_message_panel.str)
   set invalid tag_message_panel
   end


! MAIN MENU !

just = centrecentre
w=60 h=60 
set rect main_menu
set title main_menu="Meter Menu"
set remove main_menu="Alter Tag Message"
set remove main_menu="Clear Tag Message"
set add main_menu="Alter Tag Message"
set add main_menu="Clear Tag Message"

! CONTROL MENU !

if valid main_menu then
   begin

   case main_menu of
        "Alter High Alarm Level"
            begin
	realf=fixed2
            set title high_setpoint_panel = "Alter High Alarm Level-" + metname +" (" +input_setpoint[1].test_value +")"
            set unpinned high_setpoint_panel
            request high_setpoint_panel
            end

        "Alter Low Alarm Level"
            begin
	realf=fixed2
            set title low_setpoint_panel = "Alter Low Alarm Level-" + metname +" (" +input_setpoint[2].test_value +")"
            set unpinned low_setpoint_panel
            request low_setpoint_panel
            end
 
        "Alter Tag Message"
            begin
            set title tag_message_panel = "Modify Tag Message"
            set label tag_message_panel.str = "Tag Message :"
            set unpinned tag_message_panel
            request tag_message_panel
            end

        "Clear Tag Message"
            begin
            set_c_value(db_address(int(c1) + c_offset - 1), src, "")
            end
       
        default
            begin
            end

   set invalid main_menu
   end


! SELECT METER SIZE/TYPE !

! meters !

	
	if range_dec_places==1 then realf=fixed1
	else if range_dec_places==2 then realf=fixed2
	else realf=fixed0

	range = real(range_hi - range_lo)

	if invalid range or range==0 then 
		begin
			point_a = 0
			point_b = 25
			point_c = 50
			point_d = 75
			point_e = 100
			range =100 
		end
	else
		begin
			point_a = string(real(range_lo))
			point_b = string(real(0.25*(range_hi-range_lo)+range_lo))
			point_c = string(real(0.5*(range_hi-range_lo)+range_lo))
			point_d = string(real(0.75*(range_hi-range_lo)+range_lo))
			point_e = string(real(range_hi))
		end

	point_f = 160
	point_g = 110
	point_h = 100
	point_i = 68

	input_value = current_level_ip.e_value
	scaled_val=input_value-range_lo
	bar_length = int(  scaled_val/range * 100)
	bar_start = point_h/2




! SELECT BAR COLOUR !

	if plc_comms_alarms[1].b_value==1 and plc_comms_alarms[2].b_value==1 then
	begin
   		   sensor_bg = magenta
     		   bar_start = point_h/2
	end
	else if current_alarm.alarm_status == w_note then
   		begin   
   		   sensor_bg = flashred
  		   bar_start = point_h/2
   		end
	else if current_alarm.alarm_status == w_clr then
   		begin   
   		   sensor_bg = red
  		   bar_start = point_h/2
   		end

	else if bar_length > 150 or bar_length < 0 or 
   	current_alarm.alarm_status == w_clr or  over_range.b_value==1 or under_range.b_value==1 then
   		begin
   		   sensor_bg = red
   		   bar_start = point_h/2
 		end
	else 
		sensor_bg = bar_colour





! SELECT METER BG !

	if tag_message_ip.c_value <> "" then 
	  meter_bg = yellow
	else
	  meter_bg = decoroff     


! DRAW METER !
	just = centrecentre
	x = 0 y = 0 rect(fg=meter_bg,h=point_f,w=80)
	x -= 40 y += point_f/2 add y -= point_f add x += 80 add line(lw=1,fg=decorlight) clear
	x = 40 y = -point_f/2 add y += point_f add x -= 80 add line(lw=1,fg=decorshadow) clear

	if plc_comms_alarms[1].b_value==1 and plc_comms_alarms[2].b_value==1 then
	begin
		x = 0 y = 0 rect(fg=magenta,h=point_g,w=70)
		x = 35 y = -point_g/2 add x -= 70 add y +=point_g add line(lw=1,fg=decorlight) clear
		x = 35 y = -point_g/2 add y += point_g add x -= 70 add line(lw=1,fg=decorshadow) clear
	end
	if  over_range.b_value==1 and res_str1=="MODBUS" then
	begin
		x = 0 y = 0 rect(fg=magenta,h=point_g,w=70)
		x = 35 y = -point_g/2 add x -= 70 add y +=point_g add line(lw=1,fg=decorlight) clear
		x = 35 y = -point_g/2 add y += point_g add x -= 70 add line(lw=1,fg=decorshadow) clear
	end
	else if  over_range.b_value==1 or under_range.b_value==1 and res_str1<>"MODBUS" then
	begin
		x = 0 y = 0 rect(fg=red,h=point_g,w=70)
		x = 35 y = -point_g/2 add x -= 70 add y +=point_g add line(lw=1,fg=decorlight) clear
		x = 35 y = -point_g/2 add y += point_g add x -= 70 add line(lw=1,fg=decorshadow) clear
	end
	else 
	begin
		x = 0 y = 0 rect(fg=decoroff,h=point_g,w=70)
		x = 35 y = -point_g/2 add x -= 70 add y +=point_g add line(lw=1,fg=decorlight) clear
		x = 35 y = -point_g/2 add y += point_g add x -= 70 add line(lw=1,fg=decorshadow) clear
	end

	y = -point_h/2 x = 3 add x = -2 add y = -point_h/4 add x = 3 add x = -2 add 
	y = 0 add x = 3 add x = -2 add y = point_h/4 add x = 3 add x = -2 add
	y = point_h/2 add x = 2 add line(fg=black,lw=2) clear
	
	x = -18 y = (point_h-2)/2 text (tfg=black,ch=12,point_a)
	x = -18 y = point_h/4 text (tfg=black,ch=12,point_b)
	x = -18 y = 0 text (tfg=black,ch=12,point_c)
	x = -18 y = -point_h/4 text (tfg=black,ch=12,point_d)
	x = -18 y = -(point_h-2)/2 text (tfg=black,ch=12,point_e)
	x = 25 y = -100 add  
	y = -point_i x = 0 text(tfg=black,font=font_bold,ch=16,metname)

	if input_value<0 then input_value=0
	if input_value>range_hi then input_value=range_hi

! DISPLAY ANALOGUE VALUE - TEXT !
	if dec_places == 0 then realf=fixed0
	else if dec_places == 1 then realf=fixed1
	else if dec_places == 2 then realf=fixed2
	else if dec_places == 3 then realf=fixed3
	else if dec_places == 4 then realf=fixed4
	else realf=fixed0

		y = point_i x = 0 text(tfg=black,ch=16,input_value+" "+units) clear


	! TAG MESSAGE BOX !
	x = 0 y = 0
	w = 80 h = point_f
	if selb and tag_message_ip.c_value <> "" then
	   begin
		   message_text_box(tag_message_ip.c_value)
	   end


	! DRAW BAR Border !
	just=centrecentre
	y = -point_h/2 x = 25 add x -= 20 add y += point_h add line(lw=1,fg=decorshadow) clear
	y = point_h/2 x = 5 add x += 20 add y -= point_h add line(lw=1,fg=decorlight) clear
	just = bottomcentre

	if invalid input_setpoint[1].test_value then
	   begin
	   end
	else
	   begin
		!y = bar_start x = 14 rect(w=25,h=100,fg=grey) clear!
	   end

	if invalid input_setpoint[1].test_value then
	   begin
	   end
	else
	   begin
		!y = bar_start x = 14 rect(w=25,h=100,fg=grey) clear!
	   end


	if invalid input_setpoint[1].test_value then
	begin
	end
	else
	begin
		clear
		input_value_hi = input_setpoint[1].test_value
		scaled_val=input_value_hi-range_lo
		point_hi = int(  scaled_val/range * 100)
		if point_hi >=100 then point_hi =100
		if point_hi <0 then point_hi =0
		y = bar_start-point_hi x=35 text (font=font_bold,ch=10,tfg=black,"H") clear
		y = bar_start-point_hi x=35 add x-=10 add x+=4 y-=3 add y+=3 add line (lw=2,fg=red) clear
		clear
	end

	if invalid input_setpoint[2].test_value then
	begin
	end
	else
	begin
		clear
		input_value_lo = input_setpoint[2].test_value
		scaled_val=input_value_lo-range_lo
		point_lo = int(  scaled_val/range * 100)
		if point_lo >=100 then point_lo =100
		if point_lo <0 then point_lo =0
		if point_lo <=0 then point_lo=0
		y = bar_start-point_lo x=35 text (font=font_bold,ch=10,tfg=black,"L") clear
		y = bar_start-point_lo x=35 add x-=10 add x+=4 y-=3 add y+=3 add line (lw=2,fg=red) clear
	end
	clear


	if bar_length > 100 then bar_length = 95
	if bar_length < 0 then  bar_length = 0

	y = bar_start x = 15 rect(w=20,h=bar_length,fg=sensor_bg) clear





	! OVER RANGE MESSAGE !
	
	if  over_range.b_value==1 and under_range.b_value==0 and res_str1<>"MODBUS" then
	begin
		x = 0 y = -point_h/2+35 text (tfg=white,ch=19,font=font_bold,"OVER")
		x = 0 y = -point_h/2+75 text (tfg=white,ch=19,font=font_bold,"RANGE")
	end

	! UNDER RANGE MESSAGE !

	if  under_range.b_value==1 and over_range.b_value==0 then
	begin
		x = 0 y = -point_h/2+35 text (tfg=white,ch=19,font=font_bold,"UNDER")
		x = 0 y = -point_h/2+75 text (tfg=white,ch=19,font=font_bold,"RANGE")
	end

	if  under_range.b_value==1 and over_range.b_value==1 then
	begin
		x = 0 y = -point_h/2+35 text (tfg=white,ch=19,font=font_bold," INVALID")
		x = 0 y = -point_h/2+75 text (tfg=white,ch=19,font=font_bold,"RANGE")
	end


	! CONFIGURE MENU !
	
	if valid input_setpoint then
	temp_sps = "High = "+ int(input_setpoint[1].test_value) +"  Low = " +int(input_setpoint[2].test_value)

	x=0 y=90 
	w=75 h=170
	set rect main_menu
	set title main_menu = temp_sps

	if invalid items_added then
	  begin
	  set add main_menu   = "Alter High Alarm Level"
	  set add main_menu   = "Alter Low Alarm Level"
	  items_added = 1
	  end






	! WRITE INPUT TO SERVER !
	
	if valid high_setpoint_panel and high_setpoint_panel > input_setpoint[2].test_value then
	begin
	   set source output_setpoint = src
	   set old_value output_setpoint = input_setpoint
	   set value output_setpoint = input_setpoint
	   set value output_setpoint[1].test_value = high_setpoint_panel
	   request output_setpoint
	   set invalid high_setpoint_panel
	end

	if valid low_setpoint_panel and low_setpoint_panel < input_setpoint[1].test_value then 
	begin
	   set source output_setpoint = src
	   set old_value output_setpoint = input_setpoint
	   set value output_setpoint = input_setpoint
	   set value output_setpoint[2].test_value = low_setpoint_panel
	   request output_setpoint
	   set invalid low_setpoint_panel
	end
end

!
************************************************************
* AN ANALOGUE TEXT DISPLAY ONLY OBJECT                                *
* this object is called by the Top Level variable (mimic).
* 
************************************************************
!


object text_meter(plc_offset=int,e_offset=int,src=source,title=string,units=string,text_col=colour,dec_places=int)
var status_e_ip = input e_db_row_type
var plc_inputs = input b_db_row_type[2]
var current_alarm = input alarm_row_type
var meter_val = real
begin
	if invalid get source plc_inputs then
	begin
   	set source plc_inputs = src
   	set filter plc_inputs.db_addr = lim_ge
   	set limit plc_inputs.db_addr = db_address(int(b1) + plc_offset - 1)
   	set priority plc_inputs.db_addr = 15
   	set persist plc_inputs
   	set mayexist plc_inputs
   	request plc_inputs
	end

	if invalid get source status_e_ip then
	begin
	   set source status_e_ip = src
	   set filter status_e_ip.db_addr = lim_eq
	   set limit status_e_ip.db_addr = db_address(int(e1) + e_offset - 1)
	   set priority status_e_ip.db_addr = 15
	   set persist status_e_ip 
	   set mayexist status_e_ip 
	   request status_e_ip 

	   set source current_alarm = src
	   set filter current_alarm.db_addr = lim_eq
	   set limit current_alarm.db_addr = db_address(int(e1) + e_offset - 1)
	   set persist current_alarm 
	   request current_alarm
	end

	if plc_inputs[1].b_value == on and plc_inputs[2].b_value == on then
		tfg = magenta3
	else if current_alarm.alarm_status == w_note then
		tfg = flashred
	else if current_alarm.alarm_status == w_clr then
		tfg = red
	else
		tfg = text_col

	if dec_places==3 then realf=fixed3
	else if dec_places==2 then realf=fixed2
	else if dec_places==1 then realf=fixed1
	else realf=fixed0

	X=-24 Y=-16 W=48 H=32 FG=decoroff JUST=TOPLEFT FS=FILLSOLID ANGLE=0 ROTRECT
	X=-22 Y=0 W=44 H=13 FG=LIGHTGREY JUST=TOPLEFT FS=FILLSOLID ANGLE=0 ROTRECT
	X=0 Y=-7 CH=11 FONT=FONT_NORMAL FONTNAME="Arial" JUST=centrecentre TEXT(tfg=black, title)
	X=0 Y=8 CH=12 TEXT(just=centrecentre,status_e_ip.e_value)

	Clear

	X=-22 Y=1 Add	X=-22 Y=15 Add	X=22 Y=15 Add
	FG=grey80 LS=SOLID LW=1 CS=CAPROUND LINE clear
	Clear
	X=-22 Y=0 Add	X=22 Y=0 Add	X=22 Y=14 Add
	FG=grey80 LS=SOLID LW=1 CS=CAPROUND LINE clear
	Clear

	clear
	X=-24 Y=16 Add	X=-24 Y=-16 Add	X=24 Y=-16 Add
	FG=white LS=SOLID LW=1 CS=CAPROUND LINE clear
	X=-24 Y=16 Add	X=24 Y=16 Add	X=24 Y=-16 Add
	FG=grey40 LS=SOLID LW=1 CS=CAPROUND LINE clear
	Clear

	X=17 Y=8 CH=11 TEXT(tfg=black, units)
end

!
************************************************************
* AN ANALOGUE TEXT DISPLAY ONLY OBJECT                                *
* this object is called by the Top Level variable (mimic).
* Modbus Comms Failure Parameter added
************************************************************
!
object text_modbus_meter(plc_offset=int,mbus_offset=int,e_offset=int,src=source,title=string,units=string,text_col=colour,dec_places=int,res1=int,res2=int)
var status_e_ip = input e_db_row_type
var plc_inputs = input b_db_row_type[2]
var mb_inputs = input b_db_row_type		! * modbus comms failure * !
var current_alarm = input alarm_row_type
var meter_val = real
begin
	if invalid get source plc_inputs then
	begin
   	set source plc_inputs = src
   	set filter plc_inputs.db_addr = lim_ge
   	set limit plc_inputs.db_addr = db_address(int(b1) + plc_offset - 1)
   	set priority plc_inputs.db_addr = 15
   	set persist plc_inputs
   	set mayexist plc_inputs
   	request plc_inputs
	end

	if invalid get source status_e_ip then
	begin
	   set source mb_inputs = src
	   set filter mb_inputs.db_addr = lim_ge
	   set limit mb_inputs.db_addr = db_address(int(b1) + mbus_offset - 1)
	   set priority mb_inputs.db_addr = 15
	   set persist mb_inputs
	   set mayexist mb_inputs
	   request mb_inputs

	   set source status_e_ip = src
	   set filter status_e_ip.db_addr = lim_eq
	   set limit status_e_ip.db_addr = db_address(int(e1) + e_offset - 1)
	   set priority status_e_ip.db_addr = 15
	   set persist status_e_ip 
	   set mayexist status_e_ip 
	   request status_e_ip 

	   set source current_alarm = src
	   set filter current_alarm.db_addr = lim_eq
	   set limit current_alarm.db_addr = db_address(int(e1) + e_offset - 1)
	   set persist current_alarm 
	   request current_alarm
	end

	if plc_inputs[1].b_value == on and plc_inputs[2].b_value == on then
		tfg = magenta3
	else if mb_inputs.b_value == on then
		tfg = magenta3
	else if current_alarm.alarm_status == w_note then
		tfg = flashred
	else if current_alarm.alarm_status == w_clr then
		tfg = red
	else
		tfg = text_col

	if dec_places==2 then realf=fixed2
	else if dec_places==1 then realf=fixed1
	else realf=fixed0

	X=-24 Y=-16 W=48 H=31 FG=decoroff JUST=TOPLEFT FS=FILLSOLID ANGLE=0 ROTRECT
	X=-22 Y=0 W=44 H=13 FG=LIGHTGREY JUST=TOPLEFT FS=FILLSOLID ANGLE=0 ROTRECT
	X=0 Y=-7 CH=11 FONT=FONT_NORMAL FONTNAME="Arial" JUST=centrecentre TEXT(tfg=black, title)
	X=-6 Y=8 CH=11 TEXT(status_e_ip.e_value)

	Clear
	X=-22 Y=1 Add	X=-22 Y=15 Add	X=22 Y=15 Add
	FG=grey80 LS=SOLID LW=1 CS=CAPROUND LINE clear
	Clear
	X=-22 Y=0 Add	X=22 Y=0 Add	X=22 Y=14 Add
	FG=grey80 LS=SOLID LW=1 CS=CAPROUND LINE clear
	Clear
	X=-24 Y=-16 Add	X=-24 Y=17 Add	X=24 Y=17 Add
	FG=grey40 LS=SOLID LW=1 CS=CAPROUND LINE clear
	Clear
	X=-24 Y=-16 Add	X=24 Y=-16 Add	X=24 Y=17 Add
	FG=white LS=SOLID LW=1 CS=CAPROUND LINE clear
	X=17 Y=8 CH=11 TEXT(tfg=black, units)
end


object main_object (bg,fg,w,h,tbg,tfg)
begin
!
	scale=400 text_meter(8000,2351,heathro3,"TEST","",magenta,1)                  
	y+=100 scale=300 text_modbus_meter(8000,8010,2351,heathro3,"TEST","",magenta,1,int,int)
!
end

mimic = main_object w=900,h=400,just=centrecentre,fg=white,bg=aquamarine3,resizable



